{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Array/Array_Method/","title":"Array Method","text":"<p>Bien s\u00fbr, voici une explication d\u00e9taill\u00e9e avec des exemples pour certaines des m\u00e9thodes les plus utilis\u00e9es de la classe Array en JavaScript.</p>"},{"location":"Array/Array_Method/#1-map","title":"1. <code>map()</code>","text":"<ul> <li>Utilisation : Cr\u00e9e un nouveau tableau avec les r\u00e9sultats de l'appel d'une fonction fournie sur chaque \u00e9l\u00e9ment du tableau.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet doubled = numbers.map(num =&gt; num * 2);\nconsole.log(doubled); // [2, 4, 6, 8, 10]\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#2-filter","title":"2. <code>filter()</code>","text":"<ul> <li>Utilisation : Cr\u00e9e un nouveau tableau avec tous les \u00e9l\u00e9ments qui passent le test impl\u00e9ment\u00e9 par la fonction fournie.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet evens = numbers.filter(num =&gt; num % 2 === 0);\nconsole.log(evens); // [2, 4]\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#3-reduce","title":"3. <code>reduce()</code>","text":"<ul> <li>Utilisation : Applique une fonction contre un accumulateur et chaque \u00e9l\u00e9ment du tableau (de gauche \u00e0 droite) pour le r\u00e9duire \u00e0 une seule valeur.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet sum = numbers.reduce((accumulator, currentValue) =&gt; accumulator + currentValue, 0);\nconsole.log(sum); // 15\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#4-foreach","title":"4. <code>forEach()</code>","text":"<ul> <li>Utilisation : Ex\u00e9cute une fonction fournie une fois pour chaque \u00e9l\u00e9ment du tableau.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nnumbers.forEach(num =&gt; console.log(num * 2));\n// Affiche 2, 4, 6, 8, 10\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#5-find","title":"5. <code>find()</code>","text":"<ul> <li>Utilisation : Renvoie la valeur du premier \u00e9l\u00e9ment dans le tableau qui satisfait la fonction de test fournie.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet firstGreaterThanTwo = numbers.find(num =&gt; num &gt; 2);\nconsole.log(firstGreaterThanTwo); // 3\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#6-some","title":"6. <code>some()</code>","text":"<ul> <li>Utilisation : Teste si au moins un \u00e9l\u00e9ment du tableau passe le test impl\u00e9ment\u00e9 par la fonction fournie.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet hasEven = numbers.some(num =&gt; num % 2 === 0);\nconsole.log(hasEven); // true\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#7-every","title":"7. <code>every()</code>","text":"<ul> <li>Utilisation : Teste si tous les \u00e9l\u00e9ments du tableau passent le test impl\u00e9ment\u00e9 par la fonction fournie.</li> <li>Exemple : <pre><code>let numbers = [2, 4, 6, 8, 10];\nlet allEven = numbers.every(num =&gt; num % 2 === 0);\nconsole.log(allEven); // true\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#8-sort","title":"8. <code>sort()</code>","text":"<ul> <li>Utilisation : Trie les \u00e9l\u00e9ments d'un tableau in place et renvoie le tableau.</li> <li>Exemple : <pre><code>let numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) =&gt; a - b);\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#9-concat","title":"9. <code>concat()</code>","text":"<ul> <li>Utilisation : Fusionne deux ou plusieurs tableaux.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3];\nlet moreNumbers = [4, 5, 6];\nlet combined = numbers.concat(moreNumbers);\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n</code></pre></li> </ul>"},{"location":"Array/Array_Method/#10-slice","title":"10. <code>slice()</code>","text":"<ul> <li>Utilisation : Renvoie une copie superficielle d'une portion d'un tableau dans un nouveau tableau.</li> <li>Exemple : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet middle = numbers.slice(1, 4);\nconsole.log(middle); // [2, 3, 4]\n</code></pre></li> </ul> <p>Ces m\u00e9thodes sont essentielles pour la manipulation des tableaux en</p>"},{"location":"Array/bonjour/","title":"Contenu","text":"<ul> <li>Contenu</li> <li>la fonction map<ul> <li>Syntaxe de base</li> <li>Fonctionnement de <code>map()</code></li> <li>Exemple d'Utilisation</li> <li>Points Importants</li> </ul> </li> <li>Exemples simple<ul> <li>1. Transformation d'\u00c9l\u00e9ments</li> <li>2. Extraction de Propri\u00e9t\u00e9s d'Objets</li> <li>3. Conversion de Types de Donn\u00e9es</li> <li>4. Appliquer une Fonction Complexes</li> <li>5. Cr\u00e9ation de Nouvelles Structures de Donn\u00e9es</li> <li>6. Combinaison avec d'autres M\u00e9thodes de Tableau</li> <li>7. Mappage avec Index ou Tableau Complet</li> <li>8. Op\u00e9rations Math\u00e9matiques ou Algorithmiques</li> </ul> </li> <li><code>thisArg</code><ul> <li>Exemple sans <code>thisArg</code></li> <li>Exemple avec <code>thisArg</code></li> <li>Points Importants</li> <li>utilisation de <code>thisArg</code></li> <li>1. Acc\u00e8s aux Propri\u00e9t\u00e9s de l'Objet dans la Fonction de Rappel</li> <li>2. Utilisation dans les M\u00e9thodes de Classe</li> <li>3. Modification du Comportement de la Fonction de Rappel</li> <li>4. Utilisation avec des Objets Litt\u00e9raux</li> <li>Points Importants</li> </ul> </li> <li>Utilisation de <code>index</code> et <code>array</code><ul> <li>Utilisation de <code>index</code></li> <li>Utilisation de <code>array</code></li> <li>Points Importants</li> <li>Combinant <code>index</code> et <code>array</code></li> </ul> </li> <li>Combiner l'utilisation de l'Indice et du Tableau Entier<ul> <li>1. Calculs Bas\u00e9s sur l'Indice et le Tableau Entier</li> <li>2. Acc\u00e8s aux \u00c9l\u00e9ments Adjacents</li> <li>3. Utiliser l'Indice pour des Op\u00e9rations Conditionnelles</li> <li>4. Cr\u00e9er des Structures de Donn\u00e9es Complexes</li> <li>5. Utiliser l'Indice pour Contr\u00f4ler la Transformation</li> <li>6. R\u00e9f\u00e9rences Crois\u00e9es dans le Tableau</li> </ul> </li> <li>utilisation combin\u00e9e de thisArg, index et array<ul> <li>1. Utilisation de <code>thisArg</code> pour Acc\u00e9der aux Propri\u00e9t\u00e9s d'un Objet</li> <li>2. Utilisation de <code>index</code> pour des Transformations Bas\u00e9es sur la Position</li> <li>3. Utilisation de <code>array</code> pour des Comparaisons ou des Calculs Globaux</li> <li>4. Combinaison de <code>thisArg</code>, <code>index</code> et <code>array</code> pour une Logique Complexe</li> </ul> </li> </ul>"},{"location":"Array/bonjour/#la-fonction-map","title":"la fonction map","text":"<p>La fonction <code>map()</code> en JavaScript est une m\u00e9thode de prototype d'Array qui est utilis\u00e9e pour transformer les \u00e9l\u00e9ments d'un tableau en appliquant une fonction \u00e0 chaque \u00e9l\u00e9ment du tableau. Cette m\u00e9thode renvoie un nouveau tableau contenant les r\u00e9sultats de l'application de la fonction \u00e0 chaque \u00e9l\u00e9ment. Elle ne modifie pas le tableau original.</p>"},{"location":"Array/bonjour/#syntaxe-de-base","title":"Syntaxe de base","text":"<pre><code>let nouveauTableau = tableauOriginal.map(function(element, index, array) {\n    // Logique de transformation\n}, thisArg);\n</code></pre> <ul> <li>tableauOriginal : Le tableau sur lequel <code>map()</code> est appel\u00e9.</li> <li>function(element, index, array) : La fonction de rappel ex\u00e9cut\u00e9e sur chaque \u00e9l\u00e9ment du tableau.</li> <li>element : L'\u00e9l\u00e9ment courant du tableau.</li> <li>index (optionnel) : L'indice de l'\u00e9l\u00e9ment courant dans le tableau.</li> <li>array (optionnel) : Le tableau sur lequel <code>map()</code> a \u00e9t\u00e9 appel\u00e9.</li> <li>thisArg (optionnel) : La valeur \u00e0 utiliser comme <code>this</code> lors de l'ex\u00e9cution de la fonction de rappel.</li> <li>nouveauTableau : Le nouveau tableau r\u00e9sultant, contenant les \u00e9l\u00e9ments transform\u00e9s.</li> </ul>"},{"location":"Array/bonjour/#fonctionnement-de-map","title":"Fonctionnement de <code>map()</code>","text":"<ol> <li>It\u00e9ration sur le Tableau</li> <li> <p><code>map()</code> passe en revue chaque \u00e9l\u00e9ment du tableau <code>tableauOriginal</code>.</p> </li> <li> <p>Application de la Fonction de Rappel</p> </li> <li> <p>\u00c0 chaque \u00e9l\u00e9ment, la fonction de rappel est appel\u00e9e, recevant l'\u00e9l\u00e9ment courant, son indice et le tableau lui-m\u00eame en tant qu'arguments.</p> </li> <li> <p>Transformation des \u00c9l\u00e9ments :</p> </li> <li> <p>La fonction de rappel effectue une op\u00e9ration ou une transformation sur l'\u00e9l\u00e9ment courant et renvoie un nouveau r\u00e9sultat.</p> </li> <li> <p>Construction d'un Nouveau Tableau</p> </li> <li> <p>Les valeurs renvoy\u00e9es par la fonction de rappel pour chaque \u00e9l\u00e9ment sont rassembl\u00e9es dans un nouveau tableau.</p> </li> <li> <p>Renvoi du Nouveau Tableau</p> </li> <li>Une fois tous les \u00e9l\u00e9ments trait\u00e9s, le nouveau tableau transform\u00e9 est renvoy\u00e9.</li> </ol>"},{"location":"Array/bonjour/#exemple-dutilisation","title":"Exemple d'Utilisation","text":"<p>Supposons que nous ayons un tableau de nombres et que nous voulions cr\u00e9er un nouveau tableau avec le carr\u00e9 de chaque nombre :</p> <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet squares = numbers.map(number =&gt; number * number);\nconsole.log(squares); // [1, 4, 9, 16, 25]\n</code></pre> <p>Dans cet exemple, <code>map()</code> est utilis\u00e9 pour calculer le carr\u00e9 de chaque \u00e9l\u00e9ment du tableau <code>numbers</code>. Le r\u00e9sultat est un nouveau tableau <code>squares</code> contenant ces carr\u00e9s.</p>"},{"location":"Array/bonjour/#points-importants","title":"Points Importants","text":"<ul> <li><code>map()</code> est souvent utilis\u00e9 pour transformer des donn\u00e9es, notamment en manipulant des tableaux d'objets, en extrayant des sous-ensembles de donn\u00e9es ou en convertissant des types de donn\u00e9es.</li> <li>Contrairement \u00e0 d'autres m\u00e9thodes comme <code>forEach()</code>, <code>map()</code> renvoie toujours un nouveau tableau, ce qui le rend particuli\u00e8rement utile dans la programmation fonctionnelle.</li> <li><code>map()</code> n'affecte pas la taille du tableau original, mais la valeur de chaque \u00e9l\u00e9ment peut \u00eatre transform\u00e9e. Si aucun \u00e9l\u00e9ment n'est transform\u00e9, le tableau r\u00e9sultant aura la m\u00eame taille que le tableau original.</li> </ul> <p>La fonction <code>map()</code> en JavaScript est une m\u00e9thode de l'objet Array qui permet de cr\u00e9er un nouveau tableau en transformant chaque \u00e9l\u00e9ment du tableau original \u00e0 l'aide d'une fonction de rappel. L'argument <code>thisArg</code> dans <code>map()</code> est un param\u00e8tre optionnel qui permet de sp\u00e9cifier le contexte (<code>this</code>) pour la fonction de rappel.</p> <p></p> <p></p>"},{"location":"Array/bonjour/#exemples-simple","title":"Exemples simple","text":""},{"location":"Array/bonjour/#1-transformation-delements","title":"1. Transformation d'\u00c9l\u00e9ments","text":"<ul> <li>Modifier chaque \u00e9l\u00e9ment d'un tableau.</li> <li>Exemple : Doubler chaque nombre dans un tableau de nombres.      <pre><code>let numbers = [1, 2, 3];\nlet doubled = numbers.map(num =&gt; num * 2);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#2-extraction-de-proprietes-dobjets","title":"2. Extraction de Propri\u00e9t\u00e9s d'Objets","text":"<ul> <li>Extraire une propri\u00e9t\u00e9 sp\u00e9cifique de chaque objet dans un tableau d'objets.</li> <li>Exemple : Obtenir un tableau des noms \u00e0 partir d'un tableau d'utilisateurs.      <pre><code>let users = [{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}];\nlet names = users.map(user =&gt; user.name);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#3-conversion-de-types-de-donnees","title":"3. Conversion de Types de Donn\u00e9es","text":"<ul> <li>Transformer les types de donn\u00e9es des \u00e9l\u00e9ments d'un tableau.</li> <li>Exemple : Convertir un tableau de cha\u00eenes de caract\u00e8res en nombres.      <pre><code>let stringNumbers = [\"1\", \"2\", \"3\"];\nlet numbers = stringNumbers.map(Number);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#4-appliquer-une-fonction-complexes","title":"4. Appliquer une Fonction Complexes","text":"<ul> <li>Appliquer une logique complexe ou une fonction personnalis\u00e9e \u00e0 chaque \u00e9l\u00e9ment.</li> <li>Exemple : Ajouter une nouvelle propri\u00e9t\u00e9 \u00e0 chaque objet dans un tableau.      <pre><code>let items = [{name: \"chair\"}, {name: \"table\"}];\nlet itemsWithPrices = items.map(item =&gt; ({ ...item, price: 100 }));\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#5-creation-de-nouvelles-structures-de-donnees","title":"5. Cr\u00e9ation de Nouvelles Structures de Donn\u00e9es","text":"<ul> <li>G\u00e9n\u00e9rer un nouveau format ou une nouvelle structure de donn\u00e9es \u00e0 partir d'un tableau existant.</li> <li>Exemple : Cr\u00e9er un tableau de messages \u00e0 partir d'un tableau d'utilisateurs.      <pre><code>let users = [{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}];\nlet messages = users.map(user =&gt; `Bonjour ${user.name}, vous avez ${user.age} ans.`);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#6-combinaison-avec-dautres-methodes-de-tableau","title":"6. Combinaison avec d'autres M\u00e9thodes de Tableau","text":"<ul> <li>Cha\u00eener <code>map()</code> avec d'autres m\u00e9thodes de tableau pour des op\u00e9rations plus complexes.</li> <li>Exemple : Utiliser <code>map()</code> et <code>filter()</code> ensemble.      <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet doubledEvenNumbers = numbers.filter(num =&gt; num % 2 === 0).map(num =&gt; num * 2);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#7-mappage-avec-index-ou-tableau-complet","title":"7. Mappage avec Index ou Tableau Complet","text":"<ul> <li>Utiliser l'indice de l'\u00e9l\u00e9ment ou le tableau complet pour des op\u00e9rations plus avanc\u00e9es.</li> <li>Exemple : Utiliser l'indice pour modifier les \u00e9l\u00e9ments.      <pre><code>let items = [\"first\", \"second\", \"third\"];\nlet indexedItems = items.map((item, index) =&gt; `${index}: ${item}`);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#8-operations-mathematiques-ou-algorithmiques","title":"8. Op\u00e9rations Math\u00e9matiques ou Algorithmiques","text":"<ul> <li>Effectuer des calculs complexes ou des algorithmes sur les \u00e9l\u00e9ments d'un tableau.</li> <li>Exemple : Calculer le carr\u00e9 de chaque nombre d'un tableau.      <pre><code>let numbers = [1, 2, 3, 4];\nlet squares = numbers.map(num =&gt; num * num);\n</code></pre></li> </ul> <p><code>map()</code> est une m\u00e9thode de tableau tr\u00e8s puissante qui est largement utilis\u00e9e pour sa capacit\u00e9 \u00e0 transformer facilement les \u00e9l\u00e9ments d'un tableau, tout en gardant le tableau original inchang\u00e9.</p> <p></p> <p></p>"},{"location":"Array/bonjour/#thisarg","title":"<code>thisArg</code>","text":"<p>L'argument <code>thisArg</code> est utilis\u00e9 pour d\u00e9finir le contexte (<code>this</code>) dans lequel la fonction de rappel est ex\u00e9cut\u00e9e. Cela peut \u00eatre particuli\u00e8rement utile lorsque vous souhaitez acc\u00e9der \u00e0 des propri\u00e9t\u00e9s ou des m\u00e9thodes d'un objet sp\u00e9cifique dans votre fonction de rappel.</p>"},{"location":"Array/bonjour/#exemple-sans-thisarg","title":"Exemple sans <code>thisArg</code>","text":"<pre><code>let numbers = [1, 2, 3, 4, 5];\nlet squares = numbers.map(function(number) {\n    return number * number;\n});\n</code></pre> <p>Dans cet exemple, la fonction de rappel calcule le carr\u00e9 de chaque nombre. <code>this</code> dans la fonction de rappel n'est pas d\u00e9fini ou se r\u00e9f\u00e8re \u00e0 l'objet global.</p>"},{"location":"Array/bonjour/#exemple-avec-thisarg","title":"Exemple avec <code>thisArg</code>","text":"<pre><code>function multiply(number) {\n    return number * this.multiplier;\n}\n\nlet numbers = [1, 2, 3, 4, 5];\nlet multiplierObject = { multiplier: 10 };\nlet multipliedNumbers = numbers.map(multiply, multiplierObject);\n</code></pre> <p>Ici, la fonction <code>multiply</code> utilise <code>this.multiplier</code>. Lorsque <code>map()</code> est appel\u00e9, <code>multiplierObject</code> est pass\u00e9 comme <code>thisArg</code>, ce qui fait que <code>this</code> dans <code>multiply</code> se r\u00e9f\u00e8re \u00e0 <code>multiplierObject</code>.</p>"},{"location":"Array/bonjour/#points-importants_1","title":"Points Importants","text":"<ul> <li>Si la fonction de rappel est une fonction fl\u00e9ch\u00e9e (<code>arrow function</code>), <code>thisArg</code> est ignor\u00e9 car les fonctions fl\u00e9ch\u00e9es n'ont pas leur propre contexte <code>this</code> ; elles le captent de leur contexte englobant.</li> <li><code>map()</code> est utilis\u00e9e pour les transformations de donn\u00e9es et renvoie un nouveau tableau sans modifier le tableau original.</li> <li><code>thisArg</code> est utile pour acc\u00e9der \u00e0 des objets ou des fonctions sp\u00e9cifiques dans la fonction de rappel sans avoir \u00e0 les lier explicitement.</li> </ul> <p>La fonction <code>map()</code> en JavaScript est une m\u00e9thode tr\u00e8s versatile utilis\u00e9e pour cr\u00e9er un nouveau tableau en transformant chaque \u00e9l\u00e9ment d'un tableau source. La fonction de rappel utilis\u00e9e avec <code>map()</code> peut prendre jusqu'\u00e0 trois arguments : l'\u00e9l\u00e9ment en cours de traitement, son indice dans le tableau et le tableau lui-m\u00eame. Ces arguments sont souvent not\u00e9s comme <code>element</code>, <code>index</code> et <code>array</code>.</p> <p></p>"},{"location":"Array/bonjour/#utilisation-de-thisarg","title":"utilisation de <code>thisArg</code>","text":"<p>L'utilisation de <code>thisArg</code> avec la m\u00e9thode <code>map()</code> en JavaScript permet de d\u00e9finir le contexte (<code>this</code>) dans lequel la fonction de rappel est ex\u00e9cut\u00e9e. Voici diff\u00e9rentes fa\u00e7ons d'utiliser <code>map()</code> avec <code>thisArg</code> :</p>"},{"location":"Array/bonjour/#1-acces-aux-proprietes-de-lobjet-dans-la-fonction-de-rappel","title":"1. Acc\u00e8s aux Propri\u00e9t\u00e9s de l'Objet dans la Fonction de Rappel","text":"<p>Vous pouvez utiliser <code>thisArg</code> pour acc\u00e9der aux propri\u00e9t\u00e9s d'un objet sp\u00e9cifique dans votre fonction de rappel.</p> <pre><code>function multiplyByMultiplier(number) {\n    return number * this.multiplier;\n}\n\nconst numbers = [1, 2, 3];\nconst multiplierObj = { multiplier: 5 };\nconst multipliedNumbers = numbers.map(multiplyByMultiplier, multiplierObj);\n// multipliedNumbers = [5, 10, 15]\n</code></pre> <p>Ici, <code>multiplyByMultiplier</code> utilise <code>this.multiplier</code> o\u00f9 <code>this</code> est li\u00e9 \u00e0 <code>multiplierObj</code> gr\u00e2ce \u00e0 <code>thisArg</code>.</p>"},{"location":"Array/bonjour/#2-utilisation-dans-les-methodes-de-classe","title":"2. Utilisation dans les M\u00e9thodes de Classe","text":"<p>Si vous travaillez avec des classes, <code>thisArg</code> peut \u00eatre utilis\u00e9 pour passer une instance de classe \u00e0 la fonction de rappel.</p> <pre><code>class NumberProcessor {\n    constructor(factor) {\n        this.factor = factor;\n    }\n\n    multiply(number) {\n        return number * this.factor;\n    }\n}\n\nconst processor = new NumberProcessor(2);\nconst numbers = [1, 2, 3];\nconst processedNumbers = numbers.map(processor.multiply, processor);\n// processedNumbers = [2, 4, 6]\n</code></pre>"},{"location":"Array/bonjour/#3-modification-du-comportement-de-la-fonction-de-rappel","title":"3. Modification du Comportement de la Fonction de Rappel","text":"<p><code>thisArg</code> peut \u00eatre utilis\u00e9 pour changer le comportement de la fonction de rappel en fonction du contexte.</p> <pre><code>function addPrefix(string) {\n    return this.prefix + string;\n}\n\nconst strings = [\"one\", \"two\", \"three\"];\nconst context = { prefix: \"Number \" };\nconst prefixedStrings = strings.map(addPrefix, context);\n// prefixedStrings = [\"Number one\", \"Number two\", \"Number three\"]\n</code></pre>"},{"location":"Array/bonjour/#4-utilisation-avec-des-objets-litteraux","title":"4. Utilisation avec des Objets Litt\u00e9raux","text":"<p>Vous pouvez passer un objet litt\u00e9ral comme <code>thisArg</code> pour acc\u00e9der \u00e0 ses propri\u00e9t\u00e9s dans la fonction de rappel.</p> <pre><code>function calculatePercentage(value) {\n    return value / this.total * 100;\n}\n\nconst values = [20, 30, 50];\nconst totalObj = { total: 100 };\nconst percentages = values.map(calculatePercentage, totalObj);\n// percentages = [20, 30, 50]\n</code></pre>"},{"location":"Array/bonjour/#points-importants_2","title":"Points Importants","text":"<ul> <li>Si vous utilisez des fonctions fl\u00e9ch\u00e9es comme fonctions de rappel, <code>thisArg</code> est ignor\u00e9 car les fonctions fl\u00e9ch\u00e9es n'ont pas leur propre <code>this</code>. Elles capturent <code>this</code> de leur contexte englobant.</li> <li><code>thisArg</code> est utile lorsque vous voulez que la fonction de rappel ait acc\u00e8s \u00e0 des propri\u00e9t\u00e9s ou des m\u00e9thodes d'un objet sp\u00e9cifique.</li> <li><code>map()</code> cr\u00e9e toujours un nouveau tableau et ne modifie pas le tableau original.</li> </ul> <p>Ces exemples montrent comment <code>thisArg</code> peut \u00eatre utilis\u00e9 pour personnaliser le contexte d'ex\u00e9cution de la fonction de rappel dans <code>map()</code>, ce qui rend cette m\u00e9thode encore plus flexible et puissante pour manipuler des tableaux.</p> <p></p> <p></p>"},{"location":"Array/bonjour/#utilisation-de-index-et-array","title":"Utilisation de <code>index</code> et <code>array</code>","text":"<p>L'utilisation des param\u00e8tres <code>index</code> et <code>array</code> dans la fonction de rappel de <code>map()</code> offre une flexibilit\u00e9 suppl\u00e9mentaire pour des transformations plus complexes.</p>"},{"location":"Array/bonjour/#utilisation-de-index","title":"Utilisation de <code>index</code>","text":"<ul> <li>Modification Bas\u00e9e sur l'Indice : Vous pouvez utiliser l'indice de l'\u00e9l\u00e9ment pour effectuer des calculs ou des transformations qui d\u00e9pendent de la position de l'\u00e9l\u00e9ment dans le tableau.</li> </ul> <pre><code>let numbers = [10, 20, 30, 40];\nlet indexedNumbers = numbers.map((num, index) =&gt; num * index);\n// indexedNumbers est [0, 20, 60, 120]\n</code></pre> <p>Ici, chaque \u00e9l\u00e9ment est multipli\u00e9 par son indice dans le tableau.</p> <ul> <li> <p>Cr\u00e9ation d'un Tableau de Cha\u00eenes Incluant l'Indice : <pre><code>let fruits = ['apple', 'banana', 'cherry'];\nlet fruitWithIndex = fruits.map((fruit, index) =&gt; `${index + 1}: ${fruit}`);\n// fruitWithIndex = [\"1: apple\", \"2: banana\", \"3: cherry\"]\n</code></pre></p> </li> <li> <p>Calcul Bas\u00e9 sur l'Indice (par exemple, pour un Algorithme Math\u00e9matique) : <pre><code>let numbers = [6, 7, 8, 9];\nlet indexedCalculation = numbers.map((num, index) =&gt; num * index);\n// indexedCalculation = [0, 7, 16, 27]\n</code></pre></p> </li> </ul>"},{"location":"Array/bonjour/#utilisation-de-array","title":"Utilisation de <code>array</code>","text":"<ul> <li>Acc\u00e8s au Tableau Complet : La r\u00e9f\u00e9rence au tableau complet permet d'effectuer des op\u00e9rations qui peuvent n\u00e9cessiter une vue d'ensemble du tableau, comme des comparaisons avec d'autres \u00e9l\u00e9ments.</li> </ul> <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet average = numbers.map((num, index, arr) =&gt; num - (arr.reduce((a, b) =&gt; a + b) / arr.length));\n// average calcule la diff\u00e9rence de chaque \u00e9l\u00e9ment par rapport \u00e0 la moyenne\n</code></pre> <p>Dans cet exemple, la diff\u00e9rence entre chaque nombre et la moyenne du tableau est calcul\u00e9e.</p> <ul> <li> <p>Acc\u00e8s au Tableau Entier pour des Calculs Bas\u00e9s sur d'autres \u00c9l\u00e9ments : <pre><code>let numbers = [1, 2, 3, 4];\nlet percentages = numbers.map((num, index, arr) =&gt; num / arr.reduce((a, b) =&gt; a + b) * 100);\n// percentages = [10, 20, 30, 40] (pourcentages de la somme totale)\n</code></pre></p> </li> <li> <p>Utilisation de <code>array</code> pour des Comparaisons ou des Conditions : <pre><code>let numbers = [15, 30, 45];\nlet isLargest = numbers.map((num, index, arr) =&gt; num === Math.max(...arr));\n// isLargest = [false, false, true]\n</code></pre></p> </li> </ul>"},{"location":"Array/bonjour/#points-importants_3","title":"Points Importants","text":"<ul> <li><code>map()</code> est non destructrice : elle ne modifie pas le tableau original, mais renvoie un nouveau tableau.</li> <li>L'utilisation de <code>index</code> et <code>array</code> n'est pas toujours n\u00e9cessaire, mais elle offre des options suppl\u00e9mentaires pour des transformations plus sophistiqu\u00e9es.</li> <li><code>map()</code> est id\u00e9ale pour les op\u00e9rations qui transforment chaque \u00e9l\u00e9ment d'un tableau de mani\u00e8re ind\u00e9pendante, mais avec l'acc\u00e8s \u00e0 l'indice et au tableau complet, elle peut g\u00e9rer des cas plus complexes.</li> </ul> <p>En r\u00e9sum\u00e9, la m\u00e9thode <code>map()</code> avec ses arguments <code>element</code>, <code>index</code> et <code>array</code> fournit une m\u00e9thode puissante et flexible pour cr\u00e9er de nouveaux tableaux en transformant les \u00e9l\u00e9ments d'un tableau existant.</p> <p></p> <p>La m\u00e9thode <code>map()</code> en JavaScript est fr\u00e9quemment utilis\u00e9e pour transformer les \u00e9l\u00e9ments d'un tableau. En plus de l'\u00e9l\u00e9ment actuellement trait\u00e9, <code>map()</code> peut \u00e9galement recevoir l'indice de l'\u00e9l\u00e9ment (<code>index</code>) et le tableau complet sur lequel la m\u00e9thode est appel\u00e9e (<code>array</code>) comme arguments de la fonction de rappel. Ces arguments suppl\u00e9mentaires offrent une flexibilit\u00e9 accrue pour les transformations complexes. Voici plusieurs utilisations de <code>map()</code> en tirant parti de <code>index</code> et <code>array</code> :</p> <p></p>"},{"location":"Array/bonjour/#combinant-index-et-array","title":"Combinant <code>index</code> et <code>array</code>","text":"<ul> <li> <p>Cr\u00e9ation d'\u00c9l\u00e9ments de Liste HTML avec Index et Longueur Totale : <pre><code>let items = ['Item1', 'Item2', 'Item3'];\nlet listItems = items.map((item, index, arr) =&gt; `&lt;li&gt;${item} (${index + 1} of ${arr.length})&lt;/li&gt;`);\n// listItems = [\"&lt;li&gt;Item1 (1 of 3)&lt;/li&gt;\", \"&lt;li&gt;Item2 (2 of 3)&lt;/li&gt;\", \"&lt;li&gt;Item3 (3 of 3)&lt;/li&gt;\"]\n</code></pre></p> </li> <li> <p>Construction de Tableaux de Donn\u00e9es pour des Visualisations : <pre><code>let dataPoints = [100, 200, 300];\nlet graphPoints = dataPoints.map((point, index, arr) =&gt; {\n    return {\n        x: index,\n        y: point,\n        percentageOfTotal: point / arr.reduce((a, b) =&gt; a + b) * 100\n    };\n});\n// graphPoints = [{ x: 0, y: 100, percentageOfTotal: ... }, ...]\n</code></pre></p> </li> </ul> <p></p> <p></p>"},{"location":"Array/bonjour/#combiner-lutilisation-de-lindice-et-du-tableau-entier","title":"Combiner l'utilisation de l'Indice et du Tableau Entier","text":"<p>La m\u00e9thode <code>map()</code> en JavaScript peut \u00eatre utilis\u00e9e de mani\u00e8re tr\u00e8s cr\u00e9ative en combinant les arguments <code>index</code> et <code>array</code> avec l'\u00e9l\u00e9ment en cours de traitement. Cette approche permet de r\u00e9aliser des transformations complexes sur les \u00e9l\u00e9ments du tableau en tenant compte de leur position ou en se r\u00e9f\u00e9rant \u00e0 l'ensemble du tableau. Voici diff\u00e9rentes mani\u00e8res d'utiliser <code>map()</code> en combinant <code>index</code> et <code>array</code> :</p>"},{"location":"Array/bonjour/#1-calculs-bases-sur-lindice-et-le-tableau-entier","title":"1. Calculs Bas\u00e9s sur l'Indice et le Tableau Entier","text":"<ul> <li>Calculer la Moyenne et la Soustraire de Chaque \u00c9l\u00e9ment : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet average = numbers.reduce((sum, num) =&gt; sum + num, 0) / numbers.length;\nlet deviations = numbers.map((num, index, arr) =&gt; num - average);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#2-acces-aux-elements-adjacents","title":"2. Acc\u00e8s aux \u00c9l\u00e9ments Adjacents","text":"<ul> <li>Cr\u00e9er un Tableau de Paires d'\u00c9l\u00e9ments Adjacents : <pre><code>let items = ['a', 'b', 'c', 'd'];\nlet pairs = items.map((current, index, arr) =&gt; \n              index &lt; arr.length - 1 ? [current, arr[index + 1]] : null)\n              .filter(pair =&gt; pair !== null);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#3-utiliser-lindice-pour-des-operations-conditionnelles","title":"3. Utiliser l'Indice pour des Op\u00e9rations Conditionnelles","text":"<ul> <li>Marquer les \u00c9l\u00e9ments Bas\u00e9s sur leur Position : <pre><code>let items = ['first', 'second', 'third'];\nlet markedItems = items.map((item, index, arr) =&gt; \n                    `${item}${index === arr.length - 1 ? ' (last)' : ''}`);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#4-creer-des-structures-de-donnees-complexes","title":"4. Cr\u00e9er des Structures de Donn\u00e9es Complexes","text":"<ul> <li>Construire un Objet avec des Informations Suppl\u00e9mentaires : <pre><code>let numbers = [10, 20, 30];\nlet detailedNumbers = numbers.map((num, index, arr) =&gt; ({\n  value: num,\n  isEven: num % 2 === 0,\n  position: index,\n  percentageOfTotal: (num / arr.reduce((a, b) =&gt; a + b)) * 100\n}));\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#5-utiliser-lindice-pour-controler-la-transformation","title":"5. Utiliser l'Indice pour Contr\u00f4ler la Transformation","text":"<ul> <li>Transformation Conditionnelle Bas\u00e9e sur l'Indice : <pre><code>let names = ['Alice', 'Bob', 'Charlie'];\nlet upperCasedOdd = names.map((name, index) =&gt; index % 2 !== 0 ? name.toUpperCase() : name);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#6-references-croisees-dans-le-tableau","title":"6. R\u00e9f\u00e9rences Crois\u00e9es dans le Tableau","text":"<ul> <li>Comparaison de l'\u00c9l\u00e9ment Actuel avec d'Autres \u00c9l\u00e9ments : <pre><code>let numbers = [3, 6, 2, 8, 5];\nlet greaterThanPrevious = numbers.map((num, index, arr) =&gt; \n                            index === 0 ? true : num &gt; arr[index - 1]);\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#utilisation-combinee-de-thisarg-index-et-array","title":"utilisation combin\u00e9e de thisArg, index et array","text":""},{"location":"Array/bonjour/#1-utilisation-de-thisarg-pour-acceder-aux-proprietes-dun-objet","title":"1. Utilisation de <code>thisArg</code> pour Acc\u00e9der aux Propri\u00e9t\u00e9s d'un Objet","text":"<ul> <li>Transformer des \u00c9l\u00e9ments en Utilisant une Propri\u00e9t\u00e9 d'Objet : <pre><code>function scaleNumber(number) {\n    return number * this.scaleFactor;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst scaleContext = { scaleFactor: 10 };\nconst scaledNumbers = numbers.map(scaleNumber, scaleContext);\n// R\u00e9sultat : [10, 20, 30, 40, 50]\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#2-utilisation-de-index-pour-des-transformations-basees-sur-la-position","title":"2. Utilisation de <code>index</code> pour des Transformations Bas\u00e9es sur la Position","text":"<ul> <li>Marquage des \u00c9l\u00e9ments Bas\u00e9 sur leur Indice : <pre><code>const items = ['item1', 'item2', 'item3'];\nconst markedItems = items.map(function(item, index) {\n    return `${item} - Position: ${index + 1} sur ${this.totalItems}`;\n}, { totalItems: items.length });\n// R\u00e9sultat : [\"item1 - Position: 1 sur 3\", \"item2 - Position: 2 sur 3\", ...]\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#3-utilisation-de-array-pour-des-comparaisons-ou-des-calculs-globaux","title":"3. Utilisation de <code>array</code> pour des Comparaisons ou des Calculs Globaux","text":"<ul> <li>Calculs Impliquant le Tableau Entier : <pre><code>const numbers = [2, 3, 5, 7, 11];\nconst percentages = numbers.map(function(number, index, arr) {\n    const total = arr.reduce((acc, curr) =&gt; acc + curr, 0);\n    return `Number: ${number}, Share: ${(number / total * 100).toFixed(2)}%`;\n});\n// R\u00e9sultat : [\"Number: 2, Share: 6.67%\", \"Number: 3, Share: 10.00%\", ...]\n</code></pre></li> </ul>"},{"location":"Array/bonjour/#4-combinaison-de-thisarg-index-et-array-pour-une-logique-complexe","title":"4. Combinaison de <code>thisArg</code>, <code>index</code> et <code>array</code> pour une Logique Complexe","text":"<ul> <li>Utilisation Compl\u00e8te des Trois Arguments pour une Logique Personnalis\u00e9e : <pre><code>function customTransform(element, index, arr) {\n    return `Element: ${element}, Scaled by: ${this.scaleFactor}, Position: ${index + 1}, Total Elements: ${arr.length}`;\n}\n\nconst elements = [10, 20, 30];\nconst transformContext = { scaleFactor: 2 };\nconst transformedElements = elements.map(customTransform, transformContext);\n// R\u00e9sultat : [\"Element: 10, Scaled by: 2, Position: 1, Total Elements: 3\", ...]\n</code></pre></li> </ul> <p>Dans ces exemples, <code>thisArg</code> est utilis\u00e9 pour fournir un contexte externe (comme un objet avec des propri\u00e9t\u00e9s sp\u00e9cifiques) \u00e0 la fonction de rappel. L'argument <code>index</code> est utilis\u00e9 pour acc\u00e9der \u00e0 la position actuelle de l'\u00e9l\u00e9ment dans le tableau, et <code>array</code> est utilis\u00e9 pour effectuer des op\u00e9rations qui impliquent une vision globale du tableau, comme des calculs impliquant tous les \u00e9l\u00e9ments.</p> <p>Ces exemples montrent la flexibilit\u00e9 et la puissance de <code>map()</code> pour effectuer des transformations complexes sur des tableaux, tout en fournissant un contr\u00f4le fin sur le contexte et en acc\u00e9dant \u00e0 des informations d\u00e9taill\u00e9es sur chaque \u00e9l\u00e9ment et le tableau dans son ensemble.</p>"},{"location":"Array/concat/","title":"Concat","text":"<p>La fonction <code>concat()</code> en JavaScript est une m\u00e9thode de l'objet <code>Array</code> utilis\u00e9e pour fusionner deux ou plusieurs tableaux en un seul nouveau tableau. Cette m\u00e9thode est non destructive, ce qui signifie qu'elle ne modifie pas les tableaux existants mais renvoie plut\u00f4t un nouveau tableau qui est la concat\u00e9nation des tableaux d'origine.</p>"},{"location":"Array/concat/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>nouveauTableau = tableauOriginal.concat(tableau1[, tableau2[, ...[, tableauN]]])\n</code></pre> <ul> <li>tableauOriginal : Le tableau \u00e0 partir duquel <code>concat()</code> est appel\u00e9.</li> <li>tableau1, tableau2, ..., tableauN : Un ou plusieurs tableaux (ou valeurs) \u00e0 concat\u00e9ner avec le tableau original.</li> </ul>"},{"location":"Array/concat/#fonctionnement","title":"Fonctionnement :","text":"<ul> <li><code>concat()</code> prend un ou plusieurs tableaux et/ou valeurs et les fusionne avec le tableau sur lequel elle est appel\u00e9e.</li> <li>Les tableaux pass\u00e9s en arguments sont ajout\u00e9s \u00e0 la fin du tableau original, dans l'ordre o\u00f9 ils sont fournis.</li> <li>Si les arguments fournis ne sont pas des tableaux, ils sont ajout\u00e9s au nouveau tableau en tant que valeurs individuelles.</li> </ul>"},{"location":"Array/concat/#exemples","title":"Exemples :","text":"<ol> <li> <p>Concat\u00e9nation de Deux Tableaux : <pre><code>let alpha = ['a', 'b', 'c'];\nlet numeric = [1, 2, 3];\nlet alphanumeric = alpha.concat(numeric);\n// alphanumeric = ['a', 'b', 'c', 1, 2, 3]\n</code></pre></p> </li> <li> <p>Concat\u00e9nation de Plusieurs Tableaux : <pre><code>let num1 = [1, 2, 3];\nlet num2 = [4, 5, 6];\nlet num3 = [7, 8, 9];\nlet numbers = num1.concat(num2, num3);\n// numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre></p> </li> <li> <p>Ajout d'\u00c9l\u00e9ments Individuels : <pre><code>let letters = ['a', 'b', 'c'];\nlet moreLetters = letters.concat('d', 'e');\n// moreLetters = ['a', 'b', 'c', 'd', 'e']\n</code></pre></p> </li> <li> <p>Concat\u00e9nation de Tableaux et de Valeurs : <pre><code>let numbers = [1, 2, 3];\nlet moreNumbers = numbers.concat([4, 5], 6, 7);\n// moreNumbers = [1, 2, 3, 4, 5, 6, 7]\n</code></pre></p> </li> </ol>"},{"location":"Array/concat/#points-importants","title":"Points Importants :","text":"<ul> <li><code>concat()</code> ne modifie pas les tableaux existants mais renvoie plut\u00f4t un nouveau tableau.</li> <li>Il est possible de concat\u00e9ner des valeurs primitives (comme des cha\u00eenes de caract\u00e8res ou des nombres) en plus des tableaux.</li> <li>Si un \u00e9l\u00e9ment pass\u00e9 \u00e0 <code>concat()</code> est un tableau, ses \u00e9l\u00e9ments sont ajout\u00e9s. Si l'\u00e9l\u00e9ment n'est pas un tableau, il est ajout\u00e9 tel quel dans le nouveau tableau.</li> <li>Cette m\u00e9thode est souvent utilis\u00e9e pour fusionner des tableaux sans modifier les tableaux originaux, pr\u00e9servant ainsi l'immutabilit\u00e9 des donn\u00e9es.</li> </ul> <p>La m\u00e9thode <code>concat()</code> en JavaScript est utilis\u00e9e pour combiner deux ou plusieurs tableaux en un seul. Voici diff\u00e9rentes mani\u00e8res d'utiliser <code>concat()</code> :</p>"},{"location":"Array/concat/#1-fusionner-des-tableaux","title":"1. Fusionner des Tableaux :","text":"<ul> <li>Combiner plusieurs tableaux en un seul : <pre><code>let array1 = [1, 2, 3];\nlet array2 = [4, 5, 6];\nlet combinedArray = array1.concat(array2);\n// combinedArray = [1, 2, 3, 4, 5, 6]\n</code></pre></li> </ul>"},{"location":"Array/concat/#2-ajouter-des-elements-a-un-tableau","title":"2. Ajouter des \u00c9l\u00e9ments \u00e0 un Tableau :","text":"<ul> <li>Ajouter des \u00e9l\u00e9ments individuels \u00e0 un tableau : <pre><code>let numbers = [1, 2, 3];\nlet moreNumbers = numbers.concat(4, 5);\n// moreNumbers = [1, 2, 3, 4, 5]\n</code></pre></li> </ul>"},{"location":"Array/concat/#3-combiner-des-tableaux-avec-des-valeurs-non-tableau","title":"3. Combiner des Tableaux avec des Valeurs Non-Tableau :","text":"<ul> <li>Fusionner des tableaux avec des \u00e9l\u00e9ments non-tableau : <pre><code>let letters = ['a', 'b', 'c'];\nlet numbersAndBoolean = letters.concat(1, [2, 3], true);\n// numbersAndBoolean = ['a', 'b', 'c', 1, 2, 3, true]\n</code></pre></li> </ul>"},{"location":"Array/concat/#4-concatenation-en-chaine","title":"4. Concat\u00e9nation en Cha\u00eene :","text":"<ul> <li>Utiliser <code>concat()</code> plusieurs fois de suite : <pre><code>let array1 = [1, 2];\nlet array2 = [3, 4];\nlet array3 = [5, 6];\nlet combinedArray = array1.concat(array2).concat(array3);\n// combinedArray = [1, 2, 3, 4, 5, 6]\n</code></pre></li> </ul>"},{"location":"Array/concat/#5-creation-de-copies-superficielles","title":"5. Cr\u00e9ation de Copies Superficielles :","text":"<ul> <li>Cr\u00e9er une copie superficielle d'un tableau : <pre><code>let original = [1, 2, 3];\nlet copy = original.concat();\n// copy = [1, 2, 3]\n</code></pre></li> </ul>"},{"location":"Array/concat/#6-fusion-de-tableaux-contenant-des-objets","title":"6. Fusion de Tableaux Contenant des Objets :","text":"<ul> <li>Combiner des tableaux qui contiennent des objets : <pre><code>let obj1 = [{ a: 1 }, { b: 2 }];\nlet obj2 = [{ c: 3 }];\nlet combinedObjects = obj1.concat(obj2);\n// combinedObjects = [{ a: 1 }, { b: 2 }, { c: 3 }]\n</code></pre></li> </ul>"},{"location":"Array/concat/#points-importants_1","title":"Points Importants :","text":"<ul> <li><code>concat()</code> ne modifie pas les tableaux existants mais cr\u00e9e un nouveau tableau.</li> <li>Elle peut \u00eatre utilis\u00e9e pour combiner n'importe quel nombre de tableaux et/ou de valeurs suppl\u00e9mentaires.</li> <li><code>concat()</code> r\u00e9alise une copie superficielle, ce qui signifie que les objets et les tableaux imbriqu\u00e9s dans les tableaux originaux sont copi\u00e9s par r\u00e9f\u00e9rence plut\u00f4t que dupliqu\u00e9s.</li> </ul> <p>Ces diff\u00e9rentes utilisations montrent la flexibilit\u00e9 de <code>concat()</code> pour fusionner des tableaux et ajouter des \u00e9l\u00e9ments \u00e0 des tableaux en JavaScript.</p>"},{"location":"Array/every/","title":"Every","text":"<p>La fonction <code>every()</code> en JavaScript est une m\u00e9thode de l'objet <code>Array</code> qui teste si tous les \u00e9l\u00e9ments d'un tableau passent un test impl\u00e9ment\u00e9 par une fonction de rappel fournie. Elle est souvent utilis\u00e9e pour v\u00e9rifier si tous les \u00e9l\u00e9ments d'un tableau satisfont \u00e0 une condition sp\u00e9cifique.</p>"},{"location":"Array/every/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>array.every(callback(element[, index[, array]])[, thisArg])\n</code></pre> <ul> <li>callback : Une fonction qui teste chaque \u00e9l\u00e9ment du tableau. Cette fonction est appel\u00e9e avec les arguments suivants :</li> <li>element : L'\u00e9l\u00e9ment actuellement trait\u00e9 dans le tableau.</li> <li>index (optionnel) : L'indice de l'\u00e9l\u00e9ment actuellement trait\u00e9 dans le tableau.</li> <li>array (optionnel) : Le tableau sur lequel <code>every()</code> a \u00e9t\u00e9 appel\u00e9.</li> <li>thisArg (optionnel) : Une valeur \u00e0 utiliser comme <code>this</code> lors de l'ex\u00e9cution de la fonction de rappel.</li> </ul>"},{"location":"Array/every/#fonctionnement","title":"Fonctionnement :","text":"<ul> <li>La m\u00e9thode <code>every()</code> ex\u00e9cute la fonction de rappel une fois pour chaque \u00e9l\u00e9ment pr\u00e9sent dans le tableau, jusqu'\u00e0 ce qu'elle trouve un \u00e9l\u00e9ment pour lequel la fonction renvoie une valeur falsy (fausse).</li> <li>Si la fonction de rappel renvoie une valeur truthy (vraie) pour tous les \u00e9l\u00e9ments du tableau, <code>every()</code> renvoie <code>true</code>.</li> <li>Si la fonction de rappel renvoie <code>false</code> pour au moins un \u00e9l\u00e9ment du tableau, <code>every()</code> renvoie <code>false</code> et cesse d'ex\u00e9cuter la fonction pour les \u00e9l\u00e9ments restants.</li> <li><code>every()</code> ne modifie pas le tableau sur lequel il est appel\u00e9.</li> </ul>"},{"location":"Array/every/#exemples","title":"Exemples :","text":"<ol> <li> <p>V\u00e9rifier si Tous les \u00c9l\u00e9ments d'un Tableau sont des Nombres : <pre><code>let isNumber = (value) =&gt; typeof value === 'number';\nlet numbers = [1, 2, 3, 4, 5];\nlet allNumbers = numbers.every(isNumber); // Renvoie true\n</code></pre></p> </li> <li> <p>V\u00e9rifier si Tous les \u00c9l\u00e9ments d'un Tableau Satisfont \u00e0 une Condition : <pre><code>let belowThreshold = (value) =&gt; value &lt; 10;\nlet numbers = [1, 2, 3];\nlet allBelowThreshold = numbers.every(belowThreshold); // Renvoie true\n</code></pre></p> </li> <li> <p>V\u00e9rification sur un Tableau d'Objets : <pre><code>let people = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}];\nlet allAdults = people.every(person =&gt; person.age &gt;= 18); // Renvoie true\n</code></pre></p> </li> </ol>"},{"location":"Array/every/#points-importants","title":"Points Importants :","text":"<ul> <li><code>every()</code> est une excellente option pour tester une condition sur tous les \u00e9l\u00e9ments d'un tableau, surtout dans les cas o\u00f9 vous avez besoin d'une v\u00e9rification bool\u00e9enne.</li> <li>La m\u00e9thode retourne <code>true</code> pour tout tableau vide, quelle que soit la condition test\u00e9e, car il n'y a aucun \u00e9l\u00e9ment pour lequel la condition \u00e9choue.</li> <li><code>every()</code> cesse l'ex\u00e9cution d\u00e8s qu'une valeur falsy est retourn\u00e9e par la fonction de rappel, ce qui peut am\u00e9liorer l'efficacit\u00e9 pour les grands tableaux.</li> </ul>"},{"location":"Array/every/#1-verifier-si-tous-les-elements-repondent-a-une-condition-simple","title":"1. V\u00e9rifier si Tous les \u00c9l\u00e9ments R\u00e9pondent \u00e0 une Condition Simple :","text":"<ul> <li>V\u00e9rifier si tous les nombres d'un tableau sont positifs : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet allPositive = numbers.every(num =&gt; num &gt; 0);\n</code></pre></li> </ul>"},{"location":"Array/every/#2-utilisation-avec-des-tableaux-dobjets","title":"2. Utilisation avec des Tableaux d'Objets :","text":"<ul> <li>V\u00e9rifier si tous les objets d'un tableau ont une certaine propri\u00e9t\u00e9 : <pre><code>let people = [{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}];\nlet allHaveAge = people.every(person =&gt; person.age !== undefined);\n</code></pre></li> </ul>"},{"location":"Array/every/#3-verification-de-conditions-complexes","title":"3. V\u00e9rification de Conditions Complexes :","text":"<ul> <li>Tester des conditions plus complexes sur les \u00e9l\u00e9ments du tableau : <pre><code>let numbers = [3, 5, 7, 9];\nlet allOdd = numbers.every(num =&gt; num % 2 !== 0);\n</code></pre></li> </ul>"},{"location":"Array/every/#4-utilisation-avec-des-chaines-de-caracteres","title":"4. Utilisation avec des Cha\u00eenes de Caract\u00e8res :","text":"<ul> <li>V\u00e9rifier si tous les \u00e9l\u00e9ments d'un tableau de cha\u00eenes respectent un crit\u00e8re : <pre><code>let words = [\"apple\", \"banana\", \"cherry\"];\nlet allStartWithA = words.every(word =&gt; word.startsWith(\"a\"));\n</code></pre></li> </ul>"},{"location":"Array/every/#5-combiner-every-avec-dautres-methodes-de-tableau","title":"5. Combiner <code>every()</code> avec d'Autres M\u00e9thodes de Tableau :","text":"<ul> <li>Utiliser <code>every()</code> dans une cha\u00eene de m\u00e9thodes de traitement de tableau : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet allEvenAfterTransformation = numbers.map(num =&gt; num * 2).every(num =&gt; num % 2 === 0);\n</code></pre></li> </ul>"},{"location":"Array/every/#6-utilisation-de-every-pour-la-validation","title":"6. Utilisation de <code>every()</code> pour la Validation :","text":"<ul> <li>Valider les \u00e9l\u00e9ments d'un tableau pour s'assurer qu'ils respectent une r\u00e8gle de validation : <pre><code>let ages = [22, 18, 33, 17];\nlet allAdults = ages.every(age =&gt; age &gt;= 18);\n</code></pre></li> </ul>"},{"location":"Array/every/#7-utiliser-every-avec-des-indices-ou-le-tableau-complet","title":"7. Utiliser <code>every()</code> avec des Indices ou le Tableau Complet :","text":"<ul> <li>Acc\u00e9der \u00e0 l'indice ou au tableau complet dans la fonction de rappel : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet isOrdered = numbers.every((num, index, arr) =&gt; index === 0 || arr[index - 1] &lt;= num);\n</code></pre></li> </ul>"},{"location":"Array/every/#points-importants_1","title":"Points Importants :","text":"<ul> <li><code>every()</code> renvoie <code>true</code> si la fonction de rappel renvoie <code>true</code> pour chaque \u00e9l\u00e9ment du tableau.</li> <li>Elle renvoie <code>false</code> d\u00e8s qu'un \u00e9l\u00e9ment ne satisfait pas la condition.</li> <li>La m\u00e9thode est particuli\u00e8rement utile pour la validation et la v\u00e9rification des donn\u00e9es dans les tableaux.</li> <li><code>every()</code> renvoie <code>true</code> pour un tableau vide, quel que soit le test r\u00e9alis\u00e9, car techniquement, aucun \u00e9l\u00e9ment ne viole la condition.</li> </ul>"},{"location":"Array/filter/","title":"Filter","text":"<p>La fonction <code>filter()</code> en JavaScript est une m\u00e9thode de tableau qui permet de cr\u00e9er un nouveau tableau contenant seulement les \u00e9l\u00e9ments qui passent un test sp\u00e9cifi\u00e9 par une fonction. C'est un outil puissant pour filtrer des ensembles de donn\u00e9es selon des crit\u00e8res d\u00e9finis. Voici une description plus d\u00e9taill\u00e9e :</p>"},{"location":"Array/filter/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>let resultArray = array.filter(function(element, index, array) {\n    // condition de test\n}, thisArg);\n</code></pre> <ul> <li>array : Le tableau sur lequel la m\u00e9thode <code>filter()</code> est appel\u00e9e.</li> <li>function(element, index, array) : La fonction de rappel ex\u00e9cut\u00e9e sur chaque \u00e9l\u00e9ment du tableau.</li> <li>element : L'\u00e9l\u00e9ment courant du tableau en cours de traitement.</li> <li>index (optionnel) : L'indice de l'\u00e9l\u00e9ment courant dans le tableau.</li> <li>array (optionnel) : Le tableau sur lequel la m\u00e9thode <code>filter()</code> a \u00e9t\u00e9 appel\u00e9e.</li> <li>thisArg (optionnel) : Une valeur \u00e0 utiliser comme <code>this</code> lors de l'ex\u00e9cution de la fonction de rappel.</li> <li>resultArray : Le nouveau tableau cr\u00e9\u00e9, contenant tous les \u00e9l\u00e9ments pour lesquels la fonction de rappel a renvoy\u00e9 une valeur truthy (qui \u00e9value \u00e0 <code>true</code>).</li> </ul>"},{"location":"Array/filter/#fonctionnement-de-filter","title":"Fonctionnement de <code>filter()</code> :","text":"<ol> <li>It\u00e9ration sur le Tableau :</li> <li> <p><code>filter()</code> passe en revue chaque \u00e9l\u00e9ment du tableau.</p> </li> <li> <p>Application de la Fonction de Rappel :</p> </li> <li>\u00c0 chaque \u00e9l\u00e9ment, la fonction de rappel est appel\u00e9e.</li> <li> <p>Si la fonction de rappel renvoie une valeur truthy pour un \u00e9l\u00e9ment, cet \u00e9l\u00e9ment est ajout\u00e9 au nouveau tableau.</p> </li> <li> <p>Cr\u00e9ation d'un Nouveau Tableau :</p> </li> <li> <p>Les \u00e9l\u00e9ments qui passent le test (pour lesquels la fonction de rappel renvoie <code>true</code>) sont collect\u00e9s dans un nouveau tableau.</p> </li> <li> <p>Renvoi du Nouveau Tableau :</p> </li> <li>Apr\u00e8s avoir parcouru tous les \u00e9l\u00e9ments, <code>filter()</code> renvoie un nouveau tableau contenant les \u00e9l\u00e9ments filtr\u00e9s.</li> </ol>"},{"location":"Array/filter/#exemple-dutilisation","title":"Exemple d'Utilisation :","text":"<p>Filtrer un tableau pour conserver uniquement les nombres pairs :</p> <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet evenNumbers = numbers.filter(number =&gt; number % 2 === 0);\n// evenNumbers est maintenant [2, 4]\n</code></pre> <p>Dans cet exemple, <code>filter()</code> passe en revue chaque \u00e9l\u00e9ment du tableau <code>numbers</code>. La fonction de rappel teste si chaque nombre est pair. Si c'est le cas, ce nombre est inclus dans <code>evenNumbers</code>.</p>"},{"location":"Array/filter/#utilisations-courantes-de-filter","title":"Utilisations courantes de <code>filter()</code> :","text":"<ul> <li>Filtrer des donn\u00e9es en fonction de crit\u00e8res sp\u00e9cifiques.</li> <li>Cr\u00e9er des sous-ensembles d'un tableau sans modifier le tableau original.</li> <li>\u00catre cha\u00een\u00e9e avec d'autres m\u00e9thodes de tableau, comme <code>map()</code> ou <code>reduce()</code>, pour des transformations de donn\u00e9es complexes.</li> </ul> <p>En r\u00e9sum\u00e9, <code>filter()</code> est une m\u00e9thode tr\u00e8s pratique pour cr\u00e9er des tableaux d\u00e9riv\u00e9s en excluant les \u00e9l\u00e9ments qui ne r\u00e9pondent pas \u00e0 certains crit\u00e8res, tout en pr\u00e9servant l'immuabilit\u00e9 des donn\u00e9es d'origine.</p> <p>La m\u00e9thode <code>filter()</code> en JavaScript permet de cr\u00e9er un nouveau tableau contenant tous les \u00e9l\u00e9ments d'un tableau existant qui satisfont \u00e0 une condition d\u00e9finie par une fonction de rappel. L'argument <code>thisArg</code> dans <code>filter()</code> est une caract\u00e9ristique un peu plus avanc\u00e9e, qui permet de sp\u00e9cifier le contexte (<code>this</code>) dans lequel la fonction de rappel doit \u00eatre ex\u00e9cut\u00e9e.</p> <p>Voici comment <code>filter()</code> fonctionne avec l'utilisation de <code>thisArg</code> :</p> <p></p>"},{"location":"Array/filter/#utilisation-de-thisarg","title":"Utilisation de <code>thisArg</code>","text":"<p>La valeur <code>thisArg</code> est utilis\u00e9e pour d\u00e9finir ce que sera <code>this</code> dans la fonction de rappel. C'est utile lorsque vous avez besoin de faire r\u00e9f\u00e9rence \u00e0 un certain contexte (comme un objet) dans votre fonction de rappel.</p>"},{"location":"Array/filter/#exemple-sans-thisarg","title":"Exemple Sans <code>thisArg</code>","text":"<p><pre><code>let numbers = [1, 2, 3, 4, 5];\nlet oddNumbers = numbers.filter(function(number) {\n    return number % 2 !== 0;\n});\n</code></pre> Ici, <code>this</code> dans la fonction de rappel n'est pas d\u00e9fini ou se r\u00e9f\u00e8re \u00e0 l'objet global (<code>window</code> dans les navigateurs, <code>global</code> dans Node.js).</p>"},{"location":"Array/filter/#exemple-avec-thisarg","title":"Exemple Avec <code>thisArg</code>","text":"<p><pre><code>function isSmallerThanThreshold(number) {\n    return number &lt; this.threshold;\n}\n\nlet numbers = [1, 2, 3, 4, 5];\nlet thresholdObject = { threshold: 4 };\nlet smallerNumbers = numbers.filter(isSmallerThanThreshold, thresholdObject);\n</code></pre> Dans cet exemple, <code>isSmallerThanThreshold</code> utilise <code>this.threshold</code>. Lorsque nous appelons <code>filter()</code>, nous passons <code>thresholdObject</code> comme <code>thisArg</code>, donc dans <code>isSmallerThanThreshold</code>, <code>this</code> se r\u00e9f\u00e8re \u00e0 <code>thresholdObject</code>.</p>"},{"location":"Array/filter/#points-importants","title":"Points Importants","text":"<ul> <li><code>thisArg</code> est utile lorsque la fonction de rappel doit acc\u00e9der \u00e0 des propri\u00e9t\u00e9s ou m\u00e9thodes d'un objet sp\u00e9cifique.</li> <li>Si vous n'utilisez pas <code>thisArg</code>, <code>this</code> dans la fonction de rappel se r\u00e9f\u00e8re \u00e0 l'objet global par d\u00e9faut, ou est <code>undefined</code> en mode strict (<code>'use strict'</code>).</li> <li>Les fonctions fl\u00e9ch\u00e9es n'ont pas leur propre <code>this</code>, donc <code>thisArg</code> est moins utile avec elles. Dans les fonctions fl\u00e9ch\u00e9es, <code>this</code> est h\u00e9rit\u00e9 du contexte englobant.</li> </ul> <p>En r\u00e9sum\u00e9, <code>filter()</code> avec <code>thisArg</code> vous permet de contr\u00f4ler le contexte dans lequel la fonction de rappel est ex\u00e9cut\u00e9e, ce qui peut \u00eatre tr\u00e8s utile dans certaines situations, en particulier lors de l'utilisation de fonctions qui ne sont pas des fonctions fl\u00e9ch\u00e9es et qui ont besoin d'acc\u00e9der \u00e0 un <code>this</code> sp\u00e9cifique.</p> <p>L'utilisation de l'argument <code>thisArg</code> avec la m\u00e9thode <code>filter()</code> en JavaScript permet de d\u00e9finir le contexte (<code>this</code>) dans lequel la fonction de rappel est ex\u00e9cut\u00e9e. Voici diff\u00e9rents exemples illustrant l'utilisation de <code>thisArg</code> avec <code>filter()</code> :</p>"},{"location":"Array/filter/#exemple-1-filtrage-base-sur-une-propriete-dobjet","title":"Exemple 1: Filtrage Bas\u00e9 sur une Propri\u00e9t\u00e9 d'Objet","text":"<p>Imaginons que nous ayons un objet repr\u00e9sentant un filtre et un tableau de nombres. Nous voulons filtrer ce tableau en fonction d'une propri\u00e9t\u00e9 de l'objet.</p> <pre><code>function isGreater(element) {\n    return element &gt; this.threshold;\n}\n\nconst numberSet = {\n    threshold: 3,\n    numbers: [1, 2, 3, 4, 5]\n};\n\nconst filteredNumbers = numberSet.numbers.filter(isGreater, numberSet);\nconsole.log(filteredNumbers); // [4, 5]\n</code></pre> <p>Dans cet exemple, <code>isGreater</code> utilise <code>this.threshold</code> pour filtrer les nombres. <code>numberSet</code> est pass\u00e9 comme <code>thisArg</code>, donc <code>this</code> dans <code>isGreater</code> fait r\u00e9f\u00e9rence \u00e0 <code>numberSet</code>.</p>"},{"location":"Array/filter/#exemple-2-filtrage-en-utilisant-les-methodes-de-lobjet","title":"Exemple 2: Filtrage en Utilisant les M\u00e9thodes de l'Objet","text":"<p>Supposons que nous ayons un objet avec une m\u00e9thode de filtrage et un tableau de cha\u00eenes. Nous utilisons la m\u00e9thode de l'objet pour filtrer le tableau.</p> <pre><code>const stringFilter = {\n    accepted: ['apple', 'banana'],\n    filterString: function(str) {\n        return this.accepted.includes(str);\n    }\n};\n\nconst fruits = ['apple', 'orange', 'banana', 'grape'];\nconst acceptedFruits = fruits.filter(stringFilter.filterString, stringFilter);\nconsole.log(acceptedFruits); // ['apple', 'banana']\n</code></pre> <p>Ici, <code>filterString</code> v\u00e9rifie si une cha\u00eene fait partie des \u00e9l\u00e9ments accept\u00e9s d\u00e9finis dans <code>stringFilter</code>. <code>stringFilter</code> est pass\u00e9 en tant que <code>thisArg</code> \u00e0 <code>filter()</code>.</p>"},{"location":"Array/filter/#exemple-3-utilisation-avec-des-methodes-de-classe","title":"Exemple 3: Utilisation avec des M\u00e9thodes de Classe","text":"<p>Si vous travaillez avec des classes en JavaScript, vous pouvez \u00e9galement utiliser <code>thisArg</code> pour passer une instance de classe \u00e0 la fonction de rappel.</p> <pre><code>class NumberChecker {\n    constructor(limit) {\n        this.limit = limit;\n    }\n\n    checkNumber(number) {\n        return number &lt; this.limit;\n    }\n}\n\nconst checker = new NumberChecker(10);\nconst numbers = [5, 15, 8, 20];\nconst numbersBelowLimit = numbers.filter(checker.checkNumber, checker);\nconsole.log(numbersBelowLimit); // [5, 8]\n</code></pre> <p>Dans cet exemple, <code>checkNumber</code> est une m\u00e9thode de l'instance <code>checker</code> de <code>NumberChecker</code>. En passant <code>checker</code> en tant que <code>thisArg</code>, <code>this.limit</code> dans <code>checkNumber</code> se r\u00e9f\u00e8re \u00e0 la propri\u00e9t\u00e9 <code>limit</code> de l'instance <code>checker</code>.</p> <p>Ces exemples montrent comment <code>thisArg</code> peut \u00eatre utilis\u00e9 avec <code>filter()</code> pour contr\u00f4ler le contexte de la fonction de rappel, rendant ainsi le filtrage flexible et adapt\u00e9 \u00e0 divers sc\u00e9narios.</p> <p></p> <p></p> <p>La m\u00e9thode <code>filter()</code> en JavaScript est utilis\u00e9e pour cr\u00e9er un nouveau tableau contenant tous les \u00e9l\u00e9ments d'un tableau existant qui passent un test sp\u00e9cifi\u00e9 par une fonction fournie. Voici quelques-unes des utilisations courantes de <code>filter()</code> :</p> <ol> <li>Filtrer par Condition :</li> <li>S\u00e9lectionner des \u00e9l\u00e9ments qui r\u00e9pondent \u00e0 une condition sp\u00e9cifique.</li> <li> <p>Exemple : Filtrer un tableau de nombres pour ne conserver que les nombres pairs.      <pre><code>let nums = [1, 2, 3, 4, 5];\nlet evenNums = nums.filter(num =&gt; num % 2 === 0);\n</code></pre></p> </li> <li> <p>Recherche dans un Tableau d'Objets :</p> </li> <li>Filtrer un tableau d'objets en fonction des propri\u00e9t\u00e9s de ces objets.</li> <li> <p>Exemple : S\u00e9lectionner des utilisateurs ayant un \u00e2ge sp\u00e9cifique dans un tableau d'objets utilisateur.      <pre><code>let users = [{name: \"Alice\", age: 25}, {name: \"Bob\", age: 30}];\nlet youngUsers = users.filter(user =&gt; user.age &lt; 30);\n</code></pre></p> </li> <li> <p>\u00c9liminer les Doublons :</p> </li> <li>Utiliser <code>filter()</code> pour \u00e9liminer les doublons d'un tableau.</li> <li> <p>Exemple : Enlever les valeurs en double dans un tableau.      <pre><code>let numbers = [1, 2, 2, 3, 4, 4, 5];\nlet uniqueNumbers = numbers.filter((value, index, array) =&gt; array.indexOf(value) === index);\n</code></pre></p> </li> <li> <p>Supprimer des \u00c9l\u00e9ments Sp\u00e9cifiques :</p> </li> <li>Supprimer des \u00e9l\u00e9ments qui ne sont pas d\u00e9sir\u00e9s dans un tableau.</li> <li> <p>Exemple : Enlever les valeurs <code>null</code> ou <code>undefined</code> d'un tableau.      <pre><code>let mix = [1, null, 2, undefined, 3];\nlet cleaned = mix.filter(val =&gt; val != null);\n</code></pre></p> </li> <li> <p>Cha\u00eenage avec d'Autres M\u00e9thodes de Tableau :</p> </li> <li>Combiner <code>filter()</code> avec d'autres m\u00e9thodes telles que <code>map()</code> ou <code>reduce()</code> pour r\u00e9aliser des op\u00e9rations complexes en une seule cha\u00eene.</li> <li> <p>Exemple : Filtrer un tableau puis mapper les r\u00e9sultats.      <pre><code>let nums = [1, 2, 3, 4, 5];\nlet doubledEvenNums = nums.filter(num =&gt; num % 2 === 0).map(num =&gt; num * 2);\n</code></pre></p> </li> <li> <p>S\u00e9lection Bas\u00e9e sur un Sous-ensemble d'un Autre Tableau :</p> </li> <li>Filtrer des \u00e9l\u00e9ments bas\u00e9s sur leur pr\u00e9sence ou leur absence dans un autre tableau.</li> <li> <p>Exemple : S\u00e9lectionner des \u00e9l\u00e9ments qui sont pr\u00e9sents dans un autre tableau.      <pre><code>let nums1 = [1, 2, 3];\nlet nums2 = [2, 3, 4];\nlet common = nums1.filter(num =&gt; nums2.includes(num));\n</code></pre></p> </li> <li> <p>Filtrage Avanc\u00e9 :</p> </li> <li>Appliquer des crit\u00e8res de filtrage plus complexes, comme des conditions multiples.</li> <li>Exemple : Filtrer un tableau en fonction de plusieurs conditions.      <pre><code>let products = [{name: \"apple\", type: \"fruit\", quantity: 10}, {name: \"carrot\", type: \"vegetable\", quantity: 5}];\nlet fruits = products.filter(product =&gt; product.type === \"fruit\" &amp;&amp; product.quantity &gt; 5);\n</code></pre></li> </ol> <p><code>filter()</code> est une m\u00e9thode tr\u00e8s utile pour traiter et manipuler des tableaux en JavaScript, en permettant de cr\u00e9er facilement des sous-ensembles bas\u00e9s sur des conditions vari\u00e9es.</p>"},{"location":"Array/find/","title":"Find","text":"<p>La fonction <code>find()</code> en JavaScript est une m\u00e9thode de l'objet <code>Array</code> qui permet de trouver le premier \u00e9l\u00e9ment d'un tableau qui satisfait \u00e0 une condition d\u00e9finie dans une fonction de rappel. C'est une m\u00e9thode tr\u00e8s utile pour chercher des \u00e9l\u00e9ments dans un tableau lorsque ces \u00e9l\u00e9ments sont des objets ou des structures complexes.</p>"},{"location":"Array/find/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>array.find(callback(element[, index[, array]])[, thisArg])\n</code></pre> <ul> <li>callback : Une fonction qui est appel\u00e9e pour chaque \u00e9l\u00e9ment du tableau, jusqu'\u00e0 ce qu'elle renvoie <code>true</code>. Cette fonction peut prendre jusqu'\u00e0 trois arguments :</li> <li>element : L'\u00e9l\u00e9ment actuel du tableau en cours de traitement.</li> <li>index (optionnel) : L'indice de l'\u00e9l\u00e9ment actuel.</li> <li>array (optionnel) : Le tableau sur lequel <code>find()</code> a \u00e9t\u00e9 appel\u00e9.</li> <li>thisArg (optionnel) : Une valeur \u00e0 utiliser comme <code>this</code> lors de l'ex\u00e9cution de la fonction de rappel.</li> </ul>"},{"location":"Array/find/#fonctionnement","title":"Fonctionnement :","text":"<ul> <li>La m\u00e9thode <code>find()</code> parcourt le tableau et ex\u00e9cute la fonction de rappel sur chaque \u00e9l\u00e9ment.</li> <li>Si la fonction de rappel renvoie <code>true</code> pour un \u00e9l\u00e9ment, <code>find()</code> renvoie imm\u00e9diatement cet \u00e9l\u00e9ment et arr\u00eate la recherche.</li> <li>Si aucun \u00e9l\u00e9ment ne satisfait \u00e0 la condition, <code>find()</code> renvoie <code>undefined</code>.</li> </ul>"},{"location":"Array/find/#exemples","title":"Exemples :","text":"<ol> <li> <p>Trouver un \u00c9l\u00e9ment dans un Tableau de Nombres : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet found = numbers.find(num =&gt; num &gt; 3); // Trouve le premier nombre sup\u00e9rieur \u00e0 3\n// found = 4\n</code></pre></p> </li> <li> <p>Trouver un Objet dans un Tableau d'Objets : <pre><code>let users = [{name: \"Alice\", age: 30}, {name: \"Bob\", age: 25}];\nlet user = users.find(user =&gt; user.name === \"Bob\");\n// user = {name: \"Bob\", age: 25}\n</code></pre></p> </li> <li> <p>Utilisation avec des Indices ou le Tableau Complet : <pre><code>let users = [{name: \"Alice\", age: 30}, {name: \"Bob\", age: 25}];\nlet user = users.find((user, index, arr) =&gt; user.age &lt; 30 &amp;&amp; arr.length &gt; 1);\n// user = {name: \"Bob\", age: 25}\n</code></pre></p> </li> </ol>"},{"location":"Array/find/#points-importants","title":"Points Importants :","text":"<ul> <li><code>find()</code> est particuli\u00e8rement utile pour les tableaux d'objets ou pour trouver un \u00e9l\u00e9ment selon des crit\u00e8res sp\u00e9cifiques.</li> <li>Elle ne modifie pas le tableau sur lequel elle est appel\u00e9e.</li> <li>Contrairement \u00e0 des m\u00e9thodes comme <code>filter()</code>, <code>find()</code> renvoie le premier \u00e9l\u00e9ment qui satisfait \u00e0 la condition, plut\u00f4t qu'un tableau d'\u00e9l\u00e9ments.</li> <li>Si la condition n'est remplie par aucun \u00e9l\u00e9ment, <code>find()</code> renvoie <code>undefined</code>.</li> </ul> <p>La m\u00e9thode <code>find()</code> en JavaScript est utilis\u00e9e pour chercher le premier \u00e9l\u00e9ment d'un tableau qui satisfait une condition d\u00e9finie par une fonction de rappel. Voici plusieurs utilisations courantes de <code>find()</code> :</p>"},{"location":"Array/find/#1-trouver-un-element-base-sur-une-condition-simple","title":"1. Trouver un \u00c9l\u00e9ment Bas\u00e9 sur une Condition Simple :","text":"<ul> <li>Rechercher un nombre sp\u00e9cifique dans un tableau de nombres : <pre><code>let numbers = [3, 6, 9, 12, 15];\nlet found = numbers.find(num =&gt; num &gt; 10); // Trouve 12, le premier nombre sup\u00e9rieur \u00e0 10\n</code></pre></li> </ul>"},{"location":"Array/find/#2-recherche-dans-un-tableau-dobjets","title":"2. Recherche dans un Tableau d'Objets :","text":"<ul> <li>Trouver un objet qui correspond \u00e0 des crit\u00e8res sp\u00e9cifiques : <pre><code>let users = [\n  { name: 'Alice', age: 25 },\n  { name: 'Bob', age: 30 },\n  { name: 'Carol', age: 22 }\n];\nlet user = users.find(user =&gt; user.name === 'Bob'); // Trouve l'objet utilisateur pour Bob\n</code></pre></li> </ul>"},{"location":"Array/find/#3-utilisation-avec-des-indices-et-le-tableau-complet","title":"3. Utilisation avec des Indices et le Tableau Complet :","text":"<ul> <li>Utiliser l'indice ou le tableau complet dans la condition de recherche : <pre><code>let users = ['Alice', 'Bob', 'Carol'];\nlet found = users.find((user, index) =&gt; user.startsWith('C') &amp;&amp; index &gt; 1); // Trouve 'Carol'\n</code></pre></li> </ul>"},{"location":"Array/find/#4-trouver-un-element-dans-un-tableau-de-chaines-de-caracteres","title":"4. Trouver un \u00c9l\u00e9ment dans un Tableau de Cha\u00eenes de Caract\u00e8res :","text":"<ul> <li>Rechercher une cha\u00eene de caract\u00e8res qui remplit une condition : <pre><code>let colors = ['red', 'blue', 'green', 'yellow'];\nlet color = colors.find(color =&gt; color.startsWith('g')); // Trouve 'green'\n</code></pre></li> </ul>"},{"location":"Array/find/#5-utilisation-pour-la-validation","title":"5. Utilisation pour la Validation :","text":"<ul> <li>Valider des \u00e9l\u00e9ments d'un tableau pour v\u00e9rifier une condition : <pre><code>let numbers = [2, 4, 6, 8, 10];\nlet invalidNumber = numbers.find(num =&gt; num % 2 !== 0); // undefined, car tous les nombres sont pairs\n</code></pre></li> </ul>"},{"location":"Array/find/#6-recherche-avec-des-conditions-composees","title":"6. Recherche avec des Conditions Compos\u00e9es :","text":"<ul> <li>Combiner plusieurs conditions pour trouver un \u00e9l\u00e9ment : <pre><code>let products = [\n  { name: 'Phone', price: 700 },\n  { name: 'Laptop', price: 1500 },\n  { name: 'Tablet', price: 800 }\n];\nlet expensiveProduct = products.find(product =&gt; product.price &gt; 1000); // Trouve le 'Laptop'\n</code></pre></li> </ul>"},{"location":"Array/find/#points-importants_1","title":"Points Importants :","text":"<ul> <li><code>find()</code> renvoie le premier \u00e9l\u00e9ment qui satisfait \u00e0 la condition de la fonction de rappel.</li> <li>Si aucun \u00e9l\u00e9ment ne satisfait \u00e0 la condition, <code>find()</code> renvoie <code>undefined</code>.</li> <li>La fonction de rappel peut prendre trois arguments : l'\u00e9l\u00e9ment en cours, son indice et le tableau.</li> <li><code>find()</code> est particuli\u00e8rement utile pour les tableaux d'objets ou les situations o\u00f9 il faut trouver un \u00e9l\u00e9ment unique r\u00e9pondant \u00e0 des crit\u00e8res sp\u00e9cifiques.</li> </ul>"},{"location":"Array/from/","title":"From","text":"<p>La fonction <code>from()</code> en JavaScript est une m\u00e9thode statique de l'objet <code>Array</code>. Elle est con\u00e7ue pour cr\u00e9er de nouveaux tableaux \u00e0 partir d'objets it\u00e9rables ou de tableaux-like (objets ressemblant \u00e0 des tableaux). Cette m\u00e9thode est particuli\u00e8rement utile pour transformer des structures de donn\u00e9es qui ne sont pas des tableaux en tableaux, afin de pouvoir utiliser les m\u00e9thodes et les fonctionnalit\u00e9s des tableaux sur ces structures.</p>"},{"location":"Array/from/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>Array.from(source[, mapFn[, thisArg]])\n</code></pre> <ul> <li>source : L'objet it\u00e9rable ou tableau-like \u00e0 convertir en tableau. Cela peut \u00eatre n'importe quel objet sur lequel on peut it\u00e9rer, comme une cha\u00eene de caract\u00e8res, un Node List, ou m\u00eame un objet avec une propri\u00e9t\u00e9 <code>length</code> et des \u00e9l\u00e9ments index\u00e9s.</li> <li>mapFn (optionnel) : Une fonction de mappage \u00e0 appeler sur chaque \u00e9l\u00e9ment de l'objet source. Cette fonction est appliqu\u00e9e avant que l'\u00e9l\u00e9ment ne soit ajout\u00e9 au nouveau tableau.</li> <li>thisArg (optionnel) : La valeur \u00e0 utiliser comme <code>this</code> lors de l'ex\u00e9cution de <code>mapFn</code>.</li> </ul>"},{"location":"Array/from/#fonctionnement","title":"Fonctionnement :","text":"<ul> <li><code>Array.from()</code> cr\u00e9e un nouveau tableau \u00e0 partir de l'objet source.</li> <li>Si <code>mapFn</code> est fourni, elle est appel\u00e9e sur chaque \u00e9l\u00e9ment de l'objet source, et le r\u00e9sultat de cette fonction est utilis\u00e9 pour construire le nouveau tableau.</li> <li>Si <code>mapFn</code> n'est pas fourni, le nouveau tableau est une copie directe des \u00e9l\u00e9ments de l'objet source.</li> </ul>"},{"location":"Array/from/#exemples","title":"Exemples :","text":"<ol> <li> <p>Cr\u00e9er un Tableau \u00e0 partir d'une Cha\u00eene de Caract\u00e8res : <pre><code>let str = \"Hello\";\nlet charsArray = Array.from(str);\n// charsArray = ['H', 'e', 'l', 'l', 'o']\n</code></pre></p> </li> <li> <p>Utiliser <code>Array.from()</code> avec une Fonction de Mappage : <pre><code>let numbers = [1, 2, 3];\nlet doubled = Array.from(numbers, num =&gt; num * 2);\n// doubled = [2, 4, 6]\n</code></pre></p> </li> <li> <p>Convertir un Node List en Tableau : <pre><code>// Supposons que vous avez plusieurs \u00e9l\u00e9ments div dans votre document HTML\nlet divs = document.querySelectorAll('div');\nlet divsArray = Array.from(divs);\n</code></pre></p> </li> <li> <p>Utiliser <code>Array.from()</code> pour G\u00e9n\u00e9rer des S\u00e9quences : <pre><code>let range = Array.from({ length: 5 }, (v, i) =&gt; i);\n// range = [0, 1, 2, 3, 4]\n</code></pre></p> </li> </ol>"},{"location":"Array/from/#points-importants","title":"Points Importants :","text":"<ul> <li><code>Array.from()</code> est particuli\u00e8rement utile pour travailler avec des objets qui ressemblent \u00e0 des tableaux (comme les Node Lists dans le DOM) ou des objets it\u00e9rables (comme les cha\u00eenes de caract\u00e8res) en les convertissant en tableaux.</li> <li>Elle permet l'utilisation de fonctions de mappage pendant la conversion, offrant ainsi une grande flexibilit\u00e9 pour transformer les \u00e9l\u00e9ments du nouvel tableau.</li> <li><code>Array.from()</code> renvoie toujours un nouveau tableau sans modifier l'objet source.</li> </ul> <p>La m\u00e9thode <code>Array.from()</code> en JavaScript cr\u00e9e une nouvelle instance de tableau (un \"clone superficiel\") \u00e0 partir d'un objet it\u00e9rable ou tableau-like. Cependant, il est important de noter que cette m\u00e9thode effectue une copie superficielle (shallow copy) et non une copie profonde (deep copy).</p>"},{"location":"Array/from/#copie-superficielle-shallow-copy","title":"Copie Superficielle (Shallow Copy) :","text":"<ul> <li>Si l'objet source contient des objets ou des tableaux imbriqu\u00e9s, <code>Array.from()</code> copie leurs r\u00e9f\u00e9rences dans le nouveau tableau. Cela signifie que les objets ou tableaux imbriqu\u00e9s ne sont pas clon\u00e9s. Si vous modifiez l'un de ces objets ou tableaux imbriqu\u00e9s dans le tableau original, le changement sera \u00e9galement visible dans le nouveau tableau, car les deux tableaux r\u00e9f\u00e9rencent le m\u00eame objet/tableau imbriqu\u00e9.</li> </ul>"},{"location":"Array/from/#exemple-illustratif","title":"Exemple Illustratif :","text":"<pre><code>let original = [{a: 1}, {b: 2}];\nlet newArray = Array.from(original);\n\n// Modifier un objet dans le tableau original affecte aussi le nouveau tableau\noriginal[0].a = 3;\nconsole.log(newArray[0].a); // Affichera 3, car newArray[0] fait r\u00e9f\u00e9rence au m\u00eame objet que original[0]\n</code></pre> <p>Dans cet exemple, bien que <code>newArray</code> soit un nouveau tableau, les \u00e9l\u00e9ments \u00e0 l'int\u00e9rieur de <code>newArray</code> sont des r\u00e9f\u00e9rences aux m\u00eames objets que ceux dans <code>original</code>. Ainsi, les modifications apport\u00e9es aux objets dans <code>original</code> se refl\u00e8tent \u00e9galement dans <code>newArray</code>.</p>"},{"location":"Array/from/#conclusion","title":"Conclusion :","text":"<ul> <li><code>Array.from()</code> est utile pour cr\u00e9er un nouveau tableau \u00e0 partir d'une source it\u00e9rable ou tableau-like, mais il ne cr\u00e9e pas de copies profondes des objets ou tableaux imbriqu\u00e9s.</li> <li>Pour les tableaux contenant uniquement des valeurs primitives (comme des nombres, des cha\u00eenes de caract\u00e8res ou des bool\u00e9ens), les valeurs sont copi\u00e9es et non les r\u00e9f\u00e9rences, donc les modifications dans un tableau n'affectent pas l'autre.</li> <li>Pour les objets ou tableaux imbriqu\u00e9s, seules les r\u00e9f\u00e9rences sont copi\u00e9es, pas les objets/tableaux eux-m\u00eames.</li> </ul> <p>Pour effectuer une copie profonde (deep copy) d'un tableau en JavaScript, il est n\u00e9cessaire de s'assurer que tous les \u00e9l\u00e9ments du tableau, y compris les objets et tableaux imbriqu\u00e9s, sont \u00e9galement clon\u00e9s. Voici quelques m\u00e9thodes courantes pour r\u00e9aliser une copie profonde :</p>"},{"location":"Array/from/#1-utilisation-de-jsonparse-et-jsonstringify","title":"1. Utilisation de <code>JSON.parse()</code> et <code>JSON.stringify()</code>","text":"<p>C'est une technique simple et largement utilis\u00e9e pour les objets qui peuvent \u00eatre s\u00e9rialis\u00e9s en JSON et d\u00e9s\u00e9rialis\u00e9s sans perdre d'informations.</p> <pre><code>let original = [{ a: 1 }, { b: 2 }];\nlet deepCopy = JSON.parse(JSON.stringify(original));\n\n// Les modifications sur deepCopy ne vont pas affecter original\ndeepCopy[0].a = 3;\nconsole.log(original[0].a); // Affiche 1\n</code></pre> <p>Limitations : - Ne fonctionne pas avec des valeurs non s\u00e9rialisables en JSON, comme les fonctions, les objets contenant des r\u00e9f\u00e9rences circulaires, les <code>Map</code>, <code>Set</code>, <code>Date</code>, <code>RegExp</code>, etc. - Peut \u00eatre inefficace en termes de performances pour de tr\u00e8s grands objets.</p>"},{"location":"Array/from/#2-utilisation-de-bibliotheques-externes","title":"2. Utilisation de Biblioth\u00e8ques Externes","text":"<p>Des biblioth\u00e8ques comme Lodash offrent une fonction <code>cloneDeep()</code> qui peut g\u00e9rer une grande vari\u00e9t\u00e9 de cas, y compris des types de donn\u00e9es non s\u00e9rialisables en JSON.</p> <pre><code>// Avec Lodash\nlet deepCopy = _.cloneDeep(original);\n</code></pre> <p>Avantages : - Plus robuste et capable de g\u00e9rer une large gamme de types de donn\u00e9es. - G\u00e8re les r\u00e9f\u00e9rences circulaires et les types sp\u00e9ciaux comme <code>Date</code>, <code>RegExp</code>, etc.</p>"},{"location":"Array/from/#3-ecriture-dune-fonction-de-copie-profonde-personnalisee","title":"3. \u00c9criture d'une Fonction de Copie Profonde Personnalis\u00e9e","text":"<p>Pour des cas sp\u00e9cifiques ou pour \u00e9viter d'ajouter des d\u00e9pendances externes, vous pouvez \u00e9crire votre propre fonction de copie profonde.</p> <pre><code>function deepCopy(obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return obj;\n    }\n\n    let copy = Array.isArray(obj) ? [] : {};\n\n    for (let key in obj) {\n        let value = obj[key];\n        copy[key] = deepCopy(value);\n    }\n\n    return copy;\n}\n\nlet copiedArray = deepCopy(original);\n</code></pre> <p>Avantages : - Personnalisable selon les besoins sp\u00e9cifiques du projet. - Pas de d\u00e9pendance \u00e0 des biblioth\u00e8ques externes.</p>"},{"location":"Array/from/#choisir-la-methode-appropriee","title":"Choisir la M\u00e9thode Appropri\u00e9e","text":"<p>La m\u00e9thode \u00e0 choisir d\u00e9pend des exigences sp\u00e9cifiques de votre cas d'utilisation, notamment : - Le type de donn\u00e9es que contient votre tableau. - Les pr\u00e9occupations de performances. - La complexit\u00e9 des objets contenus dans le tableau.</p> <p>Pour des objets simples qui sont compatibles JSON, la combinaison <code>JSON.parse()</code> / <code>JSON.stringify()</code> est souvent la plus simple. Pour des structures de donn\u00e9es plus complexes, une biblioth\u00e8que externe comme Lodash ou une fonction personnalis\u00e9e serait plus appropri\u00e9e.</p> <p></p> <p></p> <p>Dans la biblioth\u00e8que Lodash, pour r\u00e9aliser une copie profonde (deep copy) d'un objet ou d'un tableau, vous pouvez utiliser la fonction <code>_.cloneDeep()</code>. Cette m\u00e9thode est con\u00e7ue sp\u00e9cifiquement pour cr\u00e9er une copie int\u00e9grale et ind\u00e9pendante de chaque niveau de l'objet ou du tableau, y compris les objets et tableaux imbriqu\u00e9s.</p>"},{"location":"Array/from/#exemple-dutilisation-de-_clonedeep","title":"Exemple d'utilisation de <code>_.cloneDeep()</code> :","text":"<pre><code>// Avec Lodash\nlet originalObject = {\n    name: \"Alice\",\n    age: 25,\n    address: {\n        street: \"123 Main St\",\n        city: \"Anytown\"\n    }\n};\n\nlet deepCopiedObject = _.cloneDeep(originalObject);\n\n// Modifier deepCopiedObject ne va pas affecter originalObject\ndeepCopiedObject.address.street = \"456 Elm St\";\nconsole.log(originalObject.address.street); // \"123 Main St\"\n</code></pre> <p>Dans cet exemple, <code>_.cloneDeep()</code> cr\u00e9e une copie de <code>originalObject</code>, y compris une copie s\u00e9par\u00e9e de l'objet <code>address</code> imbriqu\u00e9. Les modifications apport\u00e9es \u00e0 <code>deepCopiedObject</code> n'affectent pas <code>originalObject</code>, ce qui indique que la copie est profonde.</p>"},{"location":"Array/from/#avantages-de-_clonedeep","title":"Avantages de <code>_.cloneDeep()</code> :","text":"<ol> <li>Copie Compl\u00e8te : Il s'agit d'une v\u00e9ritable copie profonde, ce qui signifie que tous les niveaux d'imbrication sont copi\u00e9s, et les modifications sur les copies n'affectent pas les originaux.</li> <li>Gestion des Types Complexes : <code>_.cloneDeep()</code> est capable de g\u00e9rer divers types de donn\u00e9es, y compris des objets, des tableaux, des dates, des expressions r\u00e9guli\u00e8res, et d'autres types de donn\u00e9es sp\u00e9ciaux qui ne sont pas bien g\u00e9r\u00e9s par des m\u00e9thodes plus simples comme <code>JSON.parse(JSON.stringify())</code>.</li> <li>Gestion des R\u00e9f\u00e9rences Circulaires : Elle peut g\u00e9rer correctement les r\u00e9f\u00e9rences circulaires sans causer d'erreurs.</li> </ol>"},{"location":"Array/from/#a-prendre-en-compte","title":"\u00c0 Prendre en Compte :","text":"<ul> <li>Performances : Pour de tr\u00e8s grands objets ou tableaux, ou pour des structures avec de nombreux niveaux d'imbrication, la copie profonde peut \u00eatre co\u00fbteuse en termes de performances.</li> <li>Compatibilit\u00e9 : Alors que <code>_.cloneDeep()</code> est tr\u00e8s polyvalente, il est toujours bon de tester et de valider son comportement avec vos structures de donn\u00e9es sp\u00e9cifiques, surtout si elles contiennent des types de donn\u00e9es non standard.</li> </ul>"},{"location":"Array/indexOf/","title":"indexOf","text":"<p>La fonction <code>indexOf()</code> en JavaScript est une m\u00e9thode de l'objet <code>Array</code> et <code>String</code>, utilis\u00e9e pour rechercher la position d'un \u00e9l\u00e9ment ou d'un sous-ensemble de caract\u00e8res dans un tableau ou une cha\u00eene de caract\u00e8res respectivement. Voici une description plus d\u00e9taill\u00e9e pour chaque cas :</p>"},{"location":"Array/indexOf/#utilisation-avec-les-tableaux","title":"Utilisation avec les Tableaux","text":""},{"location":"Array/indexOf/#syntaxe","title":"Syntaxe","text":"<pre><code>array.indexOf(element, fromIndex)\n</code></pre> <ul> <li>element : L'\u00e9l\u00e9ment \u00e0 rechercher dans le tableau.</li> <li>fromIndex (optionnel) : L'indice \u00e0 partir duquel commencer la recherche. Si omis, la recherche commence \u00e0 l'indice 0. Si l'indice est \u00e9gal ou sup\u00e9rieur \u00e0 la longueur du tableau, <code>-1</code> est renvoy\u00e9, ce qui signifie que le tableau ne sera pas recherch\u00e9.</li> </ul>"},{"location":"Array/indexOf/#fonctionnement","title":"Fonctionnement","text":"<ul> <li><code>indexOf()</code> parcourt le tableau en commen\u00e7ant par l'indice sp\u00e9cifi\u00e9 (ou 0 si aucun indice n'est sp\u00e9cifi\u00e9) et renvoie l'indice de la premi\u00e8re occurrence de l'\u00e9l\u00e9ment sp\u00e9cifi\u00e9.</li> <li>Si l'\u00e9l\u00e9ment n'est pas trouv\u00e9, <code>-1</code> est renvoy\u00e9.</li> <li>La comparaison est stricte (<code>===</code>), ce qui signifie que les types sont \u00e9galement compar\u00e9s.</li> </ul>"},{"location":"Array/indexOf/#exemple","title":"Exemple","text":"<pre><code>let fruits = [\"apple\", \"banana\", \"cherry\"];\nlet index = fruits.indexOf(\"banana\"); // Renvoie 1\n</code></pre>"},{"location":"Array/indexOf/#utilisation-avec-les-chaines-de-caracteres","title":"Utilisation avec les Cha\u00eenes de Caract\u00e8res","text":""},{"location":"Array/indexOf/#syntaxe_1","title":"Syntaxe","text":"<pre><code>string.indexOf(substring, fromIndex)\n</code></pre> <ul> <li>substring : La sous-cha\u00eene de caract\u00e8res \u00e0 rechercher dans la cha\u00eene principale.</li> <li>fromIndex (optionnel) : L'indice \u00e0 partir duquel commencer la recherche dans la cha\u00eene. Si omis, la recherche commence \u00e0 l'indice 0.</li> </ul>"},{"location":"Array/indexOf/#fonctionnement_1","title":"Fonctionnement","text":"<ul> <li><code>indexOf()</code> recherche la sous-cha\u00eene dans la cha\u00eene principale et renvoie l'indice de la premi\u00e8re occurrence de cette sous-cha\u00eene.</li> <li>Si la sous-cha\u00eene n'est pas trouv\u00e9e, <code>-1</code> est renvoy\u00e9.</li> </ul>"},{"location":"Array/indexOf/#exemple_1","title":"Exemple","text":"<pre><code>let text = \"Hello, world!\";\nlet index = text.indexOf(\"world\"); // Renvoie 7\n</code></pre>"},{"location":"Array/indexOf/#points-importants","title":"Points Importants","text":"<ul> <li>La m\u00e9thode <code>indexOf()</code> est sensible \u00e0 la casse lorsqu'elle est utilis\u00e9e avec des cha\u00eenes de caract\u00e8res.</li> <li>Elle est utile pour v\u00e9rifier si un \u00e9l\u00e9ment ou une sous-cha\u00eene est pr\u00e9sent dans un tableau ou une cha\u00eene, et pour obtenir sa position.</li> <li>Si vous avez besoin de rechercher un \u00e9l\u00e9ment \u00e0 partir de la fin d'un tableau, utilisez <code>lastIndexOf()</code>.</li> <li>Pour les tableaux, si vous devez v\u00e9rifier l'existence d'un \u00e9l\u00e9ment, la m\u00e9thode <code>includes()</code> (introduite dans ES2016) peut \u00eatre plus appropri\u00e9e.</li> </ul> <p>La m\u00e9thode <code>indexOf()</code> en JavaScript est utilis\u00e9e pour rechercher la position d'un \u00e9l\u00e9ment sp\u00e9cifique dans un tableau ou une sous-cha\u00eene dans une cha\u00eene de caract\u00e8res. Voici plusieurs utilisations courantes de <code>indexOf()</code> :</p>"},{"location":"Array/indexOf/#utilisation-dans-les-tableaux-arrayprototypeindexof","title":"Utilisation dans les Tableaux (<code>Array.prototype.indexOf()</code>)","text":"<ol> <li>Trouver l'Indice d'un \u00c9l\u00e9ment dans un Tableau :</li> <li> <p>Recherche la premi\u00e8re occurrence d'un \u00e9l\u00e9ment dans un tableau et renvoie son indice.    <pre><code>let fruits = [\"apple\", \"banana\", \"cherry\"];\nlet index = fruits.indexOf(\"banana\"); // Renvoie 1\n</code></pre></p> </li> <li> <p>V\u00e9rifier la Pr\u00e9sence d'un \u00c9l\u00e9ment dans un Tableau :</p> </li> <li> <p>V\u00e9rifie si un \u00e9l\u00e9ment est pr\u00e9sent dans un tableau.    <pre><code>let numbers = [1, 2, 3];\nlet exists = numbers.indexOf(2) !== -1; // Renvoie true si l'\u00e9l\u00e9ment est trouv\u00e9\n</code></pre></p> </li> <li> <p>D\u00e9terminer si un \u00c9l\u00e9ment n'Est Pas dans un Tableau :</p> </li> <li>V\u00e9rifie si un \u00e9l\u00e9ment n'est pas pr\u00e9sent dans un tableau.    <pre><code>let numbers = [1, 2, 3];\nlet notExists = numbers.indexOf(4) === -1; // Renvoie true si l'\u00e9l\u00e9ment n'est pas trouv\u00e9\n</code></pre></li> </ol>"},{"location":"Array/indexOf/#utilisation-dans-les-chaines-de-caracteres-stringprototypeindexof","title":"Utilisation dans les Cha\u00eenes de Caract\u00e8res (<code>String.prototype.indexOf()</code>)","text":"<ol> <li>Trouver l'Indice d'une Sous-Cha\u00eene :</li> <li> <p>Recherche la premi\u00e8re occurrence d'une sous-cha\u00eene dans une cha\u00eene de caract\u00e8res et renvoie son indice.    <pre><code>let text = \"Hello, world!\";\nlet index = text.indexOf(\"world\"); // Renvoie 7\n</code></pre></p> </li> <li> <p>V\u00e9rifier la Pr\u00e9sence d'une Sous-Cha\u00eene :</p> </li> <li> <p>V\u00e9rifie si une sous-cha\u00eene est pr\u00e9sente dans une cha\u00eene de caract\u00e8res.    <pre><code>let text = \"Hello, world!\";\nlet exists = text.indexOf(\"world\") !== -1; // Renvoie true si la sous-cha\u00eene est trouv\u00e9e\n</code></pre></p> </li> <li> <p>Utilisation d'un Indice de D\u00e9part :</p> </li> <li>Commence la recherche \u00e0 partir d'un indice sp\u00e9cifique dans le tableau ou la cha\u00eene de caract\u00e8res.    <pre><code>let text = \"Hello, world, hello again!\";\nlet index = text.indexOf(\"hello\", 13); // Commence la recherche apr\u00e8s le 13\u00e8me caract\u00e8re\n</code></pre></li> </ol>"},{"location":"Array/indexOf/#points-importants_1","title":"Points Importants :","text":"<ul> <li><code>indexOf()</code> renvoie <code>-1</code> si l'\u00e9l\u00e9ment ou la sous-cha\u00eene n'est pas trouv\u00e9(e).</li> <li>La comparaison est sensible \u00e0 la casse dans les cha\u00eenes de caract\u00e8res.</li> <li>Elle utilise l'\u00e9galit\u00e9 stricte (<code>===</code>) pour la comparaison dans les tableaux.</li> <li><code>indexOf()</code> peut \u00eatre particuli\u00e8rement utile pour v\u00e9rifier la pr\u00e9sence d'\u00e9l\u00e9ments ou de sous-cha\u00eenes et obtenir leur position.</li> </ul>"},{"location":"Array/innerHTML/","title":"innerHTML","text":"<p>L'attribut <code>innerHTML</code> en JavaScript est une propri\u00e9t\u00e9 tr\u00e8s utilis\u00e9e pour interagir avec le contenu d'un \u00e9l\u00e9ment dans le Document Object Model (DOM). Voici les points cl\u00e9s \u00e0 conna\u00eetre sur <code>innerHTML</code> :</p> <ol> <li> <p>D\u00e9finition : <code>innerHTML</code> est une propri\u00e9t\u00e9 des \u00e9l\u00e9ments du DOM qui permet de r\u00e9cup\u00e9rer ou de d\u00e9finir le contenu HTML \u00e0 l'int\u00e9rieur d'un \u00e9l\u00e9ment donn\u00e9. Ce contenu comprend tous les \u00e9l\u00e9ments enfants, y compris le texte, les balises HTML, et les espaces.</p> </li> <li> <p>Utilisation : </p> </li> <li>Obtenir le contenu HTML : <code>innerHTML</code> peut \u00eatre utilis\u00e9 pour obtenir le contenu HTML actuel d'un \u00e9l\u00e9ment.</li> <li> <p>D\u00e9finir le contenu HTML : En affectant une cha\u00eene de caract\u00e8res \u00e0 <code>innerHTML</code>, vous pouvez modifier le contenu HTML de l'\u00e9l\u00e9ment. Cette cha\u00eene peut contenir des balises HTML, qui seront interpr\u00e9t\u00e9es et rendues par le navigateur.</p> </li> <li> <p>Exemple de code :    <pre><code>// Obtenir le contenu HTML\nvar contenu = document.getElementById(\"monElement\").innerHTML;\n\n// D\u00e9finir le contenu HTML\ndocument.getElementById(\"monElement\").innerHTML = \"&lt;p&gt;Nouveau contenu&lt;/p&gt;\";\n</code></pre></p> </li> <li> <p>S\u00e9curit\u00e9 : L'utilisation de <code>innerHTML</code> peut pr\u00e9senter des risques de s\u00e9curit\u00e9, notamment en mati\u00e8re de Cross-Site Scripting (XSS) si le contenu ins\u00e9r\u00e9 est contr\u00f4l\u00e9 par l'utilisateur. Il est important de s'assurer que le contenu ins\u00e9r\u00e9 via <code>innerHTML</code> est bien nettoy\u00e9 et s\u00e9curis\u00e9.</p> </li> <li> <p>Diff\u00e9rence avec <code>textContent</code> : Contrairement \u00e0 <code>textContent</code>, qui modifie uniquement le texte d'un \u00e9l\u00e9ment (sans interpr\u00e9ter les balises HTML), <code>innerHTML</code> peut modifier \u00e0 la fois le texte et les balises HTML. </p> </li> <li> <p>Performance : L'utilisation de <code>innerHTML</code> pour effectuer de multiples modifications peut \u00eatre moins performante que d'autres m\u00e9thodes de manipulation du DOM, comme <code>createElement</code> et <code>appendChild</code>, car elle force le navigateur \u00e0 reparser et reconstruire une partie du DOM \u00e0 chaque modification.</p> </li> </ol> <p>En r\u00e9sum\u00e9, <code>innerHTML</code> est un outil puissant pour la manipulation de contenu HTML dans des \u00e9l\u00e9ments du DOM, mais il doit \u00eatre utilis\u00e9 avec pr\u00e9caution, en tenant compte des implications en termes de performance et de s\u00e9curit\u00e9.</p> <p></p> <p></p> <p>L'affirmation selon laquelle <code>innerHTML</code> n'est pas sp\u00e9cifi\u00e9 dans le DOM mais est bien support\u00e9 par les navigateurs modernes n\u00e9cessite une clarification. Historiquement, <code>innerHTML</code> n'\u00e9tait pas une partie de la sp\u00e9cification officielle du DOM (Document Object Model) initialement, mais il est devenu une fonctionnalit\u00e9 standard et largement support\u00e9e dans les navigateurs modernes. Voici pourquoi :</p> <ol> <li> <p>Origine non standard : <code>innerHTML</code> a \u00e9t\u00e9 introduit par Internet Explorer de Microsoft avant de faire partie d'une norme officielle. D'autres navigateurs ont commenc\u00e9 \u00e0 l'impl\u00e9menter en raison de sa popularit\u00e9 et de son utilit\u00e9 pratique, bien qu'il n'ait pas \u00e9t\u00e9 initialement d\u00e9fini dans les sp\u00e9cifications du W3C pour le DOM.</p> </li> <li> <p>Adoption par les navigateurs : En raison de sa grande utilit\u00e9 pour les d\u00e9veloppeurs web, <code>innerHTML</code> a \u00e9t\u00e9 rapidement adopt\u00e9 par d'autres navigateurs web. Cette adoption g\u00e9n\u00e9ralis\u00e9e a cr\u00e9\u00e9 un standard de facto, m\u00eame avant que <code>innerHTML</code> soit inclus dans une sp\u00e9cification formelle.</p> </li> <li> <p>Standardisation : Finalement, <code>innerHTML</code> a \u00e9t\u00e9 officiellement standardis\u00e9. Il est maintenant inclus dans les sp\u00e9cifications du HTML Living Standard de WHATWG (Web Hypertext Application Technology Working Group). Cette standardisation est une reconnaissance de son r\u00f4le crucial dans le d\u00e9veloppement web et assure une meilleure coh\u00e9rence et compatibilit\u00e9 entre les navigateurs.</p> </li> <li> <p>Utilisation r\u00e9pandue : <code>innerHTML</code> est devenu un outil essentiel pour les d\u00e9veloppeurs web, permettant une manipulation facile et rapide du contenu HTML. Sa simplicit\u00e9 d'utilisation et sa puissance ont contribu\u00e9 \u00e0 sa popularit\u00e9.</p> </li> <li> <p>Compatibilit\u00e9 : Les navigateurs modernes continuent de prendre en charge <code>innerHTML</code> pour des raisons de compatibilit\u00e9 et de facilit\u00e9 de d\u00e9veloppement. Il est largement utilis\u00e9 dans de nombreux sites web et frameworks.</p> </li> </ol> <p>En r\u00e9sum\u00e9, bien que <code>innerHTML</code> n'ait pas \u00e9t\u00e9 initialement sp\u00e9cifi\u00e9 dans les standards du DOM, son adoption g\u00e9n\u00e9ralis\u00e9e et sa fonctionnalit\u00e9 utile ont conduit \u00e0 sa standardisation ult\u00e9rieure. Il est maintenant une partie int\u00e9grante de la sp\u00e9cification HTML et est largement support\u00e9 par tous les navigateurs modernes.</p>"},{"location":"Array/map-v2/","title":"Map v2","text":"<p>La m\u00e9thode <code>map()</code> en JavaScript est une fonction tr\u00e8s polyvalente et puissante pour travailler avec des tableaux. Elle cr\u00e9e un nouveau tableau en appliquant une fonction fournie \u00e0 chaque \u00e9l\u00e9ment du tableau sur lequel elle est appel\u00e9e. Voici plusieurs utilisations courantes de <code>map()</code> :</p> <ol> <li>Transformation des \u00c9l\u00e9ments :</li> <li>Modifier chaque \u00e9l\u00e9ment d'un tableau.</li> <li> <p>Exemple : Doubler chaque nombre dans un tableau de nombres.      <pre><code>let numbers = [1, 2, 3, 4];\nlet doubled = numbers.map(num =&gt; num * 2);\n</code></pre></p> </li> <li> <p>Extraire des Propri\u00e9t\u00e9s d'Objets :</p> </li> <li>Extraire une propri\u00e9t\u00e9 sp\u00e9cifique de chaque objet dans un tableau d'objets.</li> <li> <p>Exemple : Extraire une liste de noms d'un tableau d'utilisateurs.      <pre><code>let users = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}];\nlet names = users.map(user =&gt; user.name);\n</code></pre></p> </li> <li> <p>Conversion de Types de Donn\u00e9es :</p> </li> <li>Convertir des \u00e9l\u00e9ments d'un type \u00e0 un autre.</li> <li> <p>Exemple : Convertir un tableau de cha\u00eenes de caract\u00e8res en nombres.      <pre><code>let stringNumbers = ['1', '2', '3'];\nlet numbers = stringNumbers.map(Number);\n</code></pre></p> </li> <li> <p>R\u00e9aliser des Op\u00e9rations Complexes :</p> </li> <li>Effectuer des calculs ou des op\u00e9rations plus complexes sur les \u00e9l\u00e9ments.</li> <li> <p>Exemple : Ajouter une propri\u00e9t\u00e9 \u00e0 chaque objet dans un tableau.      <pre><code>let users = [{name: 'Alice'}, {name: 'Bob'}];\nlet usersWithAge = users.map(user =&gt; ({ ...user, age: user.name.length * 10 }));\n</code></pre></p> </li> <li> <p>Cr\u00e9er une Nouvelle Repr\u00e9sentation :</p> </li> <li>Construire un nouveau tableau d'objets ou de structures \u00e0 partir d'un tableau existant.</li> <li> <p>Exemple : Cr\u00e9er un tableau de cha\u00eenes de caract\u00e8res \u00e0 partir d'objets.      <pre><code>let users = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}];\nlet userInfo = users.map(user =&gt; `${user.name} is ${user.age} years old`);\n</code></pre></p> </li> <li> <p>Combiner <code>map()</code> avec d'autres M\u00e9thodes de Tableau :</p> </li> <li>Cha\u00eener <code>map()</code> avec d'autres m\u00e9thodes comme <code>filter()</code>, <code>reduce()</code> pour des transformations de donn\u00e9es plus complexes.</li> <li> <p>Exemple : Filtrer un tableau puis mapper les r\u00e9sultats.      <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet doubledEvenNumbers = numbers.filter(num =&gt; num % 2 === 0).map(num =&gt; num * 2);\n</code></pre></p> </li> <li> <p>Manipulation de Structures de Donn\u00e9es :</p> </li> <li>Utiliser <code>map()</code> pour manipuler des tableaux de tableaux ou d'autres structures de donn\u00e9es complexes.</li> <li>Exemple : Aplatir un tableau de tableaux.      <pre><code>let matrix = [[1, 2], [3, 4], [5, 6]];\nlet flat = matrix.map(row =&gt; row.join(', ')).join('; ');\n</code></pre></li> </ol> <p><code>map()</code> est essentiellement une m\u00e9thode de transformation de tableau qui permet d'appliquer une fonction \u00e0 chaque \u00e9l\u00e9ment d'un tableau et de construire un nouveau tableau avec les r\u00e9sultats. Cette m\u00e9thode est largement utilis\u00e9e pour sa simplicit\u00e9, son \u00e9l\u00e9gance et sa puissance dans la manipulation des tableaux.</p>"},{"location":"Array/reduce/","title":"Reduce","text":"<p>La fonction <code>reduce()</code> en JavaScript est une m\u00e9thode puissante et polyvalente appliqu\u00e9e aux tableaux. Elle est utilis\u00e9e pour r\u00e9duire un tableau \u00e0 une seule valeur. </p> <p>Cette m\u00e9thode ex\u00e9cute une fonction r\u00e9ductrice que vous fournissez sur chaque \u00e9l\u00e9ment du tableau, en r\u00e9sultant en une seule valeur de sortie. Voici une description plus d\u00e9taill\u00e9e :</p> <ul> <li>Reduce</li> <li>Documentation<ul> <li>Syntaxe de base</li> <li>Fonctionnement de <code>reduce()</code></li> <li>Exemple d'Utilisation</li> <li>Utilisations courantes de <code>reduce()</code></li> <li>1. Somme des \u00e9l\u00e9ments d'un array</li> <li>2. Calcul de la moyenne</li> <li>3. Comptage d'occurrences</li> <li>4. Aplatir un array de arrays</li> <li>5. Trouver le maximum/minimum</li> <li>6. Groupement d'\u00e9l\u00e9ments</li> <li>7. Cha\u00eenage de m\u00e9thodes avec <code>reduce()</code></li> <li>8. Transformation en un objet</li> </ul> </li> </ul>"},{"location":"Array/reduce/#documentation","title":"Documentation","text":""},{"location":"Array/reduce/#syntaxe-de-base","title":"Syntaxe de base","text":"<pre><code>array.reduce(function(accumulateur, valeurCourante, index, array), valeurInitiale)\n</code></pre> <ul> <li>accumulateur (acc) : Le cumul des valeurs retourn\u00e9es par la fonction r\u00e9ductrice. C'est la valeur accumul\u00e9e renvoy\u00e9e apr\u00e8s chaque it\u00e9ration.</li> <li>valeurCourante (val) : L'\u00e9l\u00e9ment actuellement trait\u00e9 dans le tableau.</li> <li>index (optionnel) : L'indice de l'\u00e9l\u00e9ment actuellement trait\u00e9 dans le tableau.</li> <li>array (optionnel) : Le tableau sur lequel la m\u00e9thode <code>reduce()</code> a \u00e9t\u00e9 appel\u00e9e.</li> <li>valeurInitiale (optionnel) : Une valeur \u00e0 utiliser comme premier argument lors du premier appel de la fonction r\u00e9ductrice. Si aucune valeur initiale n'est fournie, le premier \u00e9l\u00e9ment du tableau sera utilis\u00e9 comme accumulateur initial et la r\u00e9duction commencera \u00e0 partir du deuxi\u00e8me \u00e9l\u00e9ment.</li> </ul>"},{"location":"Array/reduce/#fonctionnement-de-reduce","title":"Fonctionnement de <code>reduce()</code>","text":"<ol> <li>It\u00e9ration sur le Tableau :</li> <li> <p><code>reduce()</code> it\u00e8re sur chaque \u00e9l\u00e9ment du tableau, un par un.</p> </li> <li> <p>Application de la Fonction R\u00e9ductrice :</p> </li> <li> <p>\u00c0 chaque it\u00e9ration, la fonction r\u00e9ductrice est appel\u00e9e avec quatre arguments : l'accumulateur, la valeur courante, l'indice courant et le tableau lui-m\u00eame.</p> </li> <li> <p>Accumulation :</p> </li> <li> <p>La valeur retourn\u00e9e par la fonction r\u00e9ductrice \u00e0 chaque it\u00e9ration est pass\u00e9e comme accumulateur \u00e0 la prochaine it\u00e9ration.</p> </li> <li> <p>Valeur Finale :</p> </li> <li>Apr\u00e8s la derni\u00e8re it\u00e9ration, <code>reduce()</code> renvoie la valeur finale de l'accumulateur.</li> </ol>"},{"location":"Array/reduce/#exemple-dutilisation","title":"Exemple d'Utilisation","text":"<p>Pour illustrer, consid\u00e9rons un tableau <code>[1, 2, 3, 4]</code> et calculons la somme de ses \u00e9l\u00e9ments :</p> <pre><code>let somme = [1, 2, 3, 4].reduce((acc, val) =&gt; acc + val, 0);\n</code></pre> <p>Ici, la fonction r\u00e9ductrice additionne chaque valeur (<code>val</code>) au total accumul\u00e9 (<code>acc</code>). La valeur initiale de l'accumulateur est <code>0</code>. Ainsi, apr\u00e8s avoir trait\u00e9 tous les \u00e9l\u00e9ments, <code>somme</code> contiendra <code>10</code>.</p>"},{"location":"Array/reduce/#utilisations-courantes-de-reduce","title":"Utilisations courantes de <code>reduce()</code>","text":"<ul> <li>Calculer des sommes ou des moyennes.</li> <li>Transformer des tableaux en objets ou d'autres structures de donn\u00e9es.</li> <li>Filtrer et concat\u00e9ner des \u00e9l\u00e9ments en une seule op\u00e9ration.</li> <li>Et bien plus, gr\u00e2ce \u00e0 sa nature flexible et puissante.</li> </ul> <p>En r\u00e9sum\u00e9, <code>reduce()</code> est une m\u00e9thode extr\u00eamement versatile pour transformer un tableau en une seule valeur en appliquant une fonction r\u00e9ductrice sp\u00e9cifi\u00e9e \u00e0 chaque \u00e9l\u00e9ment du tableau.</p> <p></p> <p></p> <p>La m\u00e9thode <code>reduce()</code> en JavaScript est un outil puissant pour travailler avec des arrays. Elle permet d'ex\u00e9cuter une fonction r\u00e9ductrice sur chaque \u00e9l\u00e9ment d'un array, en les accumulant pour produire une seule valeur. Voici quelques utilisations courantes de la m\u00e9thode <code>reduce()</code> :</p>"},{"location":"Array/reduce/#1-somme-des-elements-dun-array","title":"1. Somme des \u00e9l\u00e9ments d'un array","text":"<p>Calculer la somme de tous les \u00e9l\u00e9ments d'un array num\u00e9rique.</p> <pre><code>const array = [1, 2, 3, 4];\nconst sum = array.reduce((accumulator, currentValue) =&gt; accumulator + currentValue, 0);\n</code></pre>"},{"location":"Array/reduce/#2-calcul-de-la-moyenne","title":"2. Calcul de la moyenne","text":"<p>Trouver la moyenne des \u00e9l\u00e9ments d'un array num\u00e9rique.</p> <pre><code>const array = [1, 2, 3, 4];\nconst average = array.reduce((accumulator, currentValue, index, array) =&gt; {\n    accumulator += currentValue;\n    if(index === array.length-1) { \n        return accumulator / array.length; \n    } else { \n        return accumulator; \n    }\n}, 0);\n</code></pre>"},{"location":"Array/reduce/#3-comptage-doccurrences","title":"3. Comptage d'occurrences","text":"<p>Compter le nombre d'occurrences de chaque \u00e9l\u00e9ment dans un array.</p> <pre><code>const array = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple'];\nconst count = array.reduce((accumulator, fruit) =&gt; {\n    accumulator[fruit] = (accumulator[fruit] || 0) + 1;\n    return accumulator;\n}, {});\n</code></pre>"},{"location":"Array/reduce/#4-aplatir-un-array-de-arrays","title":"4. Aplatir un array de arrays","text":"<p>Convertir un array de arrays en un seul array plat.</p> <pre><code>const array = [[1, 2], [3, 4], [5, 6]];\nconst flat = array.reduce((accumulator, currentValue) =&gt; accumulator.concat(currentValue), []);\n</code></pre>"},{"location":"Array/reduce/#5-trouver-le-maximumminimum","title":"5. Trouver le maximum/minimum","text":"<p>D\u00e9terminer la valeur maximale ou minimale dans un array num\u00e9rique.</p> <pre><code>const array = [1, 2, 3, 4];\nconst max = array.reduce((accumulator, currentValue) =&gt; Math.max(accumulator, currentValue));\n</code></pre>"},{"location":"Array/reduce/#6-groupement-delements","title":"6. Groupement d'\u00e9l\u00e9ments","text":"<p>Regrouper les \u00e9l\u00e9ments d'un array en fonction d'une propri\u00e9t\u00e9 sp\u00e9cifique.</p> <pre><code>const people = [\n    { name: 'Alice', age: 21 },\n    { name: 'Max', age: 20 },\n    { name: 'Jane', age: 20 }\n];\n\nconst groupByAge = people.reduce((accumulator, person) =&gt; {\n    const age = person.age;\n    if (!accumulator[age]) {\n        accumulator[age] = [];\n    }\n    accumulator[age].push(person);\n    return accumulator;\n}, {});\n</code></pre>"},{"location":"Array/reduce/#7-chainage-de-methodes-avec-reduce","title":"7. Cha\u00eenage de m\u00e9thodes avec <code>reduce()</code>","text":"<p>Combiner <code>reduce()</code> avec d'autres m\u00e9thodes pour des op\u00e9rations complexes.</p> <pre><code>const array = [1, 2, 3, 4];\nconst sumOfSquares = array\n    .map(x =&gt; x * x)\n    .reduce((accumulator, currentValue) =&gt; accumulator + currentValue, 0);\n</code></pre>"},{"location":"Array/reduce/#8-transformation-en-un-objet","title":"8. Transformation en un objet","text":"<p>Convertir un array en un objet o\u00f9 chaque \u00e9l\u00e9ment contribue \u00e0 une propri\u00e9t\u00e9 de l'objet.</p> <pre><code>const array = [['key1', 'value1'], ['key2', 'value2']];\nconst object = array.reduce((accumulator, [key, value]) =&gt; {\n    accumulator[key] = value;\n    return accumulator;\n}, {});\n</code></pre> <p>Ces exemples montrent la polyvalence de <code>reduce()</code>, qui peut \u00eatre utilis\u00e9e pour une grande vari\u00e9t\u00e9 de t\u00e2ches de traitement de donn\u00e9es dans JavaScript.</p>"},{"location":"Array/slice/","title":"Slice","text":"<p>La fonction <code>slice()</code> en JavaScript est une m\u00e9thode utilis\u00e9e \u00e0 la fois sur les objets <code>Array</code> et <code>String</code> pour retourner une portion s\u00e9lectionn\u00e9e du tableau ou de la cha\u00eene de caract\u00e8res. Cette m\u00e9thode est non destructive, c'est-\u00e0-dire qu'elle ne modifie pas le tableau ou la cha\u00eene de caract\u00e8res original(e).</p>"},{"location":"Array/slice/#utilisation-avec-les-tableaux-arrayslice","title":"Utilisation avec les Tableaux (<code>Array.slice()</code>)","text":""},{"location":"Array/slice/#syntaxe","title":"Syntaxe","text":"<pre><code>array.slice(start, end)\n</code></pre> <ul> <li>start (optionnel) : L'indice de d\u00e9but pour la d\u00e9coupe. Si omis, la d\u00e9coupe commence \u00e0 l'indice 0. Si la valeur est n\u00e9gative, elle indique un offset \u00e0 partir de la fin du tableau.</li> <li>end (optionnel) : L'indice de fin (exclusif) pour la d\u00e9coupe. Si omis, la d\u00e9coupe s'\u00e9tend jusqu'\u00e0 la fin du tableau. Si la valeur est n\u00e9gative, elle indique un offset \u00e0 partir de la fin du tableau.</li> </ul>"},{"location":"Array/slice/#fonctionnement","title":"Fonctionnement","text":"<ul> <li><code>slice()</code> retourne un nouveau tableau contenant les \u00e9l\u00e9ments du tableau original entre l'indice <code>start</code> et <code>end</code> (non inclus).</li> <li>Si <code>start</code> est sup\u00e9rieur \u00e0 la longueur du tableau, un tableau vide est retourn\u00e9.</li> </ul>"},{"location":"Array/slice/#exemple","title":"Exemple","text":"<pre><code>let numbers = [1, 2, 3, 4, 5];\nlet sliced = numbers.slice(1, 4); // Renvoie [2, 3, 4]\n</code></pre>"},{"location":"Array/slice/#utilisation-avec-les-chaines-de-caracteres-stringslice","title":"Utilisation avec les Cha\u00eenes de Caract\u00e8res (<code>String.slice()</code>)","text":""},{"location":"Array/slice/#syntaxe_1","title":"Syntaxe","text":"<pre><code>string.slice(start, end)\n</code></pre> <ul> <li>start (optionnel) : L'indice de d\u00e9but pour la d\u00e9coupe dans la cha\u00eene. Si la valeur est n\u00e9gative, elle indique un offset \u00e0 partir de la fin de la cha\u00eene.</li> <li>end (optionnel) : L'indice de fin (exclusif) pour la d\u00e9coupe dans la cha\u00eene. Si omis, la d\u00e9coupe s'\u00e9tend jusqu'\u00e0 la fin de la cha\u00eene. Si la valeur est n\u00e9gative, elle indique un offset \u00e0 partir de la fin de la cha\u00eene.</li> </ul>"},{"location":"Array/slice/#fonctionnement_1","title":"Fonctionnement","text":"<ul> <li><code>slice()</code> retourne une nouvelle cha\u00eene de caract\u00e8res contenant une partie de la cha\u00eene originale, entre les indices <code>start</code> et <code>end</code> (non inclus).</li> <li>Si <code>start</code> est sup\u00e9rieur \u00e0 la longueur de la cha\u00eene, une cha\u00eene vide est retourn\u00e9e.</li> </ul>"},{"location":"Array/slice/#exemple_1","title":"Exemple","text":"<pre><code>let text = \"Hello, world!\";\nlet sliced = text.slice(7, 12); // Renvoie \"world\"\n</code></pre>"},{"location":"Array/slice/#points-importants","title":"Points Importants","text":"<ul> <li><code>slice()</code> ne modifie pas le tableau ou la cha\u00eene de caract\u00e8res original(e). Il/elle en retourne une copie avec les \u00e9l\u00e9ments ou caract\u00e8res s\u00e9lectionn\u00e9s.</li> <li>Les indices n\u00e9gatifs permettent de commencer la coupe depuis la fin du tableau ou de la cha\u00eene.</li> <li>Cette m\u00e9thode est particuli\u00e8rement utile pour obtenir des sous-ensembles d'un tableau ou d'une cha\u00eene sans affecter l'original.</li> </ul>"},{"location":"Array/slice/#utilisation-avec-les-tableaux-arrayprototypeslice","title":"Utilisation avec les Tableaux (<code>Array.prototype.slice()</code>)","text":"<ol> <li>Extraire une Partie d'un Tableau :</li> <li> <p>Cr\u00e9er un sous-tableau \u00e0 partir d'un tableau existant.    <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet subArray = numbers.slice(1, 4); // Renvoie [2, 3, 4]\n</code></pre></p> </li> <li> <p>Copier un Tableau :</p> </li> <li> <p>Faire une copie superficielle d'un tableau.    <pre><code>let original = [1, 2, 3];\nlet copy = original.slice(); // Renvoie une copie de 'original'\n</code></pre></p> </li> <li> <p>Extraire des \u00c9l\u00e9ments Jusqu'\u00e0 la Fin d'un Tableau :</p> </li> <li> <p>Extraire une partie d'un tableau depuis un index donn\u00e9 jusqu'\u00e0 la fin.    <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet sliced = numbers.slice(2); // Renvoie [3, 4, 5]\n</code></pre></p> </li> <li> <p>Utilisation d'Indices N\u00e9gatifs :</p> </li> <li>Utiliser un index n\u00e9gatif pour commencer \u00e0 partir de la fin du tableau.    <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet sliced = numbers.slice(-3); // Renvoie [3, 4, 5]\n</code></pre></li> </ol>"},{"location":"Array/slice/#utilisation-avec-les-chaines-de-caracteres-stringprototypeslice","title":"Utilisation avec les Cha\u00eenes de Caract\u00e8res (<code>String.prototype.slice()</code>)","text":"<ol> <li>Extraire une Sous-Cha\u00eene :</li> <li> <p>Extraire une partie d'une cha\u00eene de caract\u00e8res.    <pre><code>let text = \"Hello, world!\";\nlet subText = text.slice(7, 12); // Renvoie \"world\"\n</code></pre></p> </li> <li> <p>Extraire des Caract\u00e8res Jusqu'\u00e0 la Fin d'une Cha\u00eene :</p> </li> <li> <p>Obtenir une sous-cha\u00eene \u00e0 partir d'un index donn\u00e9 jusqu'\u00e0 la fin.    <pre><code>let text = \"Hello, world!\";\nlet subText = text.slice(7); // Renvoie \"world!\"\n</code></pre></p> </li> <li> <p>Utilisation d'Indices N\u00e9gatifs avec les Cha\u00eenes :</p> </li> <li>Extraire une sous-cha\u00eene en commen\u00e7ant par la fin.    <pre><code>let text = \"Hello, world!\";\nlet subText = text.slice(-6); // Renvoie \"world!\"\n</code></pre></li> </ol>"},{"location":"Array/slice/#points-importants_1","title":"Points Importants","text":"<ul> <li><code>slice()</code> est non destructive, c'est-\u00e0-dire qu'elle ne modifie pas le tableau ou la cha\u00eene de caract\u00e8res original(e).</li> <li>Les indices sp\u00e9cifi\u00e9s pour <code>slice()</code> sont inclusifs pour le d\u00e9but et exclusifs pour la fin. Par exemple, <code>slice(1, 4)</code> inclut les \u00e9l\u00e9ments aux indices 1 et 2, mais pas l'\u00e9l\u00e9ment \u00e0 l'indice 4.</li> <li>Lors de l'utilisation d'indices n\u00e9gatifs, la m\u00e9thode compte \u00e0 rebours \u00e0 partir de la fin du tableau ou de la cha\u00eene.</li> <li>Pour les tableaux, <code>slice()</code> effectue une copie superficielle, ce qui signifie que les objets et tableaux imbriqu\u00e9s ne sont pas clon\u00e9s mais r\u00e9f\u00e9renc\u00e9s.</li> </ul> <p><code>slice()</code> est donc un outil extr\u00eamement utile pour manipuler des tableaux et des cha\u00eenes de caract\u00e8res, surtout lorsque vous avez besoin de portions de ces structures de donn\u00e9es sans modifier les originaux.</p>"},{"location":"Array/some/","title":"Some","text":"<p>La fonction <code>some()</code> en JavaScript est une m\u00e9thode de l'objet <code>Array</code> utilis\u00e9e pour tester si au moins un \u00e9l\u00e9ment d'un tableau r\u00e9pond \u00e0 une condition d\u00e9finie dans une fonction de rappel. Cette m\u00e9thode est particuli\u00e8rement utile pour v\u00e9rifier rapidement la pr\u00e9sence d'\u00e9l\u00e9ments satisfaisant \u00e0 un crit\u00e8re sp\u00e9cifique dans un tableau.</p>"},{"location":"Array/some/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>array.some(callback(element[, index[, array]])[, thisArg])\n</code></pre> <ul> <li>callback : Une fonction qui teste chaque \u00e9l\u00e9ment du tableau. Elle peut prendre jusqu'\u00e0 trois arguments :</li> <li>element : L'\u00e9l\u00e9ment actuel du tableau en cours de traitement.</li> <li>index (optionnel) : L'indice de l'\u00e9l\u00e9ment actuel dans le tableau.</li> <li>array (optionnel) : Le tableau sur lequel <code>some()</code> a \u00e9t\u00e9 appel\u00e9.</li> <li>thisArg (optionnel) : Une valeur \u00e0 utiliser comme <code>this</code> lors de l'ex\u00e9cution de la fonction de rappel.</li> </ul>"},{"location":"Array/some/#fonctionnement","title":"Fonctionnement :","text":"<ul> <li><code>some()</code> ex\u00e9cute la fonction de rappel une fois pour chaque \u00e9l\u00e9ment pr\u00e9sent dans le tableau, jusqu'\u00e0 ce qu'elle trouve un \u00e9l\u00e9ment pour lequel la fonction renvoie une valeur truthy (vraie).</li> <li>Si la fonction de rappel renvoie <code>true</code> pour au moins un \u00e9l\u00e9ment du tableau, <code>some()</code> renvoie <code>true</code>.</li> <li>Si la fonction de rappel ne renvoie <code>true</code> pour aucun \u00e9l\u00e9ment du tableau, <code>some()</code> renvoie <code>false</code>.</li> <li>La m\u00e9thode ne modifie pas le tableau sur lequel elle est appel\u00e9e.</li> </ul>"},{"location":"Array/some/#exemples","title":"Exemples :","text":"<ol> <li> <p>V\u00e9rifier si un Tableau Contient au Moins un \u00c9l\u00e9ment Pair : <pre><code>let numbers = [1, 3, 5, 7, 4, 9];\nlet hasEvenNumber = numbers.some(num =&gt; num % 2 === 0); // Renvoie true\n</code></pre></p> </li> <li> <p>V\u00e9rifier la Pr\u00e9sence d'une Valeur Sup\u00e9rieure \u00e0 un Seuil : <pre><code>let numbers = [1, 2, 3, 4, 5];\nlet hasLargeNumber = numbers.some(num =&gt; num &gt; 4); // Renvoie true\n</code></pre></p> </li> <li> <p>V\u00e9rification dans un Tableau d'Objets : <pre><code>let people = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}];\nlet hasMinor = people.some(person =&gt; person.age &lt; 18); // Renvoie false\n</code></pre></p> </li> </ol>"},{"location":"Array/some/#points-importants","title":"Points Importants :","text":"<ul> <li><code>some()</code> est utile pour les tests de validation o\u00f9 vous avez besoin de v\u00e9rifier si au moins un \u00e9l\u00e9ment du tableau r\u00e9pond \u00e0 une condition.</li> <li>Elle est souvent utilis\u00e9e dans des situations o\u00f9 diff\u00e9rentes conditions peuvent \u00eatre satisfaites pour obtenir un r\u00e9sultat positif.</li> <li><code>some()</code> renvoie <code>false</code> pour un tableau vide, ind\u00e9pendamment de la condition dans la fonction de rappel.</li> <li>Cette m\u00e9thode est efficace pour les grands tableaux, car elle s'arr\u00eate d\u00e8s qu'elle trouve un \u00e9l\u00e9ment r\u00e9pondant \u00e0 la condition.</li> </ul> <p>La m\u00e9thode <code>some()</code> en JavaScript est utilis\u00e9e pour v\u00e9rifier si au moins un \u00e9l\u00e9ment d'un tableau satisfait \u00e0 une condition sp\u00e9cifi\u00e9e par une fonction de rappel. Voici plusieurs utilisations courantes de <code>some()</code> :</p>"},{"location":"Array/some/#1-verifier-la-presence-dun-element-correspondant-a-une-condition","title":"1. V\u00e9rifier la Pr\u00e9sence d'un \u00c9l\u00e9ment Correspondant \u00e0 une Condition :","text":"<ul> <li>Tester si un tableau contient au moins un nombre pair : <pre><code>let numbers = [1, 3, 5, 7, 2];\nlet hasEven = numbers.some(num =&gt; num % 2 === 0); // Renvoie true\n</code></pre></li> </ul>"},{"location":"Array/some/#2-utilisation-avec-des-tableaux-dobjets","title":"2. Utilisation avec des Tableaux d'Objets :","text":"<ul> <li>V\u00e9rifier si au moins un objet dans un tableau remplit une condition : <pre><code>let people = [{ name: 'Alice', age: 24 }, { name: 'Bob', age: 30 }];\nlet hasMinor = people.some(person =&gt; person.age &lt; 18); // Renvoie false\n</code></pre></li> </ul>"},{"location":"Array/some/#3-verifier-si-un-tableau-contient-un-element-specifique","title":"3. V\u00e9rifier si un Tableau Contient un \u00c9l\u00e9ment Sp\u00e9cifique :","text":"<ul> <li>V\u00e9rifier si un tableau contient une valeur sp\u00e9cifique : <pre><code>let fruits = ['apple', 'banana', 'mango'];\nlet hasApple = fruits.some(fruit =&gt; fruit === 'apple'); // Renvoie true\n</code></pre></li> </ul>"},{"location":"Array/some/#4-utilisation-avec-des-conditions-composees","title":"4. Utilisation avec des Conditions Compos\u00e9es :","text":"<ul> <li>Combiner plusieurs conditions pour une v\u00e9rification : <pre><code>let products = [{ name: 'Phone', price: 700 }, { name: 'Laptop', price: 1200 }];\nlet hasExpensiveProduct = products.some(product =&gt; product.price &gt; 1000); // Renvoie true\n</code></pre></li> </ul>"},{"location":"Array/some/#5-valider-des-donnees-de-formulaire-ou-des-entrees-utilisateur","title":"5. Valider des Donn\u00e9es de Formulaire ou des Entr\u00e9es Utilisateur :","text":"<ul> <li>V\u00e9rifier si au moins une entr\u00e9e dans un formulaire ou un ensemble de donn\u00e9es remplit une condition : <pre><code>let formResponses = [false, false, true];\nlet hasPositiveResponse = formResponses.some(response =&gt; response === true); // Renvoie true\n</code></pre></li> </ul>"},{"location":"Array/some/#6-utilisation-avec-des-tableaux-complexes","title":"6. Utilisation avec des Tableaux Complexes :","text":"<ul> <li>V\u00e9rifier des conditions dans des tableaux contenant des structures de donn\u00e9es complexes : <pre><code>let matrix = [[0, 0], [0, 1], [0, 0]];\nlet hasNonZero = matrix.some(row =&gt; row.some(cell =&gt; cell !== 0)); // Renvoie true\n</code></pre></li> </ul>"},{"location":"Array/some/#7-recherche-de-sous-chaines-dans-un-tableau-de-chaines-de-caracteres","title":"7. Recherche de Sous-Cha\u00eenes dans un Tableau de Cha\u00eenes de Caract\u00e8res :","text":"<ul> <li>V\u00e9rifier si au moins une cha\u00eene dans un tableau contient une sous-cha\u00eene sp\u00e9cifique : <pre><code>let strings = [\"JavaScript\", \"Python\", \"C++\"];\nlet hasScript = strings.some(str =&gt; str.includes(\"Script\")); // Renvoie true\n</code></pre></li> </ul>"},{"location":"Array/some/#points-importants_1","title":"Points Importants :","text":"<ul> <li><code>some()</code> renvoie <code>true</code> d\u00e8s qu'un \u00e9l\u00e9ment du tableau satisfait \u00e0 la condition, et <code>false</code> si aucun \u00e9l\u00e9ment ne satisfait \u00e0 la condition.</li> <li>Elle ne modifie pas le tableau original.</li> <li><code>some()</code> s'arr\u00eate et renvoie imm\u00e9diatement <code>true</code> d\u00e8s que la condition est satisfaite, ce qui la rend plus efficace pour les grands tableaux que des m\u00e9thodes comme <code>forEach</code> ou <code>for</code> qui parcourraient tout le tableau.</li> <li><code>some()</code> renvoie <code>false</code> pour un tableau vide.</li> </ul>"},{"location":"Array/sort/","title":"Sort","text":"<p>La m\u00e9thode <code>sort()</code> en JavaScript est utilis\u00e9e pour trier les \u00e9l\u00e9ments d'un tableau in place selon un crit\u00e8re sp\u00e9cifique fourni par une fonction de comparaison. Si aucune fonction de comparaison n'est fournie, le tableau est tri\u00e9 en convertissant ses \u00e9l\u00e9ments en cha\u00eenes de caract\u00e8res et en les comparant selon l'ordre des unit\u00e9s de code UTF-16.</p>"},{"location":"Array/sort/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>array.sort([compareFunction])\n</code></pre> <ul> <li>array : Le tableau \u00e0 trier.</li> <li>compareFunction (optionnelle) : Une fonction qui d\u00e9finit l'ordre de tri. Elle doit renvoyer un nombre n\u00e9gatif, z\u00e9ro ou un nombre positif, selon que le premier argument doit \u00eatre class\u00e9 avant, \u00e9gal ou apr\u00e8s le deuxi\u00e8me argument, respectivement.</li> </ul>"},{"location":"Array/sort/#fonctionnement","title":"Fonctionnement :","text":"<ol> <li>Sans Fonction de Comparaison :</li> <li>Si <code>compareFunction</code> n'est pas fournie, les \u00e9l\u00e9ments du tableau sont convertis en cha\u00eenes de caract\u00e8res et tri\u00e9s selon les valeurs des unit\u00e9s de code UTF-16 de ces cha\u00eenes.</li> <li> <p>Exemple : <code>[\"10\", \"2\", \"1\"].sort()</code> donnera <code>[\"1\", \"10\", \"2\"]</code>.</p> </li> <li> <p>Avec Fonction de Comparaison :</p> </li> <li>Si <code>compareFunction(a, b)</code> est fournie, alors elle d\u00e9termine l'ordre des \u00e9l\u00e9ments <code>a</code> et <code>b</code>.</li> <li>Si elle renvoie un nombre inf\u00e9rieur \u00e0 0, <code>a</code> sera class\u00e9 avant <code>b</code>.</li> <li>Si elle renvoie 0, l'ordre de <code>a</code> et <code>b</code> reste inchang\u00e9 par rapport \u00e0 l'ordre original.</li> <li>Si elle renvoie un nombre sup\u00e9rieur \u00e0 0, <code>b</code> sera class\u00e9 avant <code>a</code>.</li> </ol>"},{"location":"Array/sort/#exemples","title":"Exemples :","text":"<ol> <li> <p>Tri de Nombres : <pre><code>let numbers = [3, 1, 4, 1, 5, 9];\nnumbers.sort((a, b) =&gt; a - b);\n// Trie les nombres en ordre croissant : [1, 1, 3, 4, 5, 9]\n</code></pre></p> </li> <li> <p>Tri de Cha\u00eenes de Caract\u00e8res : <pre><code>let fruits = ['banane', 'Pomme', 'cerise'];\nfruits.sort();\n// Trie les cha\u00eenes de caract\u00e8res : ['Pomme', 'banane', 'cerise']\n</code></pre></p> </li> <li> <p>Tri Insensible \u00e0 la Casse : <pre><code>let fruits = ['banane', 'Pomme', 'cerise'];\nfruits.sort((a, b) =&gt; a.localeCompare(b, undefined, {sensitivity: 'base'}));\n// Trie les cha\u00eenes de caract\u00e8res sans tenir compte de la casse\n</code></pre></p> </li> <li> <p>Tri de Tableaux d'Objets : <pre><code>let people = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Alice', age: 20}];\npeople.sort((a, b) =&gt; a.name.localeCompare(b.name) || a.age - b.age);\n// Trie les personnes d'abord par nom, puis par \u00e2ge en cas de noms identiques\n</code></pre></p> </li> </ol>"},{"location":"Array/sort/#points-importants","title":"Points Importants :","text":"<ul> <li><code>sort()</code> trie le tableau sur place et modifie donc le tableau original.</li> <li>Le comportement de tri par d\u00e9faut peut produire des r\u00e9sultats inattendus, en particulier pour des nombres. Toujours fournir une fonction de comparaison pour des tris autres que lexicographiques.</li> <li><code>sort()</code> est consid\u00e9r\u00e9 comme stable \u00e0 partir d'ECMAScript 2019, ce qui signifie que les \u00e9l\u00e9ments \u00e9gaux selon la fonction de comparaison conservent leur ordre original.</li> </ul>"},{"location":"Array/sort/#1-tri-simple-de-tableaux-de-chaines-de-caracteres","title":"1. Tri Simple de Tableaux de Cha\u00eenes de Caract\u00e8res :","text":"<ul> <li>Tri par ordre alphab\u00e9tique.   <pre><code>let fruits = ['banane', 'pomme', 'orange'];\nfruits.sort();\n</code></pre></li> </ul>"},{"location":"Array/sort/#2-tri-de-tableaux-de-nombres","title":"2. Tri de Tableaux de Nombres :","text":"<ul> <li>Par d\u00e9faut, <code>sort()</code> trie les \u00e9l\u00e9ments comme des cha\u00eenes de caract\u00e8res. Pour trier num\u00e9riquement, une fonction de comparaison est n\u00e9cessaire.   <pre><code>let numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5];\nnumbers.sort((a, b) =&gt; a - b);\n</code></pre></li> </ul>"},{"location":"Array/sort/#3-tri-inverse","title":"3. Tri Inverse :","text":"<ul> <li>Tri en ordre d\u00e9croissant.   <pre><code>let numbers = [3, 1, 4, 1, 5];\nnumbers.sort((a, b) =&gt; b - a);\n</code></pre></li> </ul>"},{"location":"Array/sort/#4-tri-de-tableaux-dobjets","title":"4. Tri de Tableaux d'Objets :","text":"<ul> <li>Tri selon une propri\u00e9t\u00e9 sp\u00e9cifique des objets.   <pre><code>let people = [{name: 'Alice', age: 25}, {name: 'Bob', age: 30}];\npeople.sort((a, b) =&gt; a.age - b.age);\n</code></pre></li> </ul>"},{"location":"Array/sort/#5-tri-stable-ou-instable","title":"5. Tri Stable ou Instable :","text":"<ul> <li>Depuis ES2019, <code>sort()</code> est stable pour les tableaux avec 10 \u00e9l\u00e9ments ou plus, ce qui signifie que l'ordre relatif des \u00e9l\u00e9ments \u00e9gaux est pr\u00e9serv\u00e9.</li> </ul>"},{"location":"Array/sort/#6-tri-avec-une-fonction-de-comparaison-complexe","title":"6. Tri avec une Fonction de Comparaison Complexe :","text":"<ul> <li>Utiliser une logique complexe pour d\u00e9terminer l'ordre.   <pre><code>let items = [{name: 'Banane', quantity: 5}, {name: 'Pomme', quantity: 20}];\nitems.sort((a, b) =&gt; a.name.localeCompare(b.name) || b.quantity - a.quantity);\n</code></pre></li> </ul>"},{"location":"Array/sort/#7-tri-sensible-a-la-casse-et-insensible-a-la-casse","title":"7. Tri Sensible \u00e0 la Casse et Insensible \u00e0 la Casse :","text":"<ul> <li>Tri sensible \u00e0 la casse (comportement par d\u00e9faut).   <pre><code>let words = ['a', 'B', 'c', 'D'];\nwords.sort();\n</code></pre></li> <li>Tri insensible \u00e0 la casse.   <pre><code>words.sort((a, b) =&gt; a.toLowerCase().localeCompare(b.toLowerCase()));\n</code></pre></li> </ul>"},{"location":"Array/sort/#8-tri-base-sur-des-criteres-multiples","title":"8. Tri Bas\u00e9 sur des Crit\u00e8res Multiples :","text":"<ul> <li>Combinaison de plusieurs crit\u00e8res pour le tri.   <pre><code>let people = [{name: 'Alice', age: 25}, {name: 'Bob', age: 25}, {name: 'Alice', age: 30}];\npeople.sort((a, b) =&gt; a.name.localeCompare(b.name) || a.age - b.age);\n</code></pre></li> </ul>"},{"location":"Array/sort/#9-utilisation-avec-des-chaines-unicode","title":"9. Utilisation avec des Cha\u00eenes Unicode :","text":"<ul> <li>Tri de cha\u00eenes avec des caract\u00e8res sp\u00e9ciaux ou dans diff\u00e9rentes langues.   <pre><code>let words = ['r\u00e9sum\u00e9', 'caf\u00e9', '\u00e9clair'];\nwords.sort((a, b) =&gt; a.localeCompare(b));\n</code></pre></li> </ul> <p><code>sort()</code> est une m\u00e9thode tr\u00e8s puissante pour organiser des donn\u00e9es en JavaScript. Cependant, il est important de se rappeler que <code>sort()</code> modifie le tableau original et que le tri par d\u00e9faut est bas\u00e9 sur la conversion des \u00e9l\u00e9ments en cha\u00eenes de caract\u00e8res, ce qui peut ne pas \u00eatre intuitif pour les nombres et certains types de donn\u00e9es.</p> <p></p> <p></p> <ol> <li> <p>Tri de cha\u00eenes de caract\u00e8res :    <pre><code>// Tri simple de cha\u00eenes\nlet fruits = [\"Banane\", \"Cerise\", \"Abricot\"];\nfruits.sort();\n\n// Tri insensible \u00e0 la casse\nlet mixedCaseFruits = [\"banane\", \"Cerise\", \"abricot\"];\nmixedCaseFruits.sort((a, b) =&gt; a.toLowerCase().localeCompare(b.toLowerCase()));\n</code></pre></p> </li> <li> <p>Tri de nombres :    <pre><code>// Tri croissant\nlet numbers = [3, 1, 4, 1, 5, 9];\nnumbers.sort((a, b) =&gt; a - b);\n\n// Tri d\u00e9croissant\nnumbers.sort((a, b) =&gt; b - a);\n</code></pre></p> </li> <li> <p>Tri de dates :    <pre><code>// Tri de dates (croissant)\nlet dates = [\"2024/01/02\", \"2024/01/01\", \"2024/01/03\"];\ndates.sort((a, b) =&gt; new Date(a) - new Date(b));\n\n// Tri de dates (d\u00e9croissant)\ndates.sort((a, b) =&gt; new Date(b) - new Date(a));\n</code></pre></p> </li> <li> <p>Tri de tableaux d'objets :    <pre><code>// Tri selon une propri\u00e9t\u00e9 sp\u00e9cifique (ex: age)\nlet people = [{ name: \"Alice\", age: 30 }, { name: \"Bob\", age: 25 }, { name: \"Carol\", age: 35 }];\n\n// Croissant\npeople.sort((a, b) =&gt; a.age - b.age);\n\n// D\u00e9croissant\npeople.sort((a, b) =&gt; b.age - a.age);\n</code></pre></p> </li> <li> <p>Tri avec des crit\u00e8res multiples :    <pre><code>// Tri par nom puis par \u00e2ge\npeople.sort((a, b) =&gt; {\n    let nameOrder = a.name.localeCompare(b.name);\n    return nameOrder === 0 ? a.age - b.age : nameOrder;\n});\n</code></pre></p> </li> <li> <p>Tri stable :    <pre><code>// Le tri est stable par d\u00e9faut dans les versions modernes de JavaScript\n</code></pre></p> </li> <li> <p>Tri personnalis\u00e9 :    <pre><code>// Exemple de tri complexe selon une logique m\u00e9tier sp\u00e9cifique\n</code></pre></p> </li> <li> <p>Tri selon la localisation :    <pre><code>// Tri en respectant les r\u00e8gles linguistiques (exemple avec l'allemand)\nlet germanWords = [\"\u00e4pfel\", \"fuss\", \"apfel\"];\ngermanWords.sort((a, b) =&gt; a.localeCompare(b, 'de'));\n</code></pre></p> </li> <li> <p>Tri invers\u00e9 :    <pre><code>// Apr\u00e8s un tri initial, inverser l'ordre\nnumbers.sort((a, b) =&gt; a - b).reverse();\n</code></pre></p> </li> <li> <p>Tri selon des conditions conditionnelles :     <pre><code>// Tri selon des conditions sp\u00e9cifiques\nlet mixedNumbers = [0, 1, -1, 2, -2, 3, -3];\nmixedNumbers.sort((a, b) =&gt; {\n    if (a &lt; 0 &amp;&amp; b &lt; 0) return a - b; // Trier les nombres n\u00e9gatifs en ordre croissant\n    if (a &gt;= 0 &amp;&amp; b &gt;= 0) return a - b; // Trier les nombres positifs en ordre croissant\n    return a &lt; b ? -1 : 1; // Mettre les nombres n\u00e9gatifs en premier\n});\n</code></pre></p> </li> </ol> <p>Ces exemples illustrent comment la m\u00e9thode <code>sort</code> peut \u00eatre utilis\u00e9e de mani\u00e8re flexible pour diff\u00e9rents types de donn\u00e9es et besoins de tri.</p>"},{"location":"Array/splice/","title":"Splice","text":"<p>La fonction <code>splice()</code> en JavaScript est une m\u00e9thode tr\u00e8s versatile de l'objet <code>Array</code> qui est utilis\u00e9e pour modifier le contenu d'un tableau en ajoutant, enlevant, ou rempla\u00e7ant des \u00e9l\u00e9ments. Contrairement \u00e0 <code>slice()</code>, <code>splice()</code> modifie directement le tableau sur lequel elle est appel\u00e9e.</p>"},{"location":"Array/splice/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>array.splice(start, deleteCount, item1, item2, ..., itemN)\n</code></pre> <ul> <li>start : L'indice auquel commencer \u00e0 changer le tableau.</li> <li>deleteCount (optionnel) : Le nombre d'\u00e9l\u00e9ments \u00e0 supprimer \u00e0 partir de l'indice <code>start</code>.</li> <li>item1, item2, ..., itemN (optionnels) : Les \u00e9l\u00e9ments \u00e0 ajouter au tableau \u00e0 partir de l'indice <code>start</code>.</li> </ul>"},{"location":"Array/splice/#fonctionnement","title":"Fonctionnement :","text":"<ol> <li>Suppression d'\u00c9l\u00e9ments :</li> <li>Si <code>deleteCount</code> est sp\u00e9cifi\u00e9 et non nul, <code>splice()</code> supprime le nombre d'\u00e9l\u00e9ments indiqu\u00e9 \u00e0 partir de l'indice <code>start</code>.</li> <li> <p>Exemple :      <pre><code>let fruits = [\"pomme\", \"banane\", \"cerise\", \"datte\"];\nfruits.splice(1, 2); // Supprime \"banane\" et \"cerise\"\n</code></pre></p> </li> <li> <p>Ajout d'\u00c9l\u00e9ments :</p> </li> <li>Si des \u00e9l\u00e9ments suppl\u00e9mentaires (<code>item1</code>, <code>item2</code>, ..., <code>itemN</code>) sont fournis, ils sont ajout\u00e9s au tableau \u00e0 partir de l'indice <code>start</code>.</li> <li> <p>Exemple :      <pre><code>let fruits = [\"pomme\", \"banane\"];\nfruits.splice(1, 0, \"cerise\", \"datte\"); // Ajoute \"cerise\" et \"datte\" apr\u00e8s \"pomme\"\n</code></pre></p> </li> <li> <p>Remplacement d'\u00c9l\u00e9ments :</p> </li> <li><code>splice()</code> peut \u00e9galement \u00eatre utilis\u00e9 pour remplacer des \u00e9l\u00e9ments, en supprimant certains \u00e9l\u00e9ments et en ajoutant de nouveaux \u00e9l\u00e9ments \u00e0 leur place.</li> <li>Exemple :      <pre><code>let fruits = [\"pomme\", \"banane\", \"cerise\"];\nfruits.splice(1, 1, \"datte\"); // Remplace \"banane\" par \"datte\"\n</code></pre></li> </ol>"},{"location":"Array/splice/#retour-de-la-fonction","title":"Retour de la Fonction :","text":"<ul> <li><code>splice()</code> renvoie un tableau contenant les \u00e9l\u00e9ments supprim\u00e9s, qui peut \u00eatre vide si aucun \u00e9l\u00e9ment n'est supprim\u00e9.</li> <li>Le tableau original est modifi\u00e9.</li> </ul>"},{"location":"Array/splice/#points-importants","title":"Points Importants :","text":"<ul> <li><code>splice()</code> est une m\u00e9thode puissante pour manipuler des tableaux car elle peut effectuer trois op\u00e9rations (suppression, insertion et remplacement) en une seule m\u00e9thode.</li> <li>Elle modifie le tableau original, ce qui est un aspect important \u00e0 consid\u00e9rer pour \u00e9viter des effets secondaires ind\u00e9sirables.</li> <li>Les indices n\u00e9gatifs peuvent \u00eatre utilis\u00e9s pour <code>start</code>, ce qui signifie que le comptage se fait \u00e0 partir de la fin du tableau. Par exemple, <code>splice(-2, 1)</code> supprimerait l'avant-dernier \u00e9l\u00e9ment du tableau.</li> </ul>"},{"location":"Array/splice/#1-suppression-delements","title":"1. Suppression d'\u00c9l\u00e9ments :","text":"<ul> <li>Enlever des \u00e9l\u00e9ments sp\u00e9cifiques d'un tableau : <pre><code>let numbers = [1, 2, 3, 4, 5];\nnumbers.splice(2, 1); // Supprime \"3\", numbers devient [1, 2, 4, 5]\n</code></pre></li> </ul>"},{"location":"Array/splice/#2-ajout-delements","title":"2. Ajout d'\u00c9l\u00e9ments :","text":"<ul> <li>Ins\u00e9rer des \u00e9l\u00e9ments \u00e0 une position sp\u00e9cifique dans un tableau : <pre><code>let fruits = [\"pomme\", \"banane\"];\nfruits.splice(1, 0, \"orange\"); // Ins\u00e8re \"orange\" \u00e0 l'indice 1, fruits devient [\"pomme\", \"orange\", \"banane\"]\n</code></pre></li> </ul>"},{"location":"Array/splice/#3-remplacement-delements","title":"3. Remplacement d'\u00c9l\u00e9ments :","text":"<ul> <li>Remplacer un ou plusieurs \u00e9l\u00e9ments : <pre><code>let months = [\"Jan\", \"March\", \"April\"];\nmonths.splice(1, 1, \"Feb\"); // Remplace \"March\" par \"Feb\", months devient [\"Jan\", \"Feb\", \"April\"]\n</code></pre></li> </ul>"},{"location":"Array/splice/#4-suppression-et-ajout-simultanes","title":"4. Suppression et Ajout Simultan\u00e9s :","text":"<ul> <li>Supprimer des \u00e9l\u00e9ments et en ajouter de nouveaux simultan\u00e9ment : <pre><code>let numbers = [1, 2, 4, 5];\nnumbers.splice(2, 1, 3); // Supprime \"4\" et ins\u00e8re \"3\", numbers devient [1, 2, 3, 5]\n</code></pre></li> </ul>"},{"location":"Array/splice/#5-suppression-sans-ajout","title":"5. Suppression sans Ajout :","text":"<ul> <li>Supprimer des \u00e9l\u00e9ments sans en ins\u00e9rer de nouveaux : <pre><code>let letters = ['a', 'b', 'c', 'd', 'e'];\nletters.splice(2, 2); // Supprime \"c\" et \"d\", letters devient ['a', 'b', 'e']\n</code></pre></li> </ul>"},{"location":"Array/splice/#6-utilisation-dindices-negatifs","title":"6. Utilisation d'Indices N\u00e9gatifs :","text":"<ul> <li>Utiliser des indices n\u00e9gatifs pour compter \u00e0 partir de la fin du tableau : <pre><code>let numbers = [1, 2, 3, 4, 5];\nnumbers.splice(-2, 1); // Supprime \"4\", numbers devient [1, 2, 3, 5]\n</code></pre></li> </ul>"},{"location":"Array/splice/#7-suppression-de-tous-les-elements-a-partir-dun-indice","title":"7. Suppression de Tous les \u00c9l\u00e9ments \u00e0 Partir d'un Indice :","text":"<ul> <li>Effacer une partie du tableau \u00e0 partir d'un certain indice : <pre><code>let numbers = [1, 2, 3, 4, 5];\nnumbers.splice(3); // Supprime tous les \u00e9l\u00e9ments \u00e0 partir de l'indice 3, numbers devient [1, 2, 3]\n</code></pre></li> </ul>"},{"location":"Array/splice/#points-importants_1","title":"Points Importants :","text":"<ul> <li><code>splice()</code> modifie directement le tableau sur lequel il est appel\u00e9.</li> <li>Il peut \u00eatre utilis\u00e9 pour effectuer des modifications complexes sur un tableau avec une seule op\u00e9ration.</li> <li>La m\u00e9thode renvoie un tableau contenant les \u00e9l\u00e9ments supprim\u00e9s, ou un tableau vide si aucun \u00e9l\u00e9ment n'est supprim\u00e9.</li> </ul>"},{"location":"Array/spread/","title":"Spread","text":"<p>L'op\u00e9rateur spread (<code>...</code>) est un ajout relativement r\u00e9cent \u00e0 la syntaxe de JavaScript, introduit dans ECMAScript 2015 (ES6). Cet op\u00e9rateur permet d'\u00e9tendre des \u00e9l\u00e9ments it\u00e9rables, tels que des tableaux ou des cha\u00eenes de caract\u00e8res, en \u00e9l\u00e9ments individuels. Il peut \u00e9galement \u00eatre utilis\u00e9 pour \u00e9tendre les propri\u00e9t\u00e9s des objets. Voici quelques-unes de ses utilisations courantes :</p>"},{"location":"Array/spread/#1-dans-les-tableaux","title":"1. Dans les Tableaux","text":"<ul> <li> <p>Fusionner des Tableaux : <pre><code>let array1 = [1, 2, 3];\nlet array2 = [4, 5, 6];\nlet combinedArray = [...array1, ...array2];\n// combinedArray est [1, 2, 3, 4, 5, 6]\n</code></pre></p> </li> <li> <p>Copier un Tableau : <pre><code>let original = [1, 2, 3];\nlet copie = [...original];\n// copie est [1, 2, 3]\n</code></pre></p> </li> <li> <p>Convertir une Cha\u00eene en Tableau de Caract\u00e8res : <pre><code>let chaine = \"Bonjour\";\nlet caracteres = [...chaine];\n// caracteres est ['B', 'o', 'n', 'j', 'o', 'u', 'r']\n</code></pre></p> </li> </ul>"},{"location":"Array/spread/#2-dans-les-fonctions","title":"2. Dans les Fonctions","text":"<ul> <li>Passer des Arguments de Tableau : <pre><code>function somme(x, y, z) {\n  return x + y + z;\n}\nlet nombres = [1, 2, 3];\nsomme(...nombres); // \u00e9quivalent \u00e0 somme(1, 2, 3)\n</code></pre></li> </ul>"},{"location":"Array/spread/#3-avec-les-objets","title":"3. Avec les Objets","text":"<ul> <li>Fusionner ou Cloner des Objets : <pre><code>let obj1 = { a: 1, b: 2 };\nlet obj2 = { b: 3, c: 4 };\nlet combinedObj = { ...obj1, ...obj2 };\n// combinedObj est { a: 1, b: 3, c: 4 }\n</code></pre></li> </ul> <p>Notez que si plusieurs objets ont des propri\u00e9t\u00e9s en commun, la derni\u00e8re propri\u00e9t\u00e9 \u00e9crasera les pr\u00e9c\u00e9dentes.</p> <ul> <li>S\u00e9parer les Propri\u00e9t\u00e9s d'un Objet :   Cet usage est souvent combin\u00e9 avec la d\u00e9structuration pour exclure certaines propri\u00e9t\u00e9s.   <pre><code>let { a, ...rest } = { a: 1, b: 2, c: 3 };\n// a est 1, rest est { b: 2, c: 3 }\n</code></pre></li> </ul>"},{"location":"Array/spread/#caracteristiques-importantes","title":"Caract\u00e9ristiques Importantes","text":"<ul> <li>L'op\u00e9rateur spread ne fait qu'une copie superficielle. Pour les objets imbriqu\u00e9s, les r\u00e9f\u00e9rences d'origine sont conserv\u00e9es.</li> <li>Il est souvent utilis\u00e9 pour \u00e9viter les effets secondaires en manipulant les donn\u00e9es, car il permet de travailler sur des copies plut\u00f4t que sur les donn\u00e9es originales.</li> </ul> <p>L'op\u00e9rateur spread est un outil puissant qui rend certaines op\u00e9rations en JavaScript plus concises et plus lisibles. Il est largement utilis\u00e9 dans les op\u00e9rations sur les tableaux et les objets, en particulier dans les paradigmes de programmation fonctionnelle et r\u00e9active.</p>"},{"location":"Array/tri_fusion/","title":"Tri fusion","text":"<p>Le tri par fusion (ou merge sort) est un algorithme de tri efficace et comparatif, bas\u00e9 sur la m\u00e9thode de diviser pour r\u00e9gner. Voici une description concr\u00e8te de son fonctionnement :</p>"},{"location":"Array/tri_fusion/#principe-de-base","title":"Principe de Base :","text":"<ol> <li> <p>Diviser : L'algorithme divise r\u00e9cursivement le tableau en deux moiti\u00e9s (gauche et droite) jusqu'\u00e0 ce que chaque sous-tableau contienne un seul \u00e9l\u00e9ment (ou aucun \u00e9l\u00e9ment, dans le cas d'un tableau vide).</p> </li> <li> <p>Conqu\u00e9rir : Ensuite, il trie et fusionne ces sous-tableaux pour former un nouveau tableau tri\u00e9. Cette \u00e9tape de fusion est la cl\u00e9 de l'algorithme.</p> </li> <li> <p>Combiner : Finalement, il combine ces tableaux tri\u00e9s pour produire le tableau tri\u00e9 final.</p> </li> </ol>"},{"location":"Array/tri_fusion/#fonctionnement-detaille","title":"Fonctionnement D\u00e9taill\u00e9 :","text":"<ol> <li>Division du Tableau :</li> <li>L'algorithme commence par diviser le tableau en deux parties \u00e9gales (ou presque \u00e9gales) en calculant l'indice du milieu.</li> <li> <p>Cette \u00e9tape de division se poursuit de mani\u00e8re r\u00e9cursive sur chaque sous-tableau jusqu'\u00e0 ce que chaque sous-tableau ne contienne qu'un seul \u00e9l\u00e9ment ou soit vide.</p> </li> <li> <p>Fusion et Tri :</p> </li> <li>L'\u00e9tape de fusion commence lorsque l'algorithme commence \u00e0 remonter dans l'arbre de r\u00e9cursion.</li> <li>Pendant la fusion, les \u00e9l\u00e9ments des deux sous-tableaux sont compar\u00e9s et plac\u00e9s dans l'ordre dans un nouveau tableau.</li> <li> <p>Cette \u00e9tape est cruciale car c'est l\u00e0 que le tri se produit r\u00e9ellement. Les sous-tableaux plus petits et tri\u00e9s sont fusionn\u00e9s en tableaux plus grands et tri\u00e9s.</p> </li> <li> <p>Construction du Tableau Tri\u00e9 :</p> </li> <li>L'algorithme remonte l'arbre de r\u00e9cursion, fusionnant et triant progressivement les sous-tableaux en plus grands, jusqu'\u00e0 ce que le tableau entier soit \u00e0 nouveau assembl\u00e9 et enti\u00e8rement tri\u00e9.</li> </ol>"},{"location":"Array/tri_fusion/#avantages-du-tri-par-fusion","title":"Avantages du Tri par Fusion :","text":"<ul> <li>Stabilit\u00e9 : Le tri par fusion est un algorithme de tri stable, ce qui signifie qu'il conserve l'ordre des \u00e9l\u00e9ments \u00e9gaux.</li> <li>Efficacit\u00e9 : Il a une complexit\u00e9 temporelle toujours garantie de O(n log n), ce qui le rend efficace pour de grands ensembles de donn\u00e9es.</li> <li>Efficace pour les Listes Li\u00e9es : Particuli\u00e8rement efficace pour trier des listes li\u00e9es.</li> </ul>"},{"location":"Array/tri_fusion/#inconvenients","title":"Inconv\u00e9nients :","text":"<ul> <li>Espace M\u00e9moire Suppl\u00e9mentaire : Contrairement \u00e0 certains autres algorithmes de tri (comme le tri rapide), le tri par fusion n\u00e9cessite un espace m\u00e9moire suppl\u00e9mentaire pour les sous-tableaux temporaires lors de la fusion.</li> <li>Moins Efficace pour de Petits Ensembles de Donn\u00e9es : Pour de petits ensembles de donn\u00e9es, des algorithmes plus simples comme le tri par insertion peuvent \u00eatre plus rapides.</li> </ul>"},{"location":"Array/tri_fusion/#utilisation","title":"Utilisation :","text":"<p>Le tri par fusion est souvent utilis\u00e9 dans des situations o\u00f9 la stabilit\u00e9 du tri est importante et o\u00f9 le co\u00fbt en espace m\u00e9moire suppl\u00e9mentaire n'est pas un probl\u00e8me majeur, comme dans le tri de grandes listes de donn\u00e9es qui ne peuvent pas \u00eatre tri\u00e9es en m\u00e9moire (par exemple, tri externe).</p> <p></p> <p></p> <p>Le tri par fusion (merge sort) est un algorithme de tri efficace qui utilise une approche diviser pour r\u00e9gner. Pour trier le tableau <code>fruits</code> sans utiliser la m\u00e9thode <code>sort</code> int\u00e9gr\u00e9e, nous allons impl\u00e9menter une fonction de tri par fusion. Voici le code en JavaScript :</p> <pre><code>function mergeSort(arr, compareFn) {\n    if (arr.length &lt;= 1) {\n        return arr;\n    }\n\n    const middle = Math.floor(arr.length / 2);\n    const left = arr.slice(0, middle);\n    const right = arr.slice(middle);\n\n    return merge(\n        mergeSort(left, compareFn),\n        mergeSort(right, compareFn),\n        compareFn\n    );\n}\n\nfunction merge(left, right, compareFn) {\n    let resultArray = [], leftIndex = 0, rightIndex = 0;\n\n    while (leftIndex &lt; left.length &amp;&amp; rightIndex &lt; right.length) {\n        if (compareFn(left[leftIndex], right[rightIndex]) &lt;= 0) {\n            resultArray.push(left[leftIndex]);\n            leftIndex++;\n        } else {\n            resultArray.push(right[rightIndex]);\n            rightIndex++;\n        }\n    }\n\n    return resultArray\n        .concat(left.slice(leftIndex))\n        .concat(right.slice(rightIndex));\n}\n\nconst fruits = ['Pomme', 'banane', 'orange', 'kiwi', 'mangue'];\n\nconst sortedFruits = mergeSort(fruits, (a, b) =&gt; a.localeCompare(b, 'fr', { sensitivity: 'base' }));\n\nconsole.log(sortedFruits);\n</code></pre>"},{"location":"Array/tri_fusion/#explication-du-code","title":"Explication du Code","text":"<ol> <li> <p>mergeSort : Cette fonction divise r\u00e9cursivement le tableau en deux moiti\u00e9s jusqu'\u00e0 ce que les sous-tableaux ne contiennent qu'un seul \u00e9l\u00e9ment ou aucun \u00e9l\u00e9ment. Elle appelle ensuite la fonction <code>merge</code> pour combiner les sous-tableaux tri\u00e9s en un seul tableau tri\u00e9.</p> </li> <li> <p>merge : Cette fonction fusionne deux sous-tableaux tri\u00e9s en un seul tableau tri\u00e9. Elle utilise la fonction <code>compareFn</code> pour comparer les \u00e9l\u00e9ments.</p> </li> <li> <p>compareFn : Une fonction de comparaison personnalis\u00e9e qui utilise <code>localeCompare</code> pour trier les cha\u00eenes de caract\u00e8res en fran\u00e7ais, en ignorant la casse et les accents.</p> </li> <li> <p>sortedFruits : Le tableau <code>fruits</code> est tri\u00e9 en utilisant <code>mergeSort</code> avec la fonction de comparaison personnalis\u00e9e.</p> </li> </ol> <p>Ce code triera le tableau <code>fruits</code> en fran\u00e7ais, en ignorant la casse et les accents, en utilisant l'algorithme de tri par fusion.</p> <p></p> <p></p> <p>Le tri par fusion (ou \"merge sort\" en anglais) est un algorithme de tri efficace qui utilise une approche \"diviser pour r\u00e9gner\". Voici une explication \u00e9tape par \u00e9tape de son fonctionnement en JavaScript, avec des exemples :</p>"},{"location":"Array/tri_fusion/#principe-de-base_1","title":"Principe de Base","text":"<ol> <li>Diviser : L'algorithme divise r\u00e9cursivement le tableau en deux moiti\u00e9s jusqu'\u00e0 ce que chaque sous-tableau ne contienne qu'un seul \u00e9l\u00e9ment.</li> <li>Conqu\u00e9rir : Il fusionne ensuite ces sous-tableaux pour obtenir un nouveau tableau tri\u00e9.</li> </ol>"},{"location":"Array/tri_fusion/#exemple-en-javascript","title":"Exemple en JavaScript","text":"<pre><code>function mergeSort(arr) {\n    if (arr.length &lt;= 1) {\n        return arr;\n    }\n\n    // Diviser le tableau en deux\n    const middle = Math.floor(arr.length / 2);\n    const left = arr.slice(0, middle);\n    const right = arr.slice(middle);\n\n    // Trier r\u00e9cursivement chaque moiti\u00e9\n    return merge(mergeSort(left), mergeSort(right));\n}\n\n// Fusionner deux tableaux tri\u00e9s\nfunction merge(left, right) {\n    let result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    // Tant qu'il y a des \u00e9l\u00e9ments dans les deux tableaux\n    while (leftIndex &lt; left.length &amp;&amp; rightIndex &lt; right.length) {\n        if (left[leftIndex] &lt; right[rightIndex]) {\n            result.push(left[leftIndex]);\n            leftIndex++;\n        } else {\n            result.push(right[rightIndex]);\n            rightIndex++;\n        }\n    }\n\n    // Concat\u00e9ner les \u00e9l\u00e9ments restants\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}\n\n// Exemple d'utilisation\nconst array = [12, 11, 13, 5, 6, 7];\nconsole.log('Tableau tri\u00e9:', mergeSort(array));\n</code></pre>"},{"location":"Array/tri_fusion/#explication-du-code_1","title":"Explication du Code","text":"<ol> <li>mergeSort(arr) : Cette fonction est la fonction principale qui impl\u00e9mente le tri par fusion.</li> <li>Si le tableau contient 0 ou 1 \u00e9l\u00e9ment, il est d\u00e9j\u00e0 tri\u00e9, donc on le retourne tel quel.</li> <li>Sinon, le tableau est divis\u00e9 en deux parties (<code>left</code> et <code>right</code>).</li> <li>Chaque partie est tri\u00e9e r\u00e9cursivement en appelant <code>mergeSort</code>.</li> <li> <p>Enfin, les deux parties tri\u00e9es sont fusionn\u00e9es en utilisant la fonction <code>merge</code>.</p> </li> <li> <p>merge(left, right) : Cette fonction fusionne deux tableaux tri\u00e9s.</p> </li> <li>On cr\u00e9e un tableau vide <code>result</code> pour stocker les \u00e9l\u00e9ments tri\u00e9s.</li> <li>Les indices <code>leftIndex</code> et <code>rightIndex</code> sont utilis\u00e9s pour parcourir les tableaux <code>left</code> et <code>right</code>.</li> <li>Dans une boucle, on compare les \u00e9l\u00e9ments des deux tableaux et on ajoute le plus petit dans <code>result</code>.</li> <li>Une fois qu'on a parcouru l'un des tableaux, on ajoute les \u00e9l\u00e9ments restants de l'autre tableau \u00e0 <code>result</code>.</li> </ol>"},{"location":"Array/tri_fusion/#complexite","title":"Complexit\u00e9","text":"<ul> <li>Temporelle : O(n log n) dans tous les cas.</li> <li>Spatiale : O(n) \u00e0 cause de l'espace suppl\u00e9mentaire n\u00e9cessaire pour le tableau <code>result</code>.</li> </ul>"},{"location":"String/indexOf/","title":"indexOf","text":"<p>Voici la traduction en fran\u00e7ais du texte :</p> <p></p>"},{"location":"String/indexOf/#javascript-methode-indexof-de-string","title":"JavaScript : M\u00e9thode indexOf() de String","text":"<p>Ce tutoriel JavaScript explique comment utiliser la m\u00e9thode de string appel\u00e9e indexOf() avec la syntaxe et des exemples.</p>"},{"location":"String/indexOf/#description","title":"Description","text":"<p>En JavaScript, indexOf() est une m\u00e9thode de string qui est utilis\u00e9e pour trouver l'emplacement d'une sous-cha\u00eene dans une cha\u00eene. \u00c9tant donn\u00e9 que la m\u00e9thode indexOf() est une m\u00e9thode de l'objet String, elle doit \u00eatre invoqu\u00e9e via une instance particuli\u00e8re de la classe String.</p>"},{"location":"String/indexOf/#syntaxe","title":"Syntaxe","text":"<p>En JavaScript, la syntaxe pour la m\u00e9thode indexOf() est :</p> <p>string.indexOf(substring [, start_position]);</p>"},{"location":"String/indexOf/#parametres-ou-arguments","title":"Param\u00e8tres ou Arguments","text":"<p>substring</p> <p>Il s'agit de la sous-cha\u00eene que vous souhaitez trouver dans string.</p> <p>start_position</p> <p>Facultatif. C'est la position dans string o\u00f9 la recherche commencera. La premi\u00e8re position dans string est 0. Si ce param\u00e8tre n'est pas fourni, la recherche d\u00e9butera au d\u00e9but de string et la cha\u00eene enti\u00e8re sera recherch\u00e9e.</p>"},{"location":"String/indexOf/#retours","title":"Retours","text":"<p>La m\u00e9thode indexOf() renvoie la position de la premi\u00e8re occurrence de substring dans string. La premi\u00e8re position dans la cha\u00eene est 0.</p> <p>Si la m\u00e9thode indexOf() ne trouve pas le substring dans string, elle renverra -1.</p>"},{"location":"String/indexOf/#note","title":"Note","text":"<ul> <li>La m\u00e9thode indexOf() effectue une recherche sensible \u00e0 la casse.</li> <li>La m\u00e9thode indexOf() ne change pas la valeur de la string originale.</li> </ul>"},{"location":"String/indexOf/#exemple","title":"Exemple","text":"<p>Voyons un exemple de comment utiliser la m\u00e9thode indexOf() en JavaScript.</p> <p>Par exemple :</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.indexOf('t'));\n</code></pre> <p>Dans cet exemple, nous avons d\u00e9clar\u00e9 une variable appel\u00e9e totn_string qui est assign\u00e9e \u00e0 la valeur de cha\u00eene 'TechOnTheNet'. Nous avons ensuite invoqu\u00e9 la m\u00e9thode indexOf() de la variable totn_string pour rechercher une substring dans totn_string.</p> <p>Nous avons \u00e9crit la sortie de la m\u00e9thode indexOf() dans la console log du navigateur web, \u00e0 des fins de d\u00e9monstration, pour montrer ce que la m\u00e9thode indexOf() renvoie.</p> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>11</p> <p>Dans cet exemple, la m\u00e9thode indexOf() a renvoy\u00e9 11 car la premi\u00e8re occurrence de 't' dans 'TechOnTheNet' se trouve \u00e0 la position 11 dans la cha\u00eene.</p>"},{"location":"String/indexOf/#specification-dun-parametre-de-position-de-depart","title":"Sp\u00e9cification d'un Param\u00e8tre de Position de D\u00e9part","text":"<p>Vous pouvez changer la position o\u00f9 la recherche commencera dans la cha\u00eene en fournissant un param\u00e8tre start_position \u00e0 la m\u00e9thode indexOf().</p> <p>Par exemple :</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.indexOf('T',4));\n</code></pre> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>6</p> <p>Dans cet exemple, nous avons d\u00e9fini le param\u00e8tre start_position \u00e0 une valeur de 4. Cela signifie que la recherche commencera \u00e0 chercher la valeur 'T' \u00e0 partir de la position 4 dans la cha\u00eene. Donc, dans ce cas, la sous-cha\u00eene 'T' est trouv\u00e9e \u00e0 la position 6 dans la cha\u00eene 'TechOnTheNet'.</p>"},{"location":"String/indexOf/#specification-de-plusieurs-caracteres-comme-la-sous-chaine","title":"Sp\u00e9cification de Plusieurs Caract\u00e8res comme la Sous-Cha\u00eene","text":"<p>Ensuite, la m\u00e9thode indexOf() peut rechercher plusieurs caract\u00e8res dans une cha\u00eene.</p> <p>Par exemple :</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.indexOf('The'));\n</code></pre> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>6</p> <p>Dans cet exemple, la m\u00e9thode indexOf() a renvoy\u00e9 6, qui est la position de 'The' dans la cha\u00eene 'TechOnTheNet'.</p> <p>Puisque la m\u00e9thode indexOf() ne peut renvoyer qu'une seule valeur, elle renverra la position du premier caract\u00e8re de la substring lorsque l'occurrence est trouv\u00e9e, m\u00eame si la substring est compos\u00e9e de plusieurs caract\u00e8res.</p>"},{"location":"String/indexOf/#aucune-occurrence-trouvee","title":"Aucune Occurrence Trouv\u00e9e","text":"<p>Enfin, la m\u00e9thode indexOf() renverra -1 si une occurrence de substring n'est pas trouv\u00e9e dans string.</p> <p>Par exemple :</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.indexOf('z'));\n</code></pre> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la [console</p> <p>log du navigateur web](open_console_log.php) :</p> <p>-1</p> <p>Dans cet exemple, la m\u00e9thode indexOf() a renvoy\u00e9 -1 car la sous-cha\u00eene 'z' n'est pas trouv\u00e9e dans la cha\u00eene 'TechOnTheNet'.</p>"},{"location":"String/localCompare/","title":"localCompare","text":"<p>La m\u00e9thode <code>localeCompare()</code> est une fonction de l'objet <code>String</code> en JavaScript qui est utilis\u00e9e pour comparer deux cha\u00eenes de caract\u00e8res selon la langue (locale) et les options de tri sp\u00e9cifiques. Elle est particuli\u00e8rement utile pour trier des cha\u00eenes de mani\u00e8re sensible \u00e0 la locale, en tenant compte des r\u00e8gles linguistiques sp\u00e9cifiques, telles que les accents, les c\u00e9dilles, et d'autres particularit\u00e9s linguistiques.</p>"},{"location":"String/localCompare/#syntaxe-de-base","title":"Syntaxe de base :","text":"<pre><code>str1.localeCompare(str2, locales, options);\n</code></pre> <ul> <li>str1 : La cha\u00eene de caract\u00e8res \u00e0 partir de laquelle la m\u00e9thode est appel\u00e9e.</li> <li>str2 : La cha\u00eene de caract\u00e8res avec laquelle <code>str1</code> est compar\u00e9e.</li> <li>locales (optionnel) : Un code de langue ou un tableau de codes de langue qui indique la locale \u00e0 utiliser pour la comparaison. Par exemple, <code>'en'</code> pour l'anglais, <code>'fr'</code> pour le fran\u00e7ais.</li> <li>options (optionnel) : Un objet qui sp\u00e9cifie des options de comparaison suppl\u00e9mentaires, comme la sensibilit\u00e9 aux cas (majuscules/minuscules), l'ordre de tri, etc.</li> </ul>"},{"location":"String/localCompare/#fonctionnement","title":"Fonctionnement :","text":"<ul> <li>R\u00e9sultat de la Comparaison :</li> <li><code>localeCompare()</code> renvoie un nombre :<ul> <li>N\u00e9gatif si <code>str1</code> vient avant <code>str2</code> dans l'ordre de tri.</li> <li>Z\u00e9ro si <code>str1</code> et <code>str2</code> sont consid\u00e9r\u00e9es \u00e9quivalentes dans l'ordre de tri.</li> <li>Positif si <code>str1</code> vient apr\u00e8s <code>str2</code> dans l'ordre de tri.</li> </ul> </li> <li>Cette valeur de retour permet d'utiliser <code>localeCompare()</code> pour le tri de tableaux de cha\u00eenes de caract\u00e8res.</li> </ul>"},{"location":"String/localCompare/#exemples","title":"Exemples :","text":"<ol> <li> <p>Comparaison Simple : <pre><code>let a = 'r\u00e9serv\u00e9'; // avec accent\nlet b = 'reserve'; // sans accent\n\nlet result = a.localeCompare(b);\n// result sera positif ou n\u00e9gatif selon la locale par d\u00e9faut\n</code></pre></p> </li> <li> <p>Comparaison avec Locale Sp\u00e9cifique : <pre><code>let result = a.localeCompare(b, 'fr'); // Comparaison en fran\u00e7ais\n</code></pre></p> </li> <li> <p>Comparaison avec Options : <pre><code>let options = { sensitivity: 'base' }; // Ignorer les diff\u00e9rences de cas et d'accents\nlet result = a.localeCompare(b, 'fr', options);\n</code></pre></p> </li> <li> <p>Utilisation dans le Tri de Tableaux : <pre><code>let words = ['r\u00e9serv\u00e9', 'reserve', 'R\u00e9serve'];\nwords.sort((a, b) =&gt; a.localeCompare(b, 'fr', { sensitivity: 'base' }));\n// Trie les mots de mani\u00e8re insensible aux accents et \u00e0 la casse\n</code></pre></p> </li> </ol>"},{"location":"String/localCompare/#points-importants","title":"Points Importants :","text":"<ul> <li><code>localeCompare()</code> est particuli\u00e8rement utile pour trier des cha\u00eenes de caract\u00e8res de mani\u00e8re conforme aux r\u00e8gles linguistiques, en g\u00e9rant correctement les caract\u00e8res accentu\u00e9s, les c\u00e9dilles, et autres sp\u00e9cificit\u00e9s linguistiques.</li> <li>Les performances de <code>localeCompare()</code> peuvent \u00eatre moindres que les comparaisons simples pour des op\u00e9rations de tri sur de grands ensembles de donn\u00e9es, en raison de sa complexit\u00e9 li\u00e9e \u00e0 la prise en charge des sp\u00e9cificit\u00e9s locales.</li> <li>L'utilisation des param\u00e8tres <code>locales</code> et <code>options</code> fournit une grande flexibilit\u00e9 pour personnaliser le comportement de la comparaison selon les besoins linguistiques et culturels sp\u00e9cifiques.</li> </ul> <p>La m\u00e9thode <code>localeCompare()</code> en JavaScript est une fonction puissante et polyvalente pour la comparaison de cha\u00eenes de caract\u00e8res, en tenant compte des sp\u00e9cificit\u00e9s linguistiques et culturelles. Elle peut \u00eatre utilis\u00e9e dans divers contextes pour des comparaisons sensibles \u00e0 la locale. Voici plusieurs utilisations courantes de <code>localeCompare()</code> :</p>"},{"location":"String/localCompare/#1-tri-alphabetique-sensible-a-la-locale","title":"1. Tri Alphab\u00e9tique Sensible \u00e0 la Locale :","text":"<ul> <li>Tri de cha\u00eenes selon l'ordre alphab\u00e9tique sp\u00e9cifique d'une langue : <pre><code>let words = ['\u00e4', 'a', 'z'];\nwords.sort((a, b) =&gt; a.localeCompare(b, 'de')); // Tri en allemand\n</code></pre></li> </ul>"},{"location":"String/localCompare/#2-tri-insensible-a-la-casse","title":"2. Tri Insensible \u00e0 la Casse :","text":"<ul> <li>Comparer des cha\u00eenes sans tenir compte de la casse : <pre><code>let a = 'apple';\nlet b = 'Apple';\na.localeCompare(b, undefined, { sensitivity: 'base' });\n</code></pre></li> </ul>"},{"location":"String/localCompare/#3-tri-ignorant-les-accents-et-diacritiques","title":"3. Tri Ignorant les Accents et Diacritiques :","text":"<ul> <li>Comparer des cha\u00eenes en ignorant les accents et autres marques diacritiques : <pre><code>let a = 'caf\u00e9';\nlet b = 'cafe';\na.localeCompare(b, undefined, { sensitivity: 'base' });\n</code></pre></li> </ul>"},{"location":"String/localCompare/#4-comparaison-avec-des-options-de-tri-specifiques","title":"4. Comparaison avec des Options de Tri Sp\u00e9cifiques :","text":"<ul> <li>Utilisation d'options sp\u00e9cifiques pour influencer le tri (par exemple, num\u00e9rique, sensibilit\u00e9 aux cas, etc.) : <pre><code>let filenames = ['File10', 'File2'];\nfilenames.sort((a, b) =&gt; a.localeCompare(b, undefined, { numeric: true }));\n</code></pre></li> </ul>"},{"location":"String/localCompare/#5-utilisation-avec-differentes-locales","title":"5. Utilisation avec Diff\u00e9rentes Locales :","text":"<ul> <li>Comparer des cha\u00eenes en sp\u00e9cifiant explicitement une locale : <pre><code>let a = 'r\u00e9serv\u00e9';\nlet b = 'reserve';\na.localeCompare(b, 'fr'); // Comparaison en fran\u00e7ais\n</code></pre></li> </ul>"},{"location":"String/localCompare/#6-comparaison-dans-un-contexte-multilingue","title":"6. Comparaison dans un Contexte Multilingue :","text":"<ul> <li>Comparer des cha\u00eenes dans un contexte o\u00f9 plusieurs langues sont pr\u00e9sentes : <pre><code>let names = ['\u00d6zil', '\u00d6zt\u00fcrk', 'Oezdemir'];\nnames.sort((a, b) =&gt; a.localeCompare(b, 'de-DE'));\n</code></pre></li> </ul>"},{"location":"String/localCompare/#7-comparaison-sensible-aux-accents-et-variantes","title":"7. Comparaison Sensible aux Accents et Variantes :","text":"<ul> <li>Tri en tenant compte des accents et variantes : <pre><code>let words = ['cote', 'cot\u00e9', 'c\u00f4te', 'c\u00f4t\u00e9'];\nwords.sort((a, b) =&gt; a.localeCompare(b, 'fr', { sensitivity: 'accent' }));\n</code></pre></li> </ul>"},{"location":"String/localCompare/#8-utilisation-dans-le-tri-de-tableaux","title":"8. Utilisation dans le Tri de Tableaux :","text":"<ul> <li>Utilisation de <code>localeCompare()</code> pour trier des tableaux de cha\u00eenes de caract\u00e8res en tenant compte des particularit\u00e9s locales : <pre><code>let cities = ['Warsaw', 'Paris', 'Z\u00fcrich', 'Berlin'];\ncities.sort((a, b) =&gt; a.localeCompare(b));\n</code></pre></li> </ul> <p><code>localeCompare()</code> est particuli\u00e8rement utile pour des applications multilingues et pour garantir que le tri et la comparaison des cha\u00eenes respectent les r\u00e8gles linguistiques et culturelles sp\u00e9cifiques. Elle offre une grande flexibilit\u00e9 et pr\u00e9cision dans le traitement des cha\u00eenes de caract\u00e8res.</p> <p></p> <p></p> <p>Pour effectuer une comparaison de cha\u00eenes de caract\u00e8res en JavaScript qui est sensible \u00e0 la casse mais pas aux accents, vous pouvez utiliser la m\u00e9thode <code>localeCompare</code> avec des options sp\u00e9cifiques. L'option <code>sensitivity</code> dans les param\u00e8tres de <code>localeCompare</code> permet de contr\u00f4ler ce comportement.</p> <p>Voici comment vous pouvez le faire :</p> <pre><code>let string1 = \"\u00e9clair\";\nlet string2 = \"Eclair\";\n\n// Compare les cha\u00eenes en \u00e9tant sensible \u00e0 la casse mais pas aux accents\nlet comparisonResult = string1.localeCompare(string2, undefined, { sensitivity: 'case', ignorePunctuation: true });\n\nconsole.log(comparisonResult); // Renvoie un nombre positif, n\u00e9gatif ou 0 selon le r\u00e9sultat de la comparaison\n</code></pre> <p>Dans cet exemple, le param\u00e8tre <code>sensitivity: 'case'</code> indique que la comparaison doit \u00eatre sensible \u00e0 la casse (donc \"a\" est diff\u00e9rent de \"A\") mais pas aux diff\u00e9rences d'accents (donc \"\u00e9\" est consid\u00e9r\u00e9 comme \u00e9quivalent \u00e0 \"e\"). L'option <code>ignorePunctuation: true</code> est utilis\u00e9e pour ignorer les diff\u00e9rences de ponctuation, ce qui peut \u00eatre utile dans certains contextes.</p> <p>Ce type de comparaison est utile dans des sc\u00e9narios o\u00f9 vous souhaitez diff\u00e9rencier les majuscules des minuscules, mais o\u00f9 les variations d'accents ne sont pas consid\u00e9r\u00e9es comme significatives.</p>"},{"location":"String/localCompare_2-en/","title":"localCompare 2 en","text":""},{"location":"String/localCompare_2-en/#javascript-string-localecompare-method","title":"JavaScript: String localeCompare() method","text":"<p>This JavaScript tutorial explains how to use the string method called localeCompare() with syntax and examples.</p>"},{"location":"String/localCompare_2-en/#description","title":"Description","text":"<p>In JavaScript, localeCompare() is a string method that is used to compare two strings and return a numeric value indicating which string comes first in the sort order based on locale. Because the localeCompare() method is a method of the String object, it must be invoked through a particular instance of the String class.</p>"},{"location":"String/localCompare_2-en/#syntax","title":"Syntax","text":"<p>In JavaScript, the syntax for the localeCompare() method is:</p> <p>string.localeCompare(compare_string [, locale [, options]]);</p>"},{"location":"String/localCompare_2-en/#parameters-or-arguments","title":"Parameters or Arguments","text":"<p>compare_string</p> <p>It is a string value that will be compared against the localeCompare() method's calling string.</p> <p>locale</p> <p>Optional. It is a BCP 47 language tag or an array of such tags that will be used to determine the sort order. A BCP 47 language tag defines a language that may contain a primary language code as well as an extension. If this parameter is not provided, the localeCompare() method will use the host environment's current locale.</p> <p>options</p> <p>Optional. The options to apply to the sort order. It can be one or more of the following:</p> Value Description caseFirst Determines how \"case\" will be handled when sorting. It can be one of the following values: upper - uppercase will be sorted first lower - lowercase will be sorted first* false - use the locale's default sorting (default) ignorePunctuation Determines whether punctuation will be ignored. It can be one of the following values: true - punctuation will be ignored when sorting false - punctuation will not be ignored when sorting (default) localeMatcher Determines the locale matching algorithm to use. It can be one of the following values: lookup best fit (default) numeric Determines whether numeric collation will be used. It can be one of the following values: true - numeric collation will be used when sorting false - numeric collation will not be used when sorting (default) sensitivity Determines whether numeric collation will be used. It can be one of the following values: base - strings that do not have the same base letters are considered unequal accent - strings that do not have the same base letters or accents are considered unequal case - strings that do not have the same base letters or case are considered unequal variant - strings that do not have the same base letters, accents or case are considered unequal (default) usage Determines whether the method will perform sorting or searching for matching string. It can be one of the following values: sort - method will perform sorting (default) search - method will search for matching strings"},{"location":"String/localCompare_2-en/#returns","title":"Returns","text":"<p>The localeCompare() method returns a negative number if the calling string appears before the compare_string in the sort order.</p> <p>The localeCompare() method returns a positive number if the calling string appears after the compare_string in the sort order.</p> <p>The localeCompare() method returns 0 if the calling string is equivalent to the compare_string and thus appears at the same position in the sort order.</p>"},{"location":"String/localCompare_2-en/#note","title":"Note","text":"<ul> <li>The localeCompare() method does not change the value of the original string.</li> <li>Depending on the browser, the localeCompare() method may return different positive or negative values when the strings are not equivalent, such as 1, 2, -1, or -2. So when using this method, be sure to test for a positive or negative value and not a specific numeric value such as -1.</li> <li>It is okay to test for a value of 0 when the calling string and compare_string are equivalent. This return value does not differ between browsers.</li> </ul>"},{"location":"String/localCompare_2-en/#example","title":"Example","text":"<p>Let's take a look at an example of how to use the localeCompare() method in JavaScript.</p> <p>For example:</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.localeCompare('abc'));\n</code></pre> <p>In this example, we have declared a variable called totn_string that is assigned the string value of 'TechOnTheNet'. We have then invoked the localeCompare() method of the totn_string variable to compare this string value to 'abc'.</p> <p>We have written the output of the localeCompare() method to the web browser console log, for demonstration purposes, to show what the localeCompare() method returns.</p> <p>The following will be output to the web browser console log:</p> <p>1</p> <p>In this example, the localeCompare() method returned a positive value of 1 because the string 'TechOnTheNet' appeared after 'abc' in the sort order.</p> <p>Depending on the browser, the localeCompare() method may return a different positive value such as 1 or 2, or any other positive value. Don't assume that it will be a return value of 1.</p>"},{"location":"String/localCompare_2-en/#specifying-a-locale-parameter","title":"Specifying a Locale Parameter","text":"<p>You can also provide a BCP 47 language tag for the locale parameter to change the sort order based on locale.</p> <p>For example:</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.localeCompare('xyz','en-US'));\n</code></pre> <p>The following will be output to the web browser console log:</p> <p>-1</p> <p>In this example, the localeCompare() method used a parameter of 'en-US' that sorted the strings using US English. The method returned a negative value of -1 because the string 'TechOnTheNet' appeared before 'xyz' using this sort order.</p> <p>Again, remember that depending on the browser, the localeCompare() method may return a different negative value such as -1 or -2, or any other negative value. Don't assume that it will be a return value of -1.</p>"},{"location":"String/localCompare_2-en/#specifying-an-option-parameter","title":"Specifying an Option Parameter","text":"<p>Next, the localeCompare() method has many options that you can specify that affects the sort order.</p> <p>For example:</p> <pre><code>var totn_string = '8';\n\nconsole.log(totn_string.localeCompare('30'));\n</code></pre> <p>The following will be output to the web browser console log:</p> <p>1</p> <p>In this example, the localeCompare() method returned 1 because the string value '8' comes after '30' using a string sort.</p> <p>However, what if we want to sort our values numerically? We can apply a numeric sort using an option parameter as follows:</p> <pre><code>var totn_string = '8';\n\nconsole.log(totn_string.localeCompare('30', 'en-US', {numeric:\"true\"}));\n</code></pre> <p>The following will be output to the web browser console log:</p> <p>-1</p> <p>Now the localeCompare() method returned -1 because the value '8' comes before '30' when sorting the values numerically.</p> <p>NEXT: match</p>"},{"location":"String/localCompare_2-fr/","title":"localCompare 2 fr","text":"<p>Voici la traduction en fran\u00e7ais du texte :</p> <p></p>"},{"location":"String/localCompare_2-fr/#javascript-methode-localecompare-de-string","title":"JavaScript : M\u00e9thode localeCompare() de String","text":"<p>Ce tutoriel JavaScript explique comment utiliser la m\u00e9thode de string appel\u00e9e localeCompare() avec la syntaxe et des exemples.</p>"},{"location":"String/localCompare_2-fr/#description","title":"Description","text":"<p>En JavaScript, localeCompare() est une m\u00e9thode de string utilis\u00e9e pour comparer deux cha\u00eenes de caract\u00e8res et retourner une valeur num\u00e9rique indiquant quelle cha\u00eene vient en premier dans l'ordre de tri bas\u00e9 sur la locale. \u00c9tant donn\u00e9 que la m\u00e9thode localeCompare() est une m\u00e9thode de l'objet String, elle doit \u00eatre invoqu\u00e9e via une instance particuli\u00e8re de la classe String.</p>"},{"location":"String/localCompare_2-fr/#syntaxe","title":"Syntaxe","text":"<p>En JavaScript, la syntaxe pour la m\u00e9thode localeCompare() est :</p> <p>string.localeCompare(compare_string [, locale [, options]]);</p>"},{"location":"String/localCompare_2-fr/#parametres-ou-arguments","title":"Param\u00e8tres ou Arguments","text":"<p>compare_string</p> <p>Il s'agit d'une valeur de cha\u00eene qui sera compar\u00e9e \u00e0 la cha\u00eene appelant la m\u00e9thode localeCompare().</p> <p>locale</p> <p>Facultatif. C'est une \u00e9tiquette de langue BCP 47 ou un tableau de telles \u00e9tiquettes qui seront utilis\u00e9es pour d\u00e9terminer l'ordre de tri. Une \u00e9tiquette de langue BCP 47 d\u00e9finit une langue qui peut contenir un code de langue principal ainsi qu'une extension. Si ce param\u00e8tre n'est pas fourni, la m\u00e9thode localeCompare() utilisera la locale actuelle de l'environnement h\u00f4te.</p> <p>options</p> <p>Facultatif. Les options \u00e0 appliquer \u00e0 l'ordre de tri. Il peut s'agir d'une ou plusieurs des valeurs suivantes :</p> Valeur Description caseFirst D\u00e9termine comment la \"casse\" sera g\u00e9r\u00e9e lors du tri. Il peut \u00eatre l'une des valeurs suivantes : upper - les majuscules seront tri\u00e9es en premier lower - les minuscules seront tri\u00e9es en premier* false - utiliser le tri par d\u00e9faut de la locale (default) ignorePunctuation D\u00e9termine si la ponctuation sera ignor\u00e9e. Il peut \u00eatre l'une des valeurs suivantes : true - la ponctuation sera ignor\u00e9e lors du tri false - la ponctuation ne sera pas ignor\u00e9e lors du tri (default) localeMatcher D\u00e9termine l'algorithme de correspondance de locale \u00e0 utiliser. Il peut \u00eatre l'une des valeurs suivantes : lookup best fit (default) numeric D\u00e9termine si le tri num\u00e9rique sera utilis\u00e9. Il peut \u00eatre l'une des valeurs suivantes : true - le tri num\u00e9rique sera utilis\u00e9 lors du tri false - le tri num\u00e9rique ne sera pas utilis\u00e9 lors du tri (default) sensitivity D\u00e9termine si le tri num\u00e9rique sera utilis\u00e9. Il peut \u00eatre l'une des valeurs suivantes : base - les cha\u00eenes qui n'ont pas les m\u00eames lettres de base sont consid\u00e9r\u00e9es comme in\u00e9gales accent - les cha\u00eenes qui n'ont pas les m\u00eames lettres de base ou accents sont consid\u00e9r\u00e9es comme in\u00e9gales case - les cha\u00eenes qui n'ont pas les m\u00eames lettres de base ou casse sont consid\u00e9r\u00e9es comme in\u00e9gales variant - les cha\u00eenes qui n'ont pas les m\u00eames lettres de base, accents ou casse sont consid\u00e9r\u00e9es comme in\u00e9gales (default) usage D\u00e9termine si la m\u00e9thode effectuera un tri ou une recherche de cha\u00eene correspondante. Il peut \u00eatre l'une des valeurs suivantes : sort - la m\u00e9thode effectuera un tri (default) search - la m\u00e9thode recherchera des cha\u00eenes correspondantes"},{"location":"String/localCompare_2-fr/#retours","title":"Retours","text":"<p>La m\u00e9thode localeCompare() renvoie un nombre n\u00e9gatif si la string appelante appara\u00eet avant la compare_string dans l'ordre de tri.</p> <p>La m\u00e9thode localeCompare() renvoie un nombre positif si la string appelante appara\u00eet apr\u00e8s la compare_string dans l'ordre de tri.</p> <p>La m\u00e9thode localeCompare() renvoie 0 si la string appelante est \u00e9quivalente \u00e0 la compare_string et appara\u00eet donc \u00e0 la m\u00eame position dans l'ordre de tri.</p>"},{"location":"String/localCompare_2-fr/#note","title":"Note","text":"<ul> <li>La m\u00e9thode localeCompare()</li> </ul> <p>ne change pas la valeur de la string originale. * Selon le navigateur, la m\u00e9thode localeCompare() peut retourner diff\u00e9rentes valeurs positives ou n\u00e9gatives lorsque les cha\u00eenes ne sont pas \u00e9quivalentes, telles que 1, 2, -1 ou -2. Donc, lors de l'utilisation de cette m\u00e9thode, assurez-vous de tester une valeur positive ou n\u00e9gative et non une valeur num\u00e9rique sp\u00e9cifique comme -1. * Il est acceptable de tester une valeur de 0 lorsque la string appelante et la compare_string sont \u00e9quivalentes. Cette valeur de retour ne diff\u00e8re pas entre les navigateurs.</p>"},{"location":"String/localCompare_2-fr/#exemple","title":"Exemple","text":"<p>Voyons un exemple de comment utiliser la m\u00e9thode localeCompare() en JavaScript.</p> <p>Par exemple :</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.localeCompare('abc'));\n</code></pre> <p>Dans cet exemple, nous avons d\u00e9clar\u00e9 une variable appel\u00e9e totn_string qui est assign\u00e9e \u00e0 la valeur de cha\u00eene 'TechOnTheNet'. Nous avons ensuite invoqu\u00e9 la m\u00e9thode localeCompare() de la variable totn_string pour comparer cette valeur de cha\u00eene \u00e0 'abc'.</p> <p>Nous avons \u00e9crit la sortie de la m\u00e9thode localeCompare() dans la console log du navigateur web, \u00e0 des fins de d\u00e9monstration, pour montrer ce que la m\u00e9thode localeCompare() renvoie.</p> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>1</p> <p>Dans cet exemple, la m\u00e9thode localeCompare() a renvoy\u00e9 une valeur positive de 1 car la cha\u00eene 'TechOnTheNet' apparaissait apr\u00e8s 'abc' dans l'ordre de tri.</p> <p>Selon le navigateur, la m\u00e9thode localeCompare() peut renvoyer une valeur positive diff\u00e9rente comme 1 ou 2, ou toute autre valeur positive. Ne supposez pas qu'il s'agira d'une valeur de retour de 1.</p>"},{"location":"String/localCompare_2-fr/#specification-dun-parametre-de-locale","title":"Sp\u00e9cification d'un Param\u00e8tre de Locale","text":"<p>Vous pouvez \u00e9galement fournir une \u00e9tiquette de langue BCP 47 pour le param\u00e8tre locale afin de changer l'ordre de tri en fonction de la locale.</p> <p>Par exemple :</p> <pre><code>var totn_string = 'TechOnTheNet';\n\nconsole.log(totn_string.localeCompare('xyz','en-US'));\n</code></pre> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>-1</p> <p>Dans cet exemple, la m\u00e9thode localeCompare() a utilis\u00e9 un param\u00e8tre de 'en-US' qui a tri\u00e9 les cha\u00eenes en utilisant l'anglais am\u00e9ricain. La m\u00e9thode a renvoy\u00e9 une valeur n\u00e9gative de -1 car la cha\u00eene 'TechOnTheNet' apparaissait avant 'xyz' en utilisant cet ordre de tri.</p> <p>Encore une fois, rappelez-vous que selon le navigateur, la m\u00e9thode localeCompare() peut renvoyer une valeur n\u00e9gative diff\u00e9rente comme -1 ou -2, ou toute autre valeur n\u00e9gative. Ne supposez pas qu'il s'agira d'une valeur de retour de -1.</p>"},{"location":"String/localCompare_2-fr/#specification-dun-parametre-doption","title":"Sp\u00e9cification d'un Param\u00e8tre d'Option","text":"<p>Ensuite, la m\u00e9thode localeCompare() a de nombreuses options que vous pouvez sp\u00e9cifier qui affectent l'ordre de tri.</p> <p>Par exemple :</p> <pre><code>var totn_string = '8';\n\nconsole.log(totn_string.localeCompare('30'));\n</code></pre> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>1</p> <p>Dans cet exemple, la m\u00e9thode localeCompare() a renvoy\u00e9 1 car la valeur de cha\u00eene '8' vient apr\u00e8s '30' en utilisant un tri de cha\u00eenes.</p> <p>Cependant, que faire si nous voulons trier nos valeurs num\u00e9riquement ? Nous pouvons appliquer un tri num\u00e9rique en utilisant un param\u00e8tre d'option comme suit :</p> <pre><code>var totn_string = '8';\n\nconsole.log(totn_string.localeCompare('30', 'en-US', {numeric:\"true\"}));\n</code></pre> <p>Le r\u00e9sultat suivant sera affich\u00e9 dans la console log du navigateur web :</p> <p>-1</p> <p>Maintenant, la m\u00e9thode localeCompare() a renvoy\u00e9 -1 car la valeur '8' vient avant '30' lors du tri des valeurs num\u00e9riquement.</p>"},{"location":"a-trier/Infinity/","title":"Infinity","text":"<p><code>-Infinity</code> en JavaScript repr\u00e9sente une valeur num\u00e9rique qui est inf\u00e9rieure \u00e0 toutes les autres valeurs num\u00e9riques. En termes math\u00e9matiques, c'est l'\u00e9quivalent de l'infini n\u00e9gatif. Voici quelques points cl\u00e9s pour comprendre <code>-Infinity</code> :</p> <ol> <li>D\u00e9finition :</li> <li> <p><code>-Infinity</code> est une propri\u00e9t\u00e9 globale qui repr\u00e9sente une valeur inf\u00e9rieure \u00e0 la limite la plus basse des nombres repr\u00e9sentables en JavaScript.</p> </li> <li> <p>Utilisation :</p> </li> <li> <p>Elle est souvent utilis\u00e9e dans des calculs qui n\u00e9cessitent une initialisation avec une valeur extr\u00eamement basse, par exemple, lors de la recherche de la valeur maximale dans un tableau de nombres. En commen\u00e7ant avec <code>-Infinity</code>, n'importe quel autre nombre rencontr\u00e9 sera plus grand.</p> </li> <li> <p>Comparaison :</p> </li> <li>Tout nombre compar\u00e9 \u00e0 <code>-Infinity</code> sera plus grand, sauf <code>-Infinity</code> lui-m\u00eame.</li> <li> <p>Par exemple, <code>(-Infinity &lt; 0)</code> est <code>true</code> et <code>(-Infinity &lt; -1000000)</code> est \u00e9galement <code>true</code>.</p> </li> <li> <p>Arithm\u00e9tique :</p> </li> <li> <p>Des op\u00e9rations math\u00e9matiques impliquant <code>-Infinity</code> suivront les r\u00e8gles normales de l'arithm\u00e9tique infinie. Par exemple, <code>(-Infinity + 1)</code> est toujours <code>-Infinity</code>.</p> </li> <li> <p>Type :</p> </li> <li> <p>Le type de <code>-Infinity</code>, selon l'op\u00e9rateur <code>typeof</code>, est <code>'number'</code>. Cela signifie que <code>-Infinity</code> est consid\u00e9r\u00e9 comme un nombre en JavaScript, bien qu'il repr\u00e9sente une notion math\u00e9matique abstraite.</p> </li> <li> <p>Overflow et Underflow :</p> </li> <li> <p><code>-Infinity</code> peut \u00e9galement r\u00e9sulter d'un underflow, o\u00f9 une op\u00e9ration math\u00e9matique aboutit \u00e0 un nombre plus petit que ce qui peut \u00eatre repr\u00e9sent\u00e9.</p> </li> <li> <p>JSON :</p> </li> <li> <p>Si vous encodez <code>-Infinity</code> en JSON en utilisant <code>JSON.stringify()</code>, il sera converti en <code>null</code>, car <code>Infinity</code> et <code>-Infinity</code> ne sont pas valides en JSON.</p> </li> <li> <p>V\u00e9rification :</p> </li> <li>Pour v\u00e9rifier si une variable est <code>-Infinity</code>, utilisez l'\u00e9galit\u00e9 (<code>value === -Infinity</code>).</li> </ol> <pre><code>let x = -1 / 0; // R\u00e9sultat en -Infinity\nconsole.log(x === -Infinity); // true\n</code></pre> <p><code>-Infinity</code> est donc un concept important en JavaScript, surtout lors de la manipulation de calculs math\u00e9matiques et de comparaisons.</p>"},{"location":"a-trier/async_await/","title":"async et await","text":"<p><code>async</code> et <code>await</code> sont des mots-cl\u00e9s introduits dans ECMAScript 2017 (ES8) pour simplifier l'\u00e9criture de code asynchrone en JavaScript, le rendant plus lisible et plus facile \u00e0 comprendre par rapport \u00e0 l'utilisation des callbacks et des Promises. Ces mots-cl\u00e9s permettent d'\u00e9crire des fonctions asynchrones qui semblent se comporter de mani\u00e8re synchrone.</p> <ul> <li>async et await</li> <li>Documentation<ul> <li><code>async</code></li> <li><code>await</code></li> <li>Gestion des erreurs</li> <li>Utilisation dans les boucles</li> <li>Boucles S\u00e9quentielles</li> <li>Boucles Parall\u00e8les</li> <li><code>async</code>/<code>await</code> avec des fonctions imm\u00e9diatement invoqu\u00e9es</li> <li>Bonnes pratiques</li> <li>Points cl\u00e9s</li> </ul> </li> <li>Exemples<ul> <li>1. R\u00e9cup\u00e9ration de Donn\u00e9es Asynchrones</li> <li>2. Attente de Plusieurs Promesses en Parall\u00e8le</li> <li>3. Gestion des Erreurs</li> <li>4. Cha\u00eenage de Promesses</li> <li>5. Boucles Asynchrones</li> <li>6. Fonctions Asynchrones Imm\u00e9diatement Invoqu\u00e9es (IIFE)</li> <li>7. Utilisation avec des APIs Modernes</li> </ul> </li> </ul>"},{"location":"a-trier/async_await/#documentation","title":"Documentation","text":""},{"location":"a-trier/async_await/#async","title":"<code>async</code>","text":"<p>Le mot-cl\u00e9 <code>async</code> est utilis\u00e9 pour d\u00e9clarer une fonction asynchrone, qui retourne implicitement une <code>Promise</code>. Lorsqu'une fonction est d\u00e9clar\u00e9e avec <code>async</code>, elle enveloppe son r\u00e9sultat dans une <code>Promise</code>. Si la fonction renvoie une valeur, la promise sera r\u00e9solue avec cette valeur. Si la fonction l\u00e8ve une exception, la promise sera rejet\u00e9e avec cette erreur.</p> <p>Syntaxe:</p> <pre><code>async function nomDeLaFonction() {\n    // Code asynchrone ici\n}\n</code></pre> <p>Exemple:</p> <pre><code>async function chargerDonnees() {\n    return \"Donn\u00e9es charg\u00e9es\";\n}\n\nchargerDonnees().then(console.log); // Affiche: Donn\u00e9es charg\u00e9es\n</code></pre> <p>Dans cet exemple, <code>chargerDonnees</code> est une fonction asynchrone qui retourne une cha\u00eene de caract\u00e8res. La fonction retourne une <code>Promise</code> qui est r\u00e9solue avec la valeur <code>\"Donn\u00e9es charg\u00e9es\"</code>.</p>"},{"location":"a-trier/async_await/#await","title":"<code>await</code>","text":"<p>Le mot-cl\u00e9 <code>await</code> est utilis\u00e9 pour attendre la r\u00e9solution d'une <code>Promise</code>. Il ne peut \u00eatre utilis\u00e9 qu'\u00e0 l'int\u00e9rieur d'une fonction <code>async</code>. Lorsqu'il est utilis\u00e9, l'ex\u00e9cution de la fonction est mise en pause jusqu'\u00e0 ce que la <code>Promise</code> soit r\u00e9solue ou rejet\u00e9e.</p> <p>Syntaxe:</p> <pre><code>let valeur = await unePromise;\n</code></pre> <p>Exemple:</p> <pre><code>async function afficherDonnees() {\n    let donnees = await chargerDonnees(); // Attend que la promise soit r\u00e9solue\n    console.log(donnees); // Affiche: Donn\u00e9es charg\u00e9es\n}\n\nafficherDonnees();\n</code></pre> <p>Dans cet exemple, la fonction <code>afficherDonnees</code> attend que <code>chargerDonnees</code> soit termin\u00e9e et que la <code>Promise</code> soit r\u00e9solue avant de continuer son ex\u00e9cution.</p>"},{"location":"a-trier/async_await/#gestion-des-erreurs","title":"Gestion des erreurs","text":"<p>Les erreurs dans les fonctions asynchrones peuvent \u00eatre g\u00e9r\u00e9es en utilisant <code>try...catch</code> autour des op\u00e9rations <code>await</code>.</p> <p><code>try...catch</code> permet de g\u00e9rer les erreurs dans les fonctions asynchrones de mani\u00e8re synchrone.</p> <p>Exemple:</p> <pre><code>async function chargerEtAfficherDonnees() {\n    try {\n        let donnees = await chargerDonnees();\n        console.log(donnees);\n    } catch (erreur) {\n        console.error(\"Erreur lors du chargement des donn\u00e9es\", erreur);\n    }\n}\n</code></pre> <p>Exemple:</p> <pre><code>async function chargerDonneesAvecGestionDesErreurs() {\n    try {\n        const donnees = await chargerDonnees();\n        console.log(donnees);\n    } catch (erreur) {\n        console.error(\"Une erreur est survenue\", erreur);\n    } finally {\n        console.log(\"Ex\u00e9cut\u00e9 apr\u00e8s le try/catch, succ\u00e8s ou \u00e9chec\");\n    }\n}\n</code></pre>"},{"location":"a-trier/async_await/#utilisation-dans-les-boucles","title":"Utilisation dans les boucles","text":"<p>L'utilisation de <code>await</code> dans les boucles permet de g\u00e9rer des s\u00e9quences d'op\u00e9rations asynchrones de mani\u00e8re efficace. Cependant, il est crucial de comprendre comment combiner <code>async</code>/<code>await</code> avec des boucles pour contr\u00f4ler le comportement asynchrone s\u00e9quentiel ou parall\u00e8le.</p>"},{"location":"a-trier/async_await/#boucles-sequentielles","title":"Boucles S\u00e9quentielles","text":"<p>Pour ex\u00e9cuter des t\u00e2ches asynchrones de mani\u00e8re s\u00e9quentielle dans une boucle, utilisez <code>await</code> \u00e0 l'int\u00e9rieur d'une boucle <code>for</code>, <code>for...of</code> ou <code>while</code>.</p> <p>Exemple:</p> <pre><code>async function traiterElementsSequentiellement(elements) {\n    for (const element of elements) {\n        await traiterElement(element);\n    }\n}\n</code></pre> <p>Dans cet exemple, chaque appel \u00e0 <code>traiterElement</code> doit \u00eatre termin\u00e9 avant que le prochain puisse commencer. Cela est utile lorsque chaque it\u00e9ration d\u00e9pend du r\u00e9sultat de la pr\u00e9c\u00e9dente.</p>"},{"location":"a-trier/async_await/#boucles-paralleles","title":"Boucles Parall\u00e8les","text":"<p>Pour lancer plusieurs t\u00e2ches asynchrones en parall\u00e8le et attendre qu'elles soient toutes termin\u00e9es, vous pouvez combiner <code>await</code> avec <code>Promise.all</code>.</p> <p>Exemple:</p> <pre><code>async function traiterElementsEnParallele(elements) {\n    const promesses = elements.map(element =&gt; traiterElement(element));\n    await Promise.all(promesses);\n}\n</code></pre> <p>Dans cet exemple, <code>Promise.all</code> est utilis\u00e9 pour attendre que toutes les promesses dans le tableau <code>promesses</code> soient r\u00e9solues. Cela permet d'ex\u00e9cuter les t\u00e2ches asynchrones en parall\u00e8le, ce qui peut am\u00e9liorer consid\u00e9rablement la performance pour des op\u00e9rations ind\u00e9pendantes.</p>"},{"location":"a-trier/async_await/#asyncawait-avec-des-fonctions-immediatement-invoquees","title":"<code>async</code>/<code>await</code> avec des fonctions imm\u00e9diatement invoqu\u00e9es","text":"<p>Vous pouvez utiliser une IIFE (Immediately Invoked Function Expression) asynchrone pour ex\u00e9cuter du code asynchrone imm\u00e9diatement, sans avoir besoin de d\u00e9finir une fonction asynchrone s\u00e9par\u00e9e.</p> <p>Exemple:</p> <pre><code>(async () =&gt; {\n    try {\n        const resultat = await uneOperationAsynchrone();\n        console.log(resultat);\n    } catch (erreur) {\n        console.error(erreur);\n    }\n})();\n</code></pre>"},{"location":"a-trier/async_await/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ul> <li>Ne pas oublier <code>await</code> : Omettre <code>await</code> devant une op\u00e9ration asynchrone peut conduire \u00e0 des bugs subtils, car le code ex\u00e9cutera la suite sans attendre la r\u00e9solution de la promesse.</li> <li>Utiliser <code>Promise.all</code> pour la parall\u00e9lisation : Lorsque vous avez plusieurs t\u00e2ches asynchrones ind\u00e9pendantes, <code>Promise.all</code> permet d'ex\u00e9cuter ces t\u00e2ches en parall\u00e8le, am\u00e9liorant la performance.</li> <li>G\u00e9rer les erreurs avec <code>try...catch</code> : La gestion des erreurs est cruciale dans les fonctions asynchrones pour \u00e9viter que les exceptions non captur\u00e9es interrompent l'ex\u00e9cution de votre programme.</li> </ul> <p>La compr\u00e9hension profonde d'<code>async</code> et <code>await</code> vous permettra de g\u00e9rer efficacement l'asynchronisme dans vos applications JavaScript, en rendant votre code plus lisible, plus robuste et plus facile \u00e0 maintenir.</p>"},{"location":"a-trier/async_await/#points-cles","title":"Points cl\u00e9s","text":"<ul> <li>Les fonctions <code>async</code> rendent le code asynchrone plus lisible et facile \u00e0 maintenir.</li> <li>Le mot-cl\u00e9 <code>await</code> permet d'attendre la r\u00e9solution d'une <code>Promise</code> de mani\u00e8re \u00e9l\u00e9gante, en suspendant l'ex\u00e9cution de la fonction asynchrone jusqu'\u00e0 ce que la <code>Promise</code> soit r\u00e9solue.</li> <li>L'utilisation de <code>async</code> et <code>await</code> permet une gestion des erreurs plus intuitive gr\u00e2ce \u00e0 <code>try...catch</code>.</li> <li>Bien que <code>async</code> et <code>await</code> simplifient l'\u00e9criture de code asynchrone, il est important de comprendre comment fonctionnent les <code>Promises</code> puisqu'elles en sont la base.</li> </ul> <p><code>async</code> et <code>await</code> am\u00e9liorent significativement la lisibilit\u00e9 du code asynchrone en JavaScript, permettant aux d\u00e9veloppeurs de g\u00e9rer des op\u00e9rations asynchrones de mani\u00e8re plus efficace et plus claire.</p>"},{"location":"a-trier/async_await/#exemples","title":"Exemples","text":""},{"location":"a-trier/async_await/#1-recuperation-de-donnees-asynchrones","title":"1. R\u00e9cup\u00e9ration de Donn\u00e9es Asynchrones","text":"<p>Utilisation : Charger des donn\u00e9es depuis une source externe, comme une API.</p> <p>Exemple :</p> <pre><code>async function chargerUtilisateurs() {\n    const reponse = await fetch('https://api.example.com/utilisateurs');\n    const utilisateurs = await reponse.json();\n    console.log(utilisateurs);\n}\n</code></pre>"},{"location":"a-trier/async_await/#2-attente-de-plusieurs-promesses-en-parallele","title":"2. Attente de Plusieurs Promesses en Parall\u00e8le","text":"<p>Utilisation : Ex\u00e9cuter plusieurs t\u00e2ches asynchrones en parall\u00e8le et attendre que toutes soient termin\u00e9es.</p> <p>Exemple :</p> <pre><code>async function chargerDonneesEnParallele() {\n    const [utilisateurs, articles] = await Promise.all([\n        fetch('https://api.example.com/utilisateurs').then(r =&gt; r.json()),\n        fetch('https://api.example.com/articles').then(r =&gt; r.json())\n    ]);\n    console.log(utilisateurs, articles);\n}\n</code></pre>"},{"location":"a-trier/async_await/#3-gestion-des-erreurs","title":"3. Gestion des Erreurs","text":"<p>Utilisation : Attraper et g\u00e9rer les erreurs qui peuvent survenir dans les op\u00e9rations asynchrones.</p> <p>Exemple :</p> <pre><code>async function chargerDonneesAvecGestionDesErreurs() {\n    try {\n        const donnees = await fetch('https://api.example.com/data');\n        console.log(await donnees.json());\n    } catch (erreur) {\n        console.error(\"Erreur lors du chargement des donn\u00e9es\", erreur);\n    }\n}\n</code></pre>"},{"location":"a-trier/async_await/#4-chainage-de-promesses","title":"4. Cha\u00eenage de Promesses","text":"<p>Utilisation : Effectuer des op\u00e9rations asynchrones s\u00e9quentielles, o\u00f9 chaque op\u00e9ration d\u00e9pend du r\u00e9sultat de la pr\u00e9c\u00e9dente.</p> <p>Exemple :</p> <pre><code>async function obtenirDetailUtilisateur() {\n    const utilisateur = await fetch('https://api.example.com/utilisateur/1').then(r =&gt; r.json());\n    const profil = await fetch(`https://api.example.com/profil/${utilisateur.id}`).then(r =&gt; r.json());\n    console.log(profil);\n}\n</code></pre>"},{"location":"a-trier/async_await/#5-boucles-asynchrones","title":"5. Boucles Asynchrones","text":"<p>Utilisation : It\u00e9rer sur une collection et effectuer une op\u00e9ration asynchrone pour chaque \u00e9l\u00e9ment.</p> <p>Exemple :</p> <pre><code>async function verifierUtilisateurs(utilisateurs) {\n    for (const utilisateur of utilisateurs) {\n        const estValide = await verifierUtilisateur(utilisateur);\n        console.log(`Utilisateur: ${utilisateur}, Valide: ${estValide}`);\n    }\n}\n</code></pre>"},{"location":"a-trier/async_await/#6-fonctions-asynchrones-immediatement-invoquees-iife","title":"6. Fonctions Asynchrones Imm\u00e9diatement Invoqu\u00e9es (IIFE)","text":"<p>Utilisation : Ex\u00e9cuter imm\u00e9diatement du code asynchrone sans avoir \u00e0 d\u00e9finir une fonction externe.</p> <p>Exemple :</p> <pre><code>(async () =&gt; {\n    const donnees = await fetch('https://api.example.com/data').then(r =&gt; r.json());\n    console.log(donnees);\n})();\n</code></pre>"},{"location":"a-trier/async_await/#7-utilisation-avec-des-apis-modernes","title":"7. Utilisation avec des APIs Modernes","text":"<p>Utilisation : Interagir avec des APIs modernes qui retournent des Promises, en utilisant une syntaxe plus lisible.</p> <p>Exemple :</p> <pre><code>async function lireFichierAsynchrone(path) {\n    const contenu = await fs.promises.readFile(path, 'utf8');\n    console.log(contenu);\n}\n</code></pre> <p>Chaque exemple montre comment <code>async</code> et <code>await</code> rendent le code asynchrone plus simple \u00e0 \u00e9crire et \u00e0 comprendre, compar\u00e9 \u00e0 l'utilisation de callbacks ou de cha\u00eenes de Promises. Cette approche facilite la gestion de l'asynchronisme, rendant les op\u00e9rations complexes plus accessibles et moins sujettes aux erreurs.</p>"},{"location":"a-trier/fonctions_1/","title":"Fonctions 1","text":"<p>En JavaScript, plusieurs fonctions sont consid\u00e9r\u00e9es comme essentielles pour tout d\u00e9veloppeur web. Ces fonctions font partie du noyau de JavaScript et sont souvent utilis\u00e9es dans divers contextes de d\u00e9veloppement web. Voici une liste de certaines de ces fonctions cl\u00e9s :</p> <ol> <li>Manipulation de tableaux :</li> <li><code>Array.prototype.map()</code>: Transforme les \u00e9l\u00e9ments d'un tableau en appliquant une fonction.</li> <li><code>Array.prototype.filter()</code>: Cr\u00e9e un nouveau tableau avec tous les \u00e9l\u00e9ments qui passent un test impl\u00e9ment\u00e9 par une fonction fournie.</li> <li><code>Array.prototype.reduce()</code>: Applique une fonction qui est un \"accumulateur\" et traite chaque valeur d'un tableau (de gauche \u00e0 droite) afin de le r\u00e9duire \u00e0 une seule valeur.</li> <li><code>Array.prototype.forEach()</code>: Ex\u00e9cute une fonction donn\u00e9e sur chaque \u00e9l\u00e9ment du tableau.</li> <li> <p><code>Array.prototype.find()</code>: Retourne la valeur du premier \u00e9l\u00e9ment dans le tableau qui satisfait la fonction de test fournie.</p> </li> <li> <p>Fonctions asynchrones :</p> </li> <li><code>Promise</code>: Repr\u00e9sente une op\u00e9ration qui n'a pas encore \u00e9t\u00e9 compl\u00e9t\u00e9e, mais qui est attendue dans le futur.</li> <li> <p><code>async/await</code>: Syntaxe sp\u00e9ciale pour travailler avec des promesses de mani\u00e8re plus confortable.</p> </li> <li> <p>Manipulation de cha\u00eenes de caract\u00e8res :</p> </li> <li><code>String.prototype.includes()</code>: D\u00e9termine si une cha\u00eene de caract\u00e8res contient une sous-cha\u00eene sp\u00e9cifi\u00e9e.</li> <li><code>String.prototype.split()</code>: Divise une cha\u00eene de caract\u00e8res en un tableau de cha\u00eenes en s\u00e9parant la cha\u00eene en sous-cha\u00eenes.</li> <li> <p><code>String.prototype.replace()</code>: Retourne une nouvelle cha\u00eene avec un ou plusieurs remplacements.</p> </li> <li> <p>Fonctions temporisatrices :</p> </li> <li><code>setTimeout()</code>: D\u00e9finit une minuterie qui ex\u00e9cute une fonction ou un fragment de code apr\u00e8s que le d\u00e9lai sp\u00e9cifi\u00e9 soit \u00e9coul\u00e9.</li> <li> <p><code>setInterval()</code>: R\u00e9p\u00e8te l'ex\u00e9cution d'une fonction \u00e0 des intervalles sp\u00e9cifi\u00e9s.</p> </li> <li> <p>Contr\u00f4le de flux :</p> </li> <li><code>if...else</code>: Structure de contr\u00f4le de base pour l'ex\u00e9cution conditionnelle.</li> <li> <p><code>switch</code>: Permet d'ex\u00e9cuter diff\u00e9rents blocs de code en fonction de la valeur d'une expression.</p> </li> <li> <p>Fonctions de gestion d'erreurs :</p> </li> <li> <p><code>try...catch</code>: Permet la gestion des exceptions g\u00e9n\u00e9r\u00e9es par des erreurs de programmation.</p> </li> <li> <p>Fonctions de travail avec des objets :</p> </li> <li><code>Object.keys()</code>: Retourne un tableau contenant les noms des propri\u00e9t\u00e9s propres (non h\u00e9rit\u00e9es) d'un objet.</li> <li><code>Object.values()</code>: Retourne un tableau contenant les valeurs des propri\u00e9t\u00e9s propres d'un objet.</li> <li> <p><code>Object.entries()</code>: Retourne un tableau de paires [cl\u00e9, valeur] propres \u00e0 l'objet.</p> </li> <li> <p>Fonctions math\u00e9matiques :</p> </li> <li><code>Math.max()</code>, <code>Math.min()</code>: Retournent respectivement le plus grand et le plus petit nombre parmi les arguments.</li> <li><code>Math.random()</code>: G\u00e9n\u00e8re un nombre pseudo-al\u00e9atoire entre 0 et 1.</li> </ol> <p>Ces fonctions sont souvent la base de nombreux scripts et applications JavaScript, et leur ma\u00eetrise est essentielle pour tout d\u00e9veloppeur web.</p>"},{"location":"a-trier/fonctions_2/","title":"Fonctions 2","text":"<p>En tant que d\u00e9veloppeur web JavaScript, il est crucial de conna\u00eetre un ensemble de fonctions essentielles qui sont fr\u00e9quemment utilis\u00e9es dans le d\u00e9veloppement web. Voici une liste de ces fonctions et concepts cl\u00e9s :</p> <ol> <li>Manipulation du DOM :</li> <li><code>document.getElementById()</code></li> <li><code>document.getElementsByClassName()</code></li> <li><code>document.getElementsByTagName()</code></li> <li><code>document.querySelector()</code></li> <li><code>document.querySelectorAll()</code></li> <li><code>element.appendChild()</code></li> <li><code>element.removeChild()</code></li> <li> <p><code>element.replaceChild()</code></p> </li> <li> <p>Gestion des \u00e9v\u00e9nements :</p> </li> <li><code>addEventListener()</code></li> <li><code>removeEventListener()</code></li> <li><code>event.preventDefault()</code></li> <li> <p><code>event.stopPropagation()</code></p> </li> <li> <p>Manipulation des tableaux :</p> </li> <li><code>Array.map()</code></li> <li><code>Array.filter()</code></li> <li><code>Array.reduce()</code></li> <li><code>Array.forEach()</code></li> <li><code>Array.find()</code></li> <li><code>Array.some()</code></li> <li><code>Array.every()</code></li> <li><code>Array.concat()</code></li> <li><code>Array.splice()</code></li> <li> <p><code>Array.slice()</code></p> </li> <li> <p>Gestion des objets :</p> </li> <li><code>Object.keys()</code></li> <li><code>Object.values()</code></li> <li><code>Object.entries()</code></li> <li><code>Object.assign()</code></li> <li><code>JSON.stringify()</code></li> <li> <p><code>JSON.parse()</code></p> </li> <li> <p>Fonctions asynchrones et Promesses :</p> </li> <li><code>setTimeout()</code></li> <li><code>setInterval()</code></li> <li><code>clearTimeout()</code></li> <li><code>clearInterval()</code></li> <li><code>Promise</code></li> <li> <p><code>async/await</code></p> </li> <li> <p>Contr\u00f4le de flux :</p> </li> <li><code>if...else</code></li> <li><code>switch</code></li> <li><code>for</code>, <code>for...in</code>, <code>for...of</code></li> <li><code>while</code>, <code>do...while</code></li> <li><code>try...catch...finally</code></li> <li> <p><code>throw</code></p> </li> <li> <p>Autres fonctions et m\u00e9thodes utiles :</p> </li> <li><code>console.log()</code>, <code>console.error()</code>, <code>console.warn()</code></li> <li><code>Math.*</code> (comme <code>Math.random()</code>, <code>Math.floor()</code>)</li> <li><code>String.*</code> m\u00e9thodes (comme <code>String.includes()</code>, <code>String.replace()</code>)</li> <li><code>Array.isArray()</code></li> <li> <p><code>typeof</code>, <code>instanceof</code></p> </li> <li> <p>Fonctions natives de fetch et de requ\u00eate HTTP :</p> </li> <li><code>fetch()</code></li> <li> <p><code>XMLHttpRequest</code> (bien que moins utilis\u00e9 avec l'av\u00e8nement de <code>fetch</code>)</p> </li> <li> <p>Expressions r\u00e9guli\u00e8res :</p> </li> <li> <p><code>RegExp</code> m\u00e9thodes (comme <code>test()</code>, <code>exec()</code>)</p> </li> <li> <p>Local Storage et Session Storage :</p> <ul> <li><code>localStorage.setItem()</code>, <code>localStorage.getItem()</code></li> <li><code>sessionStorage.setItem()</code>, <code>sessionStorage.getItem()</code></li> </ul> </li> </ol> <p>Ces fonctions et concepts sont la base de nombreux scripts et applications web modernes en JavaScript. Bien s\u00fbr, la ma\u00eetrise de ces \u00e9l\u00e9ments est compl\u00e9ment\u00e9e par la compr\u00e9hension des principes fondamentaux de la programmation en JavaScript, comme les closures, le hoisting, le contexte d'ex\u00e9cution, etc.</p>"},{"location":"a-trier/lodash/","title":"Lodash","text":""},{"location":"a-trier/lodash/#quest-ce-que-lodash","title":"Qu'est-ce que Lodash ?","text":"<p>Lodash est une biblioth\u00e8que JavaScript populaire qui fournit de nombreuses fonctions utilitaires pour faciliter le travail avec des tableaux, des nombres, des objets, des cha\u00eenes de caract\u00e8res, etc. Elle est con\u00e7ue pour simplifier le code JavaScript en r\u00e9duisant la n\u00e9cessit\u00e9 de r\u00e9inventer la roue pour des t\u00e2ches communes de programmation.</p>"},{"location":"a-trier/lodash/#a-quoi-sert-lodash","title":"\u00c0 Quoi Sert Lodash ?","text":"<ol> <li>Manipulation d'Objets et de Tableaux :</li> <li> <p>Lodash offre des fonctions pour manipuler des objets et des tableaux, comme le filtrage, le tri, la cartographie, la r\u00e9duction, etc.</p> </li> <li> <p>Utilitaires pour les Fonctions :</p> </li> <li> <p>Elle fournit des utilitaires pour cr\u00e9er des fonctions curry, pour retarder l'ex\u00e9cution de fonctions, pour limiter le nombre de fois qu'une fonction peut \u00eatre appel\u00e9e, etc.</p> </li> <li> <p>Travail avec des Cha\u00eenes de Caract\u00e8res :</p> </li> <li> <p>Lodash dispose d'outils pour manipuler des cha\u00eenes, comme le d\u00e9coupage, la conversion en casse, l'\u00e9chappement de cha\u00eenes pour l'insertion dans le HTML, etc.</p> </li> <li> <p>Utilitaires Divers :</p> </li> <li>La biblioth\u00e8que inclut \u00e9galement une vari\u00e9t\u00e9 d'autres utilitaires utiles, comme la g\u00e9n\u00e9ration de nombres al\u00e9atoires, le clonage en profondeur, la v\u00e9rification des types, etc.</li> </ol>"},{"location":"a-trier/lodash/#comment-utiliser-lodash","title":"Comment Utiliser Lodash ?","text":"<ol> <li>Installation :</li> <li>Vous pouvez ajouter Lodash \u00e0 votre projet via npm :      <pre><code>npm install lodash\n</code></pre></li> <li> <p>Ou l'inclure directement dans votre fichier HTML :      <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"&gt;&lt;/script&gt;\n</code></pre></p> </li> <li> <p>Importation de Lodash dans votre Projet :</p> </li> <li>Dans un projet Node.js :      <pre><code>const _ = require('lodash');\n</code></pre></li> <li> <p>Avec ES6 modules :      <pre><code>import _ from 'lodash';\n</code></pre></p> </li> <li> <p>Utilisation des Fonctions Lodash :</p> </li> <li> <p>Une fois import\u00e9, vous pouvez utiliser les fonctions Lodash dans votre code. Par exemple, pour cloner un objet :      <pre><code>let obj = { a: 1, b: { c: 2 } };\nlet clonedObj = _.cloneDeep(obj);\n</code></pre></p> </li> <li> <p>Importation S\u00e9lective de Fonctions :</p> </li> <li>Pour r\u00e9duire la taille de votre bundle, vous pouvez importer seulement les fonctions dont vous avez besoin :      <pre><code>import cloneDeep from 'lodash/cloneDeep';\nlet clonedObj = cloneDeep(obj);\n</code></pre></li> </ol>"},{"location":"a-trier/lodash/#bonnes-pratiques","title":"Bonnes Pratiques :","text":"<ul> <li>Importation S\u00e9lective : Pour les projets de grande taille ou les applications web, il est conseill\u00e9 d'importer uniquement les fonctions n\u00e9cessaires pour r\u00e9duire la taille du bundle final.</li> <li>Documentation : Consultez la documentation de Lodash pour une liste compl\u00e8te des fonctions et de leurs utilisations.</li> <li>Compatibilit\u00e9 : Lodash est largement compatible avec diff\u00e9rents environnements JavaScript, y compris le navigateur et Node.js.</li> </ul> <p>Lodash est une biblioth\u00e8que JavaScript tr\u00e8s populaire qui fournit une multitude de fonctions utilitaires pour faciliter la programmation JavaScript, en particulier pour les op\u00e9rations sur les tableaux, les objets, les cha\u00eenes de caract\u00e8res et les fonctions. Voici une liste de ses diff\u00e9rentes utilisations :</p>"},{"location":"a-trier/lodash/#1-manipulation-de-tableaux","title":"1. Manipulation de Tableaux :","text":"<ul> <li>Filtrage et Tri : Fonctions comme <code>_.filter()</code>, <code>_.sortBy()</code>.</li> <li>Recherche : <code>_.find()</code>, <code>_.indexOf()</code>, <code>_.findLastIndex()</code>.</li> <li>Agr\u00e9gation : <code>_.reduce()</code>, <code>_.sum()</code>, <code>_.max()</code>, <code>_.min()</code>.</li> <li>Transformation : <code>_.map()</code>, <code>_.flatMap()</code>.</li> <li>Suppression de Doublons : <code>_.uniq()</code>, <code>_.uniqBy()</code>.</li> </ul>"},{"location":"a-trier/lodash/#2-manipulation-dobjets","title":"2. Manipulation d'Objets :","text":"<ul> <li>Clonage : <code>_.cloneDeep()</code>.</li> <li>Fusion : <code>_.merge()</code>, <code>_.assign()</code>.</li> <li>R\u00e9cup\u00e9ration et Mise \u00e0 Jour de Propri\u00e9t\u00e9s : <code>_.get()</code>, <code>_.set()</code>, <code>_.has()</code>, <code>_.update()</code>.</li> <li>Liste de Cl\u00e9s/Valeurs : <code>_.keys()</code>, <code>_.values()</code>.</li> </ul>"},{"location":"a-trier/lodash/#3-utilitaires-pour-les-chaines-de-caracteres","title":"3. Utilitaires pour les Cha\u00eenes de Caract\u00e8res :","text":"<ul> <li>Manipulation : <code>_.trim()</code>, <code>_.capitalize()</code>, <code>_.kebabCase()</code>, <code>_.snakeCase()</code>.</li> <li>G\u00e9n\u00e9ration : <code>_.repeat()</code>, <code>_.random()</code>.</li> <li>\u00c9chappement : <code>_.escape()</code>, <code>_.unescape()</code>.</li> </ul>"},{"location":"a-trier/lodash/#4-fonctions-et-debogage","title":"4. Fonctions et D\u00e9bogage :","text":"<ul> <li>Contr\u00f4le de Fonction : <code>_.debounce()</code>, <code>_.throttle()</code>, <code>_.once()</code>.</li> <li>Composition : <code>_.flow()</code>, <code>_.curry()</code>.</li> </ul>"},{"location":"a-trier/lodash/#5-utilitaires-divers","title":"5. Utilitaires Divers :","text":"<ul> <li>Gestion des Types : <code>_.isString()</code>, <code>_.isArray()</code>, <code>_.isObject()</code>.</li> <li>It\u00e9ration : <code>_.forEach()</code>, <code>_.mapValues()</code>.</li> <li>G\u00e9n\u00e9ration de Nombres Al\u00e9atoires : <code>_.random()</code>.</li> </ul>"},{"location":"a-trier/lodash/#6-collections-tableaux-et-objets","title":"6. Collections (Tableaux et Objets) :","text":"<ul> <li>Op\u00e9rations sur les Collections : <code>_.groupBy()</code>, <code>_.countBy()</code>, <code>_.sortBy()</code>.</li> </ul>"},{"location":"a-trier/lodash/#7-operations-logiques-et-mathematiques","title":"7. Op\u00e9rations Logiques et Math\u00e9matiques :","text":"<ul> <li>Math\u00e9matiques : <code>_.add()</code>, <code>_.subtract()</code>, <code>_.multiply()</code>, <code>_.divide()</code>.</li> <li>Comparaison : <code>_.isEqual()</code>, <code>_.gt()</code>, <code>_.lt()</code>.</li> </ul>"},{"location":"a-trier/lodash/#8-gestion-des-dates","title":"8. Gestion des Dates :","text":"<ul> <li>Op\u00e9rations sur les Dates : Bien que Lodash n'offre pas de fonctions sp\u00e9cifiques pour la manipulation de dates, elle peut \u00eatre utilis\u00e9e pour formater et comparer des timestamps.</li> </ul>"},{"location":"a-trier/lodash/#utilisation-de-lodash","title":"Utilisation de Lodash :","text":"<ul> <li>Lodash est souvent utilis\u00e9e pour simplifier des t\u00e2ches complexes, r\u00e9duire la quantit\u00e9 de code n\u00e9cessaire pour r\u00e9aliser des op\u00e9rations courantes, et augmenter la lisibilit\u00e9 et la maintenabilit\u00e9 du code.</li> </ul>"},{"location":"a-trier/lodash/#bon-a-savoir","title":"Bon \u00e0 Savoir :","text":"<ul> <li>Lodash est optimis\u00e9e pour la performance et la fiabilit\u00e9, ce qui en fait un choix populaire pour les d\u00e9veloppeurs JavaScript dans divers environnements, comme les applications Node.js, les applications front-end, et m\u00eame dans les projets bas\u00e9s sur des frameworks comme React, Angular, et Vue.js.</li> </ul> <p>Pour utiliser Lodash dans un environnement de serveur web local ans Node.jss ou un framework, vous devez d'abord inclure Lodash dans votre projet. Vous pouvez le faire en ajoutant le script Lodash \u00e0 votre fichier HTML. Ensuite, vous pourrez utiliser ses fonctions directement dans vos scripts JavaScript. Voici comment proc\u00e9der et quelques exemples d'utilisation :</p>"},{"location":"a-trier/lodash/#etape-1-inclure-lodash","title":"\u00c9tape 1: Inclure Lodash","text":"<p>Dans votre fichier HTML, ajoutez la balise <code>&lt;script&gt;</code> pour inclure Lodash. Utilisez un CDN pour obtenir la biblioth\u00e8que :</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lodash Demo&lt;/title&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"a-trier/lodash/#etape-2-ecrire-des-exemples-dutilisation-dans-scriptjs","title":"\u00c9tape 2: \u00c9crire des Exemples d'Utilisation dans <code>script.js</code>","text":"<pre><code>// Exemple 1: Utilisation de _.filter pour filtrer un tableau d'objets\nlet users = [\n    { 'user': 'barney', 'age': 36, 'active': true },\n    { 'user': 'fred',   'age': 40, 'active': false }\n];\nconsole.log(_.filter(users, (o) =&gt; o.active));\n\n// Exemple 2: Utilisation de _.sortBy pour trier des utilisateurs par \u00e2ge\nconsole.log(_.sortBy(users, ['age']));\n\n// Exemple 3: Utilisation de _.cloneDeep pour cloner un tableau d'objets\nlet clonedUsers = _.cloneDeep(users);\nconsole.log(clonedUsers);\n\n// Exemple 4: Utilisation de _.uniq pour supprimer les doublons dans un tableau\nlet numbers = [1, 2, 1, 3, 2];\nconsole.log(_.uniq(numbers));\n\n// Exemple 5: Utilisation de _.debounce (Note: Cet exemple ne fonctionnera pas dans un script statique comme ici. Il est con\u00e7u pour \u00eatre utilis\u00e9 dans un contexte o\u00f9 les \u00e9v\u00e9nements DOM sont disponibles)\n// window.addEventListener('resize', _.debounce(() =&gt; {\n//     console.log('Fen\u00eatre redimensionn\u00e9e!');\n// }, 200));\n</code></pre>"},{"location":"a-trier/lodash/#etape-3-executer-votre-serveur-web-local","title":"\u00c9tape 3: Ex\u00e9cuter votre Serveur Web Local","text":"<p>Si vous avez un serveur web local (comme Apache, Nginx, ou m\u00eame Python SimpleHTTPServer), placez votre fichier HTML et votre fichier JavaScript dans le dossier racine de votre serveur et ouvrez votre navigateur \u00e0 l'adresse de votre serveur local.</p> <p>Ces exemples montrent quelques-unes des fonctionnalit\u00e9s courantes de Lodash. Notez que pour la fonction <code>_.debounce()</code>, vous auriez besoin d'un contexte interactif, comme un navigateur avec des \u00e9v\u00e9nements DOM, pour observer son comportement.</p> <p></p> <p></p> <p>Pour utiliser Lodash dans un environnement Node.js, suivez ces \u00e9tapes :</p>"},{"location":"a-trier/lodash/#etape-1-installation-de-lodash","title":"\u00c9tape 1 : Installation de Lodash","text":"<p>Ouvrez votre terminal ou invite de commande et ex\u00e9cutez la commande suivante dans votre projet Node.js pour installer Lodash :</p> <pre><code>npm install lodash\n</code></pre>"},{"location":"a-trier/lodash/#etape-2-importer-et-utiliser-lodash-dans-votre-script-nodejs","title":"\u00c9tape 2 : Importer et Utiliser Lodash dans votre Script Node.js","text":"<p>Cr\u00e9ez un fichier JavaScript (par exemple, <code>script.js</code>) et utilisez Lodash comme suit :</p> <pre><code>// Importer Lodash\nconst _ = require('lodash');\n\n// Exemple 1: Utilisation de _.filter pour filtrer un tableau d'objets\nlet users = [\n    { 'user': 'barney', 'age': 36, 'active': true },\n    { 'user': 'fred',   'age': 40, 'active': false }\n];\nconsole.log(\"Filtered users:\", _.filter(users, (o) =&gt; o.active));\n\n// Exemple 2: Utilisation de _.sortBy pour trier des utilisateurs par \u00e2ge\nconsole.log(\"Sorted by age:\", _.sortBy(users, ['age']));\n\n// Exemple 3: Utilisation de _.cloneDeep pour cloner un tableau d'objets\nlet clonedUsers = _.cloneDeep(users);\nconsole.log(\"Cloned users:\", clonedUsers);\n\n// Exemple 4: Utilisation de _.uniq pour supprimer les doublons dans un tableau\nlet numbers = [1, 2, 1, 3, 2];\nconsole.log(\"Unique numbers:\", _.uniq(numbers));\n\n// Exemple 5: Utilisation de _.debounce\n// Note: _.debounce est une fonction qui est g\u00e9n\u00e9ralement utilis\u00e9e dans les environnements de navigateur pour limiter le taux d'ex\u00e9cution d'une fonction (comme les gestionnaires d'\u00e9v\u00e9nements). Son utilisation dans Node.js est moins courante et d\u00e9pend du contexte d'utilisation.\n</code></pre>"},{"location":"a-trier/lodash/#etape-3-executer-le-script","title":"\u00c9tape 3 : Ex\u00e9cuter le Script","text":"<p>Dans votre terminal ou invite de commande, ex\u00e9cutez le script avec Node.js :</p> <pre><code>node script.js\n</code></pre> <p>Cela ex\u00e9cutera le script <code>script.js</code> et affichera les r\u00e9sultats des exemples dans la console. Chaque exemple illustre une utilisation diff\u00e9rente des fonctions de Lodash, allant de la manipulation de tableaux et d'objets \u00e0 l'utilisation de fonctions utilitaires comme <code>_.uniq</code> et <code>_.cloneDeep</code>.</p>"},{"location":"a-trier/promise_VS_async/","title":"promise VS async","text":"<p>mdn_promise</p> <p>La diff\u00e9rence principale entre une fonction asynchrone d\u00e9clar\u00e9e avec <code>async function mafonction()</code> et une fonction qui retourne explicitement une nouvelle promesse avec <code>function mafonction() { return new Promise((resolve, reject) =&gt; {}) }</code> r\u00e9side dans la syntaxe et la lisibilit\u00e9 du code, mais les deux approches ont le m\u00eame objectif fondamental : g\u00e9rer les op\u00e9rations asynchrones.</p>"},{"location":"a-trier/promise_VS_async/#fonction-asynchrone-async-function","title":"Fonction Asynchrone (Async Function)","text":"<pre><code>async function mafonction() {\n    // Logique asynchrone ici\n}\n</code></pre> <ul> <li>Syntaxe simplifi\u00e9e : L'utilisation du mot-cl\u00e9 <code>async</code> devant une fonction indique automatiquement que la fonction retournera une promesse.</li> <li>Gestion des erreurs : Les erreurs peuvent \u00eatre captur\u00e9es avec des blocs <code>try...catch</code>.</li> <li>Utilisation de <code>await</code> : Permet d'\u00e9crire du code asynchrone de mani\u00e8re plus lisible, presque comme s'il s'agissait de code synchrone. Le mot-cl\u00e9 <code>await</code> ne peut \u00eatre utilis\u00e9 que dans des fonctions asynchrones.</li> <li>Retour implicite de promesse : Toute valeur retourn\u00e9e par une fonction asynchrone est automatiquement encapsul\u00e9e dans une promesse. Si la fonction retourne une valeur non-promise, cette valeur est emball\u00e9e dans une promesse r\u00e9solue. Si la fonction l\u00e8ve une exception, elle retourne une promesse rejet\u00e9e.</li> </ul>"},{"location":"a-trier/promise_VS_async/#fonction-retournant-une-promesse","title":"Fonction Retournant une Promesse","text":"<pre><code>function mafonction() {\n    return new Promise((resolve, reject) =&gt; {\n        // Logique asynchrone ici\n    });\n}\n</code></pre> <ul> <li>Contr\u00f4le explicite : Vous cr\u00e9ez explicitement une nouvelle promesse. Cela vous donne un contr\u00f4le plus direct sur la r\u00e9solution et le rejet de la promesse.</li> <li>Gestion des erreurs : Les erreurs doivent \u00eatre g\u00e9r\u00e9es en rejetant la promesse (<code>reject</code>).</li> <li>Polyvalence : Peut \u00eatre utile dans des situations o\u00f9 vous devez convertir des op\u00e9rations bas\u00e9es sur des callbacks en promesses.</li> <li>Pas d\u2019utilisation de <code>await</code> \u00e0 l\u2019int\u00e9rieur : Dans ce contexte, vous ne pouvez pas utiliser <code>await</code> \u00e0 l'int\u00e9rieur de la fonction \u00e0 moins que la fonction elle-m\u00eame ne soit d\u00e9clar\u00e9e <code>async</code>.</li> </ul>"},{"location":"a-trier/promise_VS_async/#conclusion","title":"Conclusion","text":"<p>En pratique, les fonctions asynchrones (<code>async/await</code>) sont souvent pr\u00e9f\u00e9r\u00e9es pour leur syntaxe plus claire et leur facilit\u00e9 de gestion des erreurs. Elles rendent le code asynchrone plus lisible et plus proche d\u2019un style synchrone. Cependant, dans certains cas, notamment lors de la conversion de fonctions bas\u00e9es sur des callbacks en promesses, il peut \u00eatre n\u00e9cessaire de retourner explicitement une nouvelle promesse.</p>"},{"location":"a-trier/promise_callback/","title":"Promise callback","text":"<p>mdn_promise</p> <p>La polyvalence des fonctions retournant explicitement une promesse est particuli\u00e8rement utile lorsqu'on doit convertir des op\u00e9rations bas\u00e9es sur des callbacks en promesses. C'est souvent le cas avec des API plus anciennes ou des biblioth\u00e8ques qui utilisent des callbacks pour g\u00e9rer l'asynchronisme.</p> <p>Imaginons que vous ayez une fonction bas\u00e9e sur un callback, comme une fonction de lecture de fichier dans Node.js :</p> <pre><code>const fs = require('fs');\n\nfunction lireFichier(callback) {\n    fs.readFile('monFichier.txt', 'utf8', (err, data) =&gt; {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n</code></pre> <p>Cette fonction utilise un callback pour retourner le r\u00e9sultat ou une erreur. Maintenant, disons que vous voulez utiliser des promesses pour g\u00e9rer l'asynchronisme, ce qui rendrait votre code plus lisible et vous permettrait d'utiliser <code>async/await</code>. Vous pouvez envelopper cette fonction dans une nouvelle fonction qui retourne une promesse :</p> <pre><code>function lireFichierAsync() {\n    return new Promise((resolve, reject) =&gt; {\n        lireFichier((err, data) =&gt; {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve(data);\n        });\n    });\n}\n</code></pre> <p>Dans cette nouvelle version, <code>lireFichierAsync</code> retourne une promesse. Si <code>lireFichier</code> se termine avec succ\u00e8s, la promesse est r\u00e9solue avec les donn\u00e9es lues. Si une erreur survient, la promesse est rejet\u00e9e avec cette erreur.</p> <p>Vous pouvez maintenant utiliser <code>lireFichierAsync</code> avec <code>async/await</code> pour un code plus propre et plus lisible :</p> <pre><code>async function traiterFichier() {\n    try {\n        const contenu = await lireFichierAsync();\n        console.log(contenu);\n    } catch (err) {\n        console.error(\"Erreur lors de la lecture du fichier :\", err);\n    }\n}\n</code></pre> <p>Dans cet exemple, l'utilisation de promesses rend le code asynchrone plus intuitif et plus facile \u00e0 suivre, tout en int\u00e9grant une gestion d'erreur claire avec <code>try...catch</code>.</p>"},{"location":"a-trier/setTimeout/","title":"setTimeout","text":"<p>La fonction <code>setTimeout</code> est une fonction JavaScript int\u00e9gr\u00e9e qui permet de d\u00e9finir un d\u00e9lai avant l'ex\u00e9cution d'une fonction sp\u00e9cifique. Elle est largement utilis\u00e9e pour retarder l'ex\u00e9cution d'un morceau de code ou pour ex\u00e9cuter du code de mani\u00e8re asynchrone apr\u00e8s un certain temps. Voici une explication d\u00e9taill\u00e9e de son fonctionnement, de ses param\u00e8tres et de quelques cas d'utilisation.</p> <ul> <li>setTimeout</li> <li>Documentation<ul> <li>Fonctionnement de <code>setTimeout</code></li> <li>Exemple de base</li> <li>Annulation d'un Timeout</li> <li>Cas d'utilisation courants</li> <li>Bonnes pratiques</li> </ul> </li> <li>Exemples<ul> <li>1. Retarder l'ex\u00e9cution d'une fonction</li> <li>2. Debouncing</li> <li>3. Throttling</li> <li>4. Ex\u00e9cuter du code apr\u00e8s le chargement complet de la page</li> <li>5. Cr\u00e9er des animations ou des transitions temporis\u00e9es</li> <li>6. Simuler des op\u00e9rations asynchrones</li> </ul> </li> </ul>"},{"location":"a-trier/setTimeout/#documentation","title":"Documentation","text":""},{"location":"a-trier/setTimeout/#fonctionnement-de-settimeout","title":"Fonctionnement de <code>setTimeout</code>","text":"<p>La syntaxe de base de <code>setTimeout</code> est la suivante :</p> <pre><code>setTimeout(function, delay, [arg1, arg2, ...]);\n</code></pre> <ul> <li>function : La fonction \u00e0 ex\u00e9cuter apr\u00e8s le d\u00e9lai. Cette fonction peut \u00eatre une fonction anonyme ou le nom d'une fonction existante.</li> <li>delay : Le d\u00e9lai avant l'ex\u00e9cution de la fonction, exprim\u00e9 en millisecondes (1000 millisecondes = 1 seconde). Si ce d\u00e9lai est omis ou mis \u00e0 0, la fonction sera mise dans la file d'attente pour \u00eatre ex\u00e9cut\u00e9e d\u00e8s que possible, apr\u00e8s l'ach\u00e8vement des scripts en cours.</li> <li>arg1, arg2, ... : (Optionnel) Des arguments suppl\u00e9mentaires qui seront pass\u00e9s \u00e0 la fonction lors de son ex\u00e9cution.</li> </ul>"},{"location":"a-trier/setTimeout/#exemple-de-base","title":"Exemple de base","text":"<pre><code>function saluer() {\n    console.log(\"Bonjour !\");\n}\n\n// Ex\u00e9cute la fonction `saluer` apr\u00e8s un d\u00e9lai de 2 secondes.\nsetTimeout(saluer, 2000);\n</code></pre> <p>Dans cet exemple, la console affichera <code>\"Bonjour !\"</code> apr\u00e8s un d\u00e9lai de 2 secondes.</p>"},{"location":"a-trier/setTimeout/#annulation-dun-timeout","title":"Annulation d'un Timeout","text":"<p><code>setTimeout</code> retourne un identifiant unique (un nombre) pour le timeout qu'elle a cr\u00e9\u00e9. Cet identifiant peut \u00eatre utilis\u00e9 avec la fonction <code>clearTimeout</code> pour annuler le timeout avant qu'il ne soit ex\u00e9cut\u00e9.</p> <pre><code>const timeoutId = setTimeout(saluer, 2000);\n\n// Annule le timeout\nclearTimeout(timeoutId);\n</code></pre> <p>Dans cet exemple, le timeout est annul\u00e9 avant qu'il ne puisse ex\u00e9cuter la fonction <code>saluer</code>, donc \"Bonjour !\" ne sera pas affich\u00e9 dans la console.</p>"},{"location":"a-trier/setTimeout/#cas-dutilisation-courants","title":"Cas d'utilisation courants","text":"<ul> <li>Retarder des animations ou des transitions : Pour cr\u00e9er des effets visuels ou retarder l'affichage d'\u00e9l\u00e9ments sur une page web.</li> <li>Debounce : Attendre que l'utilisateur ait fini de taper dans un champ de saisie (par exemple, lors de la recherche) avant de lancer une requ\u00eate.</li> <li>Throttling : S'assurer qu'une fonction ne s'ex\u00e9cute pas trop fr\u00e9quemment, par exemple lors de l'\u00e9coute d'\u00e9v\u00e9nements de d\u00e9filement.</li> </ul>"},{"location":"a-trier/setTimeout/#bonnes-pratiques","title":"Bonnes pratiques","text":"<ul> <li>Utiliser <code>clearTimeout</code> pour \u00e9viter que des timeouts non n\u00e9cessaires ne s'ex\u00e9cutent, en particulier dans les cas o\u00f9 l'utilisateur peut quitter la page ou modifier l'\u00e9tat qui rendrait l'ex\u00e9cution du timeout non pertinente.</li> <li>\u00catre conscient du comportement du \"timer clamping\" dans certains navigateurs, o\u00f9 les d\u00e9lais courts peuvent \u00eatre augment\u00e9s pour am\u00e9liorer la performance et l'\u00e9conomie d'\u00e9nergie, en particulier pour les onglets en arri\u00e8re-plan.</li> </ul> <p>En r\u00e9sum\u00e9, <code>setTimeout</code> est un outil puissant pour contr\u00f4ler l'ex\u00e9cution asynchrone de code JavaScript. Il offre une flexibilit\u00e9 dans la gestion des op\u00e9rations diff\u00e9r\u00e9es, des animations, et d'autres t\u00e2ches n\u00e9cessitant un contr\u00f4le du timing.</p>"},{"location":"a-trier/setTimeout/#exemples","title":"Exemples","text":""},{"location":"a-trier/setTimeout/#1-retarder-lexecution-dune-fonction","title":"1. Retarder l'ex\u00e9cution d'une fonction","text":"<p>Utilisation : Ex\u00e9cuter une fonction apr\u00e8s un certain temps.</p> <p>Exemple :</p> <pre><code>setTimeout(() =&gt; {\n    console.log(\"Message affich\u00e9 apr\u00e8s 3 secondes\");\n}, 3000);\n</code></pre>"},{"location":"a-trier/setTimeout/#2-debouncing","title":"2. Debouncing","text":"<p>Utilisation : Limiter le nombre de fois qu'une fonction peut \u00eatre ex\u00e9cut\u00e9e sur une p\u00e9riode. C'est utile pour les \u00e9v\u00e9nements qui se d\u00e9clenchent fr\u00e9quemment, comme le redimensionnement de la fen\u00eatre ou la saisie dans un champ de recherche.</p> <p>Exemple :</p> <pre><code>let debounceTimer;\nfunction recherche() {\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(() =&gt; {\n        console.log(\"Recherche effectu\u00e9e\");\n    }, 300);\n}\n\n// Simuler l'appel de la fonction `recherche` \u00e0 chaque frappe de l'utilisateur\nrecherche(); // Appel\u00e9 \u00e0 chaque saisie de l'utilisateur\n</code></pre>"},{"location":"a-trier/setTimeout/#3-throttling","title":"3. Throttling","text":"<p>Utilisation : Assurer qu'une fonction ne s'ex\u00e9cute pas plus d'une fois toutes les X millisecondes. C'est utile pour les \u00e9v\u00e9nements de scroll ou de redimensionnement pour \u00e9viter des performances m\u00e9diocres.</p> <p>Exemple : Bien que <code>setTimeout</code> ne soit pas directement utilis\u00e9 pour le throttling, on peut combiner <code>setTimeout</code> et <code>clearTimeout</code> pour un effet similaire.</p> <pre><code>let throttleTimer;\nfunction handleScroll() {\n    if (!throttleTimer) {\n        throttleTimer = setTimeout(() =&gt; {\n            throttleTimer = null;\n            console.log(\"Scroll event handled\");\n        }, 100);\n    }\n}\n\n// Simuler l'appel de la fonction `handleScroll` lors du d\u00e9filement de la page\nhandleScroll();\nhandleScroll();\n</code></pre>"},{"location":"a-trier/setTimeout/#4-executer-du-code-apres-le-chargement-complet-de-la-page","title":"4. Ex\u00e9cuter du code apr\u00e8s le chargement complet de la page","text":"<p>Utilisation : Retarder l'ex\u00e9cution de script jusqu'\u00e0 ce que tous les \u00e9l\u00e9ments de la page soient charg\u00e9s.</p> <p>Exemple :</p> <pre><code>window.onload = () =&gt; {\n    setTimeout(() =&gt; {\n        console.log(\"Page enti\u00e8rement charg\u00e9e et pr\u00eate\");\n    }, 1000);\n};\n</code></pre>"},{"location":"a-trier/setTimeout/#5-creer-des-animations-ou-des-transitions-temporisees","title":"5. Cr\u00e9er des animations ou des transitions temporis\u00e9es","text":"<p>Utilisation : Cr\u00e9er des effets d'animation ou de transition en retardant l'ex\u00e9cution de fonctions li\u00e9es au style ou \u00e0 la position des \u00e9l\u00e9ments HTML.</p> <p>Exemple :</p> <pre><code>setTimeout(() =&gt; {\n    document.getElementById(\"monElement\").style.opacity = 1;\n}, 500);\n</code></pre>"},{"location":"a-trier/setTimeout/#6-simuler-des-operations-asynchrones","title":"6. Simuler des op\u00e9rations asynchrones","text":"<p>Utilisation : Simuler un appel r\u00e9seau ou une op\u00e9ration de base de donn\u00e9es dans des environnements de d\u00e9veloppement ou d'apprentissage.</p> <p>Exemple :</p> <pre><code>function fetchDataSimulated(callback) {\n    setTimeout(() =&gt; {\n        callback(\"Donn\u00e9es re\u00e7ues\");\n    }, 2000);\n}\n\nfetchDataSimulated((data) =&gt; {\n    console.log(data); // \"Donn\u00e9es re\u00e7ues\"\n});\n</code></pre> <p>Chacune de ces utilisations d\u00e9montre la flexibilit\u00e9 de <code>setTimeout</code> pour g\u00e9rer des op\u00e9rations asynchrones, des animations, des optimisations de performance, et plus encore dans le d\u00e9veloppement web.</p>"},{"location":"a-trier/window.onload_DOMContentLoaded/","title":"window.onload DOMContentLoaded","text":"<p>La diff\u00e9rence principale entre <code>window.onload</code> et <code>DOMContentLoaded</code> r\u00e9side dans le moment o\u00f9 ces \u00e9v\u00e9nements sont d\u00e9clench\u00e9s lors du chargement d'une page web.</p>"},{"location":"a-trier/window.onload_DOMContentLoaded/#domcontentloaded","title":"<code>DOMContentLoaded</code>","text":"<p>L'\u00e9v\u00e9nement <code>DOMContentLoaded</code> est d\u00e9clench\u00e9 lorsque le document HTML a \u00e9t\u00e9 compl\u00e8tement charg\u00e9 et analys\u00e9, sans attendre que les feuilles de style, les images, et les sous-frames aient fini de charger. Cela signifie que c'est l'\u00e9v\u00e9nement \u00e0 utiliser si vous voulez manipuler le DOM d\u00e8s que possible, sans attendre que tous les \u00e9l\u00e9ments de la page soient charg\u00e9s.</p> <pre><code>document.addEventListener(\"DOMContentLoaded\", function() {\n  // Code \u00e0 ex\u00e9cuter apr\u00e8s le chargement complet du DOM\n});\n</code></pre>"},{"location":"a-trier/window.onload_DOMContentLoaded/#windowonload","title":"<code>window.onload</code>","text":"<p>L'\u00e9v\u00e9nement <code>window.onload</code>, en revanche, est d\u00e9clench\u00e9 lorsque la page enti\u00e8re est compl\u00e8tement charg\u00e9e, y compris tous les contenus d\u00e9pendants tels que les feuilles de style, les images, et les iframes. C'est l'\u00e9v\u00e9nement \u00e0 utiliser si le script que vous souhaitez ex\u00e9cuter d\u00e9pend de ces \u00e9l\u00e9ments ext\u00e9rieurs au DOM.</p> <pre><code>window.onload = function() {\n  // Code \u00e0 ex\u00e9cuter apr\u00e8s le chargement complet de la page, y compris les images et les feuilles de style\n};\n</code></pre>"},{"location":"a-trier/window.onload_DOMContentLoaded/#quand-utiliser-lun-ou-lautre","title":"Quand utiliser l'un ou l'autre ?","text":"<ul> <li> <p>Utilisez <code>DOMContentLoaded</code> lorsque vous avez besoin d'ex\u00e9cuter du JavaScript d\u00e8s que le DOM est pr\u00eat \u00e0 \u00eatre manipul\u00e9, mais avant que d'autres ressources comme les images ne soient charg\u00e9es. Cela peut acc\u00e9l\u00e9rer l'interaction de l'utilisateur avec la page car le script s'ex\u00e9cute sans attendre le chargement complet de la page.</p> </li> <li> <p>Utilisez <code>window.onload</code> lorsque votre script d\u00e9pend de ressources externes qui doivent \u00eatre charg\u00e9es avant que le script ne s'ex\u00e9cute. Par exemple, si votre script travaille avec des images et que vous avez besoin de conna\u00eetre leurs dimensions, ces informations ne seront disponibles qu'apr\u00e8s le chargement complet de la page.</p> </li> </ul>"},{"location":"fetch/fetch_description/","title":"Fetch description","text":"<p><code>fetch()</code> est une m\u00e9thode JavaScript utilis\u00e9e pour effectuer des requ\u00eates HTTP ou HTTPS vers des serveurs web. Elle est largement utilis\u00e9e dans le d\u00e9veloppement web moderne pour charger des donn\u00e9es depuis des serveurs, soumettre des donn\u00e9es \u00e0 des serveurs, ou communiquer avec des APIs web.</p> <p>Voici les caract\u00e9ristiques principales de <code>fetch()</code> :</p> <ol> <li> <p>Syntaxe de base : La syntaxe de base de <code>fetch()</code> est <code>fetch(url)</code>, o\u00f9 <code>url</code> est le chemin vers la ressource que vous souhaitez obtenir.</p> </li> <li> <p>Promesses : <code>fetch()</code> retourne une promesse, ce qui signifie qu\u2019elle ne bloque pas l'ex\u00e9cution du script pendant le chargement de la ressource. Les promesses sont utilis\u00e9es pour g\u00e9rer les op\u00e9rations asynchrones en JavaScript. </p> </li> <li> <p>Gestion des r\u00e9ponses : Apr\u00e8s avoir appel\u00e9 <code>fetch()</code>, la promesse r\u00e9solue retourne un objet <code>Response</code>. Cet objet contient des informations sur la r\u00e9ponse du serveur, y compris le statut de la r\u00e9ponse, les en-t\u00eates et le corps de la r\u00e9ponse. </p> </li> <li> <p>Extraction des donn\u00e9es : Les donn\u00e9es peuvent \u00eatre extraites du corps de la r\u00e9ponse en utilisant des m\u00e9thodes comme <code>.json()</code>, <code>.text()</code>, <code>.blob()</code>, etc., selon le type de donn\u00e9es que vous attendez (JSON, texte brut, fichier binaire, etc.).</p> </li> <li> <p>Gestion des erreurs : <code>fetch()</code> ne rejette la promesse que lors d'\u00e9checs de r\u00e9seau ou si quelque chose emp\u00eache la requ\u00eate d'\u00eatre effectu\u00e9e. Pour g\u00e9rer les erreurs HTTP (comme les r\u00e9ponses 404 ou 500), vous devez v\u00e9rifier le statut de la r\u00e9ponse.</p> </li> <li> <p>Requ\u00eates avanc\u00e9es : <code>fetch()</code> peut \u00e9galement \u00eatre utilis\u00e9 pour effectuer des requ\u00eates plus complexes en utilisant des m\u00e9thodes HTTP comme GET, POST, PUT, DELETE, etc., en passant un deuxi\u00e8me argument sous forme d'objet avec des options comme <code>method</code>, <code>headers</code>, <code>body</code>, etc.</p> </li> </ol> <p>Un exemple simple de l'utilisation de <code>fetch()</code> pour obtenir des donn\u00e9es JSON d'une API pourrait ressembler \u00e0 ceci :</p> <pre><code>fetch('https://example.com/data')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data =&gt; {\n    console.log(data);\n  })\n  .catch(error =&gt; {\n    console.error('Fetching error:', error);\n  });\n</code></pre> <p>Dans cet exemple, une requ\u00eate est envoy\u00e9e \u00e0 'https://example.com/data', et les donn\u00e9es JSON sont extraites et affich\u00e9es dans la console si la requ\u00eate est r\u00e9ussie.</p>"},{"location":"fetch/fetch_methode/","title":"Fetch methode","text":"<p>L'utilisation de la m\u00e9thode <code>fetch()</code> dans JavaScript sert \u00e0 r\u00e9aliser des requ\u00eates HTTP. Elle retourne une promesse qui, une fois r\u00e9solue, donne acc\u00e8s \u00e0 un objet <code>Response</code>. Cet objet <code>Response</code> encapsule la r\u00e9ponse HTTP et offre plusieurs m\u00e9thodes pour interpr\u00e9ter le contenu de cette r\u00e9ponse. Voici les diff\u00e9rentes m\u00e9thodes pour traiter la r\u00e9ponse :</p> <ol> <li> <p>.json(): Cette m\u00e9thode est utilis\u00e9e pour lire le corps de la r\u00e9ponse et le convertir en JSON. Elle est souvent utilis\u00e9e avec des API qui renvoient des donn\u00e9es au format JSON.</p> </li> <li> <p>.text(): Elle lit le corps de la r\u00e9ponse et le retourne sous forme de texte brut. Cette m\u00e9thode est utile pour lire des r\u00e9ponses qui sont de simples textes (comme du HTML ou du texte brut).</p> </li> <li> <p>.blob(): Utilis\u00e9e pour lire le corps de la r\u00e9ponse et le retourner sous forme d'objet Blob, qui peut \u00eatre utilis\u00e9 pour manipuler des donn\u00e9es binaires (comme des images ou des documents).</p> </li> <li> <p>.formData(): Cette m\u00e9thode permet de lire le corps de la r\u00e9ponse et de le retourner sous forme d'objet FormData, utilis\u00e9 pour manipuler des formulaires et leurs donn\u00e9es associ\u00e9es.</p> </li> <li> <p>.arrayBuffer(): Cette m\u00e9thode est utilis\u00e9e pour lire le corps de la r\u00e9ponse et le retourner sous forme de ArrayBuffer, qui est utile pour traiter des donn\u00e9es binaires de bas niveau.</p> </li> <li> <p>.clone(): Cette m\u00e9thode cr\u00e9e une copie de l'objet <code>Response</code>. Cela peut \u00eatre utile si vous avez besoin de lire la r\u00e9ponse de plusieurs mani\u00e8res diff\u00e9rentes.</p> </li> <li> <p>.redirected: Une propri\u00e9t\u00e9 qui indique si la requ\u00eate a \u00e9t\u00e9 redirig\u00e9e.</p> </li> <li> <p>.status: Une propri\u00e9t\u00e9 qui retourne le code de statut de la r\u00e9ponse (comme 200 pour une r\u00e9ussite, 404 pour une page non trouv\u00e9e, etc.).</p> </li> <li> <p>.ok: Une propri\u00e9t\u00e9 qui retourne <code>true</code> si le statut de la r\u00e9ponse est dans la plage des succ\u00e8s (200\u2013299).</p> </li> <li> <p>.statusText: Cette propri\u00e9t\u00e9 retourne le message de statut associ\u00e9 au code de statut (comme \"OK\" ou \"Not Found\").</p> </li> <li> <p>.headers: C'est une propri\u00e9t\u00e9 qui retourne un objet Headers contenant les en-t\u00eates de la r\u00e9ponse HTTP.</p> </li> <li> <p>.url: Retourne l'URL de la r\u00e9ponse.</p> </li> </ol> <p>Chacune de ces m\u00e9thodes et propri\u00e9t\u00e9s offre un moyen diff\u00e9rent d'acc\u00e9der et de manipuler les donn\u00e9es renvoy\u00e9es par une requ\u00eate HTTP effectu\u00e9e avec <code>fetch()</code>.</p>"},{"location":"fetch/fetch_status/","title":"Fetch status","text":"<p>La m\u00e9thode <code>fetch</code> en JavaScript est utilis\u00e9e pour effectuer des requ\u00eates HTTP vers des serveurs web. L'un des aspects les plus importants de cette m\u00e9thode est l'objet de r\u00e9ponse, qui contient une propri\u00e9t\u00e9 <code>.status</code>. Cette propri\u00e9t\u00e9 renvoie le code de statut HTTP de la r\u00e9ponse. Voici une liste des codes de statut HTTP les plus courants et leur signification :</p> <ul> <li><code>200 OK</code> : La requ\u00eate a r\u00e9ussi, et la r\u00e9ponse contient les donn\u00e9es demand\u00e9es.</li> <li><code>201 Created</code> : La requ\u00eate a r\u00e9ussi, et une nouvelle ressource a \u00e9t\u00e9 cr\u00e9\u00e9e en cons\u00e9quence.</li> <li><code>202 Accepted</code> : La requ\u00eate a \u00e9t\u00e9 accept\u00e9e pour traitement, mais le traitement n'est pas termin\u00e9.</li> <li><code>204 No Content</code> : La requ\u00eate a r\u00e9ussi, mais il n'y a pas de contenu \u00e0 renvoyer.</li> <li><code>301 Moved Permanently</code> : L'URI demand\u00e9 a \u00e9t\u00e9 d\u00e9plac\u00e9 de mani\u00e8re permanente vers un nouvel emplacement.</li> <li><code>302 Found</code> : L'URI demand\u00e9 a \u00e9t\u00e9 temporairement d\u00e9plac\u00e9 vers un nouvel emplacement.</li> <li><code>304 Not Modified</code> : Les donn\u00e9es demand\u00e9es n'ont pas \u00e9t\u00e9 modifi\u00e9es depuis la derni\u00e8re requ\u00eate.</li> <li><code>400 Bad Request</code> : La requ\u00eate ne peut pas \u00eatre trait\u00e9e en raison d'une syntaxe incorrecte.</li> <li><code>401 Unauthorized</code> : Authentification requise pour acc\u00e9der \u00e0 la ressource.</li> <li><code>403 Forbidden</code> : Le serveur a compris la requ\u00eate mais refuse de l'autoriser.</li> <li><code>404 Not Found</code> : La ressource demand\u00e9e n'a pas \u00e9t\u00e9 trouv\u00e9e sur le serveur.</li> <li><code>405 Method Not Allowed</code> : La m\u00e9thode de requ\u00eate est connue par le serveur mais n'est pas prise en charge par la cible.</li> <li><code>500 Internal Server Error</code> : Erreur g\u00e9n\u00e9rique lorsque le serveur rencontre une situation inattendue.</li> <li><code>501 Not Implemented</code> : Le serveur ne prend pas en charge la fonctionnalit\u00e9 requise pour r\u00e9pondre \u00e0 la requ\u00eate.</li> <li><code>503 Service Unavailable</code> : Le serveur n'est pas disponible, souvent en raison d'une surcharge ou de travaux de maintenance.</li> </ul> <p>Ces codes sont une partie standard du protocole HTTP et sont utilis\u00e9s par les serveurs web pour indiquer le r\u00e9sultat d'une requ\u00eate client.</p>"},{"location":"fetch/fetch_utilisations/","title":"Fetch utilisations","text":"<p>En JavaScript, la fonction <code>fetch()</code> est utilis\u00e9e pour effectuer des requ\u00eates HTTP. Elle est tr\u00e8s pratique pour interagir avec des API ou effectuer des op\u00e9rations de r\u00e9seau. Voici les diff\u00e9rentes utilisations de <code>fetch()</code> :</p> <ol> <li> <p>Requ\u00eates GET Basiques : Utilis\u00e9es pour r\u00e9cup\u00e9rer des donn\u00e9es depuis un serveur.     <pre><code>fetch('url')\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data));\n</code></pre></p> </li> <li> <p>Envoi de Requ\u00eates POST : Pour envoyer des donn\u00e9es \u00e0 un serveur, souvent utilis\u00e9 pour soumettre des formulaires.    <pre><code>fetch('url', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(data),\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre></p> </li> <li> <p>Manipulation des En-t\u00eates (Headers) : Modifier ou ajouter des en-t\u00eates HTTP pour les requ\u00eates, utile pour les autorisations ou le contenu sp\u00e9cifique.    <pre><code>fetch('url', {\n  headers: new Headers({\n    'Authorization': 'Bearer token',\n    'Content-Type': 'application/json',\n  }),\n});\n</code></pre></p> </li> <li> <p>Gestion des Erreurs : Intercepter et g\u00e9rer les erreurs lors des requ\u00eates.    <pre><code>fetch('url')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .catch(error =&gt; console.error('Fetch error:', error));\n</code></pre></p> </li> <li> <p>Envoi de Fichiers (Upload) : Utiliser <code>fetch()</code> pour t\u00e9l\u00e9charger des fichiers sur un serveur.    <pre><code>const formData = new FormData();\nconst fileField = document.querySelector('input[type=\"file\"]');\n\nformData.append('username', 'abc123');\nformData.append('avatar', fileField.files[0]);\n\nfetch('url', {\n  method: 'POST',\n  body: formData\n});\n</code></pre></p> </li> <li> <p>Demandes Avec Credentials : Inclure des cookies et des informations d'identification lors d'une requ\u00eate.    <pre><code>fetch('url', {\n  credentials: 'include'\n});\n</code></pre></p> </li> <li> <p>Aborter une Requ\u00eate : Utiliser l'API <code>AbortController</code> pour annuler une requ\u00eate en cours.    ```javascript    const controller = new AbortController();    const signal = controller.signal;</p> </li> </ol> <p>fetch('url', { signal })<code>fetch()</code> est une m\u00e9thode JavaScript utilis\u00e9e pour effectuer des requ\u00eates HTTP ou HTTPS vers des serveurs web. Elle est largement utilis\u00e9e dans le d\u00e9veloppement web moderne pour charger des donn\u00e9es depuis des serveurs, soumettre des donn\u00e9es \u00e0 des serveurs, ou communiquer avec des APIs web.</p> <p>Voici les caract\u00e9ristiques principales de <code>fetch()</code> :</p> <ol> <li> <p>Syntaxe de base : La syntaxe de base de <code>fetch()</code> est <code>fetch(url)</code>, o\u00f9 <code>url</code> est le chemin vers la ressource que vous souhaitez obtenir.</p> </li> <li> <p>Promesses : <code>fetch()</code> retourne une promesse, ce qui signifie qu\u2019elle ne bloque pas l'ex\u00e9cution du script pendant le chargement de la ressource. Les promesses sont utilis\u00e9es pour g\u00e9rer les op\u00e9rations asynchrones en JavaScript. </p> </li> <li> <p>Gestion des r\u00e9ponses : Apr\u00e8s avoir appel\u00e9 <code>fetch()</code>, la promesse r\u00e9solue retourne un objet <code>Response</code>. Cet objet contient des informations sur la r\u00e9ponse du serveur, y compris le statut de la r\u00e9ponse, les en-t\u00eates et le corps de la r\u00e9ponse. </p> </li> <li> <p>Extraction des donn\u00e9es : Les donn\u00e9es peuvent \u00eatre extraites du corps de la r\u00e9ponse en utilisant des m\u00e9thodes comme <code>.json()</code>, <code>.text()</code>, <code>.blob()</code>, etc., selon le type de donn\u00e9es que vous attendez (JSON, texte brut, fichier binaire, etc.).</p> </li> <li> <p>Gestion des erreurs : <code>fetch()</code> ne rejette la promesse que lors d'\u00e9checs de r\u00e9seau ou si quelque chose emp\u00eache la requ\u00eate d'\u00eatre effectu\u00e9e. Pour g\u00e9rer les erreurs HTTP (comme les r\u00e9ponses 404 ou 500), vous devez v\u00e9rifier le statut de la r\u00e9ponse.</p> </li> <li> <p>Requ\u00eates avanc\u00e9es : <code>fetch()</code> peut \u00e9galement \u00eatre utilis\u00e9 pour effectuer des requ\u00eates plus complexes en utilisant des m\u00e9thodes HTTP comme GET, POST, PUT, DELETE, etc., en passant un deuxi\u00e8me argument sous forme d'objet avec des options comme <code>method</code>, <code>headers</code>, <code>body</code>, etc.</p> </li> </ol> <p>Un exemple simple de l'utilisation de <code>fetch()</code> pour obtenir des donn\u00e9es JSON d'une API pourrait ressembler \u00e0 ceci :</p> <pre><code>fetch('https://example.com/data')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data =&gt; {\n    console.log(data);\n  })\n  .catch(error =&gt; {\n    console.error('Fetching error:', error);\n  });\n</code></pre> <p>Dans cet exemple, une requ\u00eate est envoy\u00e9e \u00e0 'https://example.com/data', et les donn\u00e9es JSON sont extraites et affich\u00e9es dans la console si la requ\u00eate est r\u00e9ussie.<code>fetch()</code> est une m\u00e9thode JavaScript utilis\u00e9e pour effectuer des requ\u00eates HTTP ou HTTPS vers des serveurs web. Elle est largement utilis\u00e9e dans le d\u00e9veloppement web moderne pour charger des donn\u00e9es depuis des serveurs, soumettre des donn\u00e9es \u00e0 des serveurs, ou communiquer avec des APIs web.</p> <p>Voici les caract\u00e9ristiques principales de <code>fetch()</code> :</p> <ol> <li> <p>Syntaxe de base : La syntaxe de base de <code>fetch()</code> est <code>fetch(url)</code>, o\u00f9 <code>url</code> est le chemin vers la ressource que vous souhaitez obtenir.</p> </li> <li> <p>Promesses : <code>fetch()</code> retourne une promesse, ce qui signifie qu\u2019elle ne bloque pas l'ex\u00e9cution du script pendant le chargement de la ressource. Les promesses sont utilis\u00e9es pour g\u00e9rer les op\u00e9rations asynchrones en JavaScript. </p> </li> <li> <p>Gestion des r\u00e9ponses : Apr\u00e8s avoir appel\u00e9 <code>fetch()</code>, la promesse r\u00e9solue retourne un objet <code>Response</code>. Cet objet contient des informations sur la r\u00e9ponse du serveur, y compris le statut de la r\u00e9ponse, les en-t\u00eates et le corps de la r\u00e9ponse. </p> </li> <li> <p>Extraction des donn\u00e9es : Les donn\u00e9es peuvent \u00eatre extraites du corps de la r\u00e9ponse en utilisant des m\u00e9thodes comme <code>.json()</code>, <code>.text()</code>, <code>.blob()</code>, etc., selon le type de donn\u00e9es que vous attendez (JSON, texte brut, fichier binaire, etc.).</p> </li> <li> <p>Gestion des erreurs : <code>fetch()</code> ne rejette la promesse que lors d'\u00e9checs de r\u00e9seau ou si quelque chose emp\u00eache la requ\u00eate d'\u00eatre effectu\u00e9e. Pour g\u00e9rer les erreurs HTTP (comme les r\u00e9ponses 404 ou 500), vous devez v\u00e9rifier le statut de la r\u00e9ponse.</p> </li> <li> <p>Requ\u00eates avanc\u00e9es : <code>fetch()</code> peut \u00e9galement \u00eatre utilis\u00e9 pour effectuer des requ\u00eates plus complexes en utilisant des m\u00e9thodes HTTP comme GET, POST, PUT, DELETE, etc., en passant un deuxi\u00e8me argument sous forme d'objet avec des options comme <code>method</code>, <code>headers</code>, <code>body</code>, etc.</p> </li> </ol> <p>Un exemple simple de l'utilisation de <code>fetch()</code> pour obtenir des donn\u00e9es JSON d'une API pourrait ressembler \u00e0 ceci :</p> <pre><code>fetch('https://example.com/data')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data =&gt; {\n    console.log(data);\n  })\n  .catch(error =&gt; {\n    console.error('Fetching error:', error);\n  });\n</code></pre> <p>Dans cet exemple, une requ\u00eate est envoy\u00e9e \u00e0 'https://example.com/data', et les donn\u00e9es JSON sont extraites et affich\u00e9es dans la console si la requ\u00eate est r\u00e9ussie.      .catch(err =&gt; {        if (err.name === 'AbortError') {          console.log('Fetch aborted');        } else {          console.error('Fetch error:', err);        }      });</p> <p>controller.abort();    ```</p> <ol> <li>Requ\u00eates Multi-Parties : Pour envoyer des requ\u00eates multi-parties, souvent utilis\u00e9es pour les formulaires avec fichiers.    <pre><code>const formData = new FormData();\nformData.append('file', fileInput.files[0]);\nformData.append('user', 'user1');\n\nfetch('url', {\n  method: 'POST',\n  body: formData,\n});\n</code></pre></li> </ol> <p><code>fetch()</code> offre donc une grande flexibilit\u00e9 pour effectuer des requ\u00eates HTTP de diverses mani\u00e8res, permettant une interaction riche avec des ressources sur le web.</p>"},{"location":"regexp/caracteres/","title":"Caracteres","text":"<p>Les expressions r\u00e9guli\u00e8res (Regex) en JavaScript sont une m\u00e9thode puissante pour rechercher et manipuler des cha\u00eenes de caract\u00e8res. Voici une liste des caract\u00e8res et constructions sp\u00e9ciales utilis\u00e9s dans les expressions r\u00e9guli\u00e8res, accompagn\u00e9e de br\u00e8ves explications :</p>"},{"location":"regexp/caracteres/#caracteres-simples","title":"Caract\u00e8res simples","text":"<ul> <li><code>.</code> : Correspond \u00e0 n'importe quel caract\u00e8re, sauf les terminaisons de ligne.</li> <li><code>\\</code> : \u00c9chappe un caract\u00e8re sp\u00e9cial, le traitant comme un caract\u00e8re litt\u00e9ral.</li> </ul>"},{"location":"regexp/caracteres/#classes-de-caracteres","title":"Classes de caract\u00e8res","text":"<ul> <li><code>[abc]</code> : Correspond \u00e0 n'importe quel caract\u00e8re unique parmi ceux entre crochets (ici a, b, ou c).</li> <li><code>[^abc]</code> : Correspond \u00e0 tout caract\u00e8re qui n'est pas entre les crochets.</li> <li><code>[0-9]</code> : Correspond \u00e0 n'importe quel caract\u00e8re num\u00e9rique.</li> <li><code>[a-z]</code> : Correspond \u00e0 n'importe quel caract\u00e8re alphab\u00e9tique en minuscule.</li> <li><code>[A-Z]</code> : Correspond \u00e0 n'importe quel caract\u00e8re alphab\u00e9tique en majuscule.</li> <li><code>[a-zA-Z]</code> : Correspond \u00e0 n'importe quel caract\u00e8re alphab\u00e9tique.</li> </ul>"},{"location":"regexp/caracteres/#classes-de-caracteres-speciaux","title":"Classes de caract\u00e8res sp\u00e9ciaux","text":"<ul> <li><code>\\d</code> : Correspond \u00e0 n'importe quel chiffre (\u00e9quivalent \u00e0 <code>[0-9]</code>).</li> <li><code>\\D</code> : Correspond \u00e0 tout ce qui n'est pas un chiffre (\u00e9quivalent \u00e0 <code>[^0-9]</code>).</li> <li><code>\\w</code> : Correspond \u00e0 n'importe quel caract\u00e8re alphanum\u00e9rique, y compris le soulign\u00e9 (\u00e9quivalent \u00e0 <code>[a-zA-Z0-9_]</code>).</li> <li><code>\\W</code> : Correspond \u00e0 tout ce qui n'est pas un caract\u00e8re alphanum\u00e9rique.</li> <li><code>\\s</code> : Correspond \u00e0 n'importe quel espace blanc (espaces, tabulations, sauts de ligne).</li> <li><code>\\S</code> : Correspond \u00e0 tout ce qui n'est pas un espace blanc.</li> </ul>"},{"location":"regexp/caracteres/#assertions","title":"Assertions","text":"<ul> <li><code>^</code> : Correspond au d\u00e9but d'une cha\u00eene.</li> <li><code>$</code> : Correspond \u00e0 la fin d'une cha\u00eene.</li> <li><code>\\b</code> : Correspond \u00e0 une limite de mot (par exemple, l'espace autour d'un mot).</li> <li><code>\\B</code> : Correspond \u00e0 une position qui n'est pas une limite de mot.</li> </ul>"},{"location":"regexp/caracteres/#quantificateurs","title":"Quantificateurs","text":"<ul> <li><code>*</code> : Correspond \u00e0 z\u00e9ro ou plusieurs occurrences de l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent.</li> <li><code>+</code> : Correspond \u00e0 une ou plusieurs occurrences de l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent.</li> <li><code>?</code> : Rend l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent facultatif (z\u00e9ro ou une occurrence).</li> <li><code>{n}</code> : Correspond exactement \u00e0 n occurrences de l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent.</li> <li><code>{n,}</code> : Correspond \u00e0 n ou plus occurrences de l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent.</li> <li><code>{n,m}</code> : Correspond \u00e0 un nombre d'occurrences de l'\u00e9l\u00e9ment pr\u00e9c\u00e9dent compris entre n et m, inclusivement.</li> </ul>"},{"location":"regexp/caracteres/#groupement-et-references-arriere","title":"Groupement et r\u00e9f\u00e9rences arri\u00e8re","text":"<ul> <li><code>(abc)</code> : Capture le groupe entre parenth\u00e8ses pour r\u00e9f\u00e9rence ult\u00e9rieure.</li> <li><code>\\1</code>, <code>\\2</code>, etc. : R\u00e9f\u00e9rence arri\u00e8re \u00e0 un groupe captur\u00e9 pr\u00e9c\u00e9demment selon sa position.</li> </ul>"},{"location":"regexp/caracteres/#alternance","title":"Alternance","text":"<ul> <li><code>|</code> : Op\u00e9rateur OR, correspond \u00e0 l'expression pr\u00e9c\u00e9dente ou suivante.</li> </ul>"},{"location":"regexp/caracteres/#drapeaux-modificateurs","title":"Drapeaux (modificateurs)","text":"<ul> <li><code>g</code> : Global, effectue une recherche sur toute la cha\u00eene.</li> <li><code>i</code> : Insensible \u00e0 la casse.</li> <li><code>m</code> : Multiligne, <code>^</code> et <code>$</code> peuvent correspondre au d\u00e9but et \u00e0 la fin de chaque ligne.</li> </ul>"},{"location":"regexp/caracteres/#exemple-dutilisation","title":"Exemple d'utilisation","text":"<pre><code>// Recherche de tous les num\u00e9ros dans une cha\u00eene\nconst text = \"Les num\u00e9ros sont 123 et 456\";\nconst regex = /\\d+/g;\nconst found = text.match(regex);\nconsole.log(found); // [\"123\", \"456\"]\n</code></pre> <p>Cette liste couvre les \u00e9l\u00e9ments de base des expressions r\u00e9guli\u00e8res en JavaScript. Les expressions r\u00e9guli\u00e8res sont un outil puissant mais complexe, et leur utilisation efficace n\u00e9cessite de la pratique et une compr\u00e9hension approfondie.</p>"},{"location":"regexp/guide/","title":"Guide sur l'utilisation des expressions r\u00e9guli\u00e8res (Regex) en JavaScript","text":"<p>Les expressions r\u00e9guli\u00e8res, \u00e9galement connues sous le nom de regex, sont des s\u00e9quences de caract\u00e8res qui forment un mod\u00e8le de recherche. En JavaScript, les regex sont utilis\u00e9es pour la recherche de correspondances de cha\u00eenes de caract\u00e8res, la validation de formulaires, le remplacement de texte, et bien plus encore. Ce guide vous fournira une vue d'ensemble concr\u00e8te et d\u00e9taill\u00e9e de l'utilisation des regex en JavaScript, accompagn\u00e9e d'exemples pratiques.</p>"},{"location":"regexp/guide/#creation-dune-regex-en-javascript","title":"Cr\u00e9ation d'une Regex en JavaScript","text":"<p>En JavaScript, une expression r\u00e9guli\u00e8re peut \u00eatre cr\u00e9\u00e9e de deux mani\u00e8res :</p> <ol> <li>Litt\u00e9raux de regex : entour\u00e9e de barres obliques (<code>/pattern/flags</code>)</li> </ol> <p>Exemple : <code>/abc/</code></p> <ol> <li>Constructeur de l'objet RegExp : <code>new RegExp('pattern', 'flags')</code></li> </ol> <p>Exemple : <code>new RegExp('abc')</code></p>"},{"location":"regexp/guide/#drapeaux-flags","title":"Drapeaux (Flags)","text":"<p>Les drapeaux modifient la recherche. Voici les plus couramment utilis\u00e9s :</p> <ul> <li><code>g</code> : Correspondance globale (recherche toutes les correspondances).</li> <li><code>i</code> : Insensible \u00e0 la casse (ignore la diff\u00e9rence entre majuscules et minuscules).</li> <li><code>m</code> : Plusieurs lignes (les caract\u00e8res de d\u00e9but et de fin <code>^</code> et <code>$</code> correspondent au d\u00e9but/fin de chaque ligne).</li> </ul>"},{"location":"regexp/guide/#methodes-et-proprietes-courantes","title":"M\u00e9thodes et Propri\u00e9t\u00e9s Courantes","text":""},{"location":"regexp/guide/#methodes-de-regexp","title":"M\u00e9thodes de RegExp","text":"<ul> <li><code>test()</code> : Retourne <code>true</code> si le motif est trouv\u00e9 dans la cha\u00eene; sinon, <code>false</code>.</li> <li><code>exec()</code> : Trouve une correspondance et retourne un tableau contenant les d\u00e9tails de cette correspondance ou <code>null</code>.</li> </ul>"},{"location":"regexp/guide/#methodes-de-string","title":"M\u00e9thodes de String","text":"<ul> <li><code>match()</code> : Retourne un tableau contenant toutes les correspondances.</li> <li><code>search()</code> : Retourne l'index de la premi\u00e8re correspondance, sinon -1.</li> <li><code>replace()</code> : Remplace les correspondances trouv\u00e9es avec un nouveau sous-string.</li> <li><code>split()</code> : Utilise une regex pour diviser une cha\u00eene en un tableau de sous-strings.</li> </ul>"},{"location":"regexp/guide/#exemples","title":"Exemples","text":""},{"location":"regexp/guide/#recherche-simple","title":"Recherche Simple","text":"<pre><code>const regex = /abc/;\nconst str = 'abcde';\nconsole.log(regex.test(str)); // true\n</code></pre>"},{"location":"regexp/guide/#utilisation-des-drapeaux","title":"Utilisation des Drapeaux","text":"<pre><code>const regex = /abc/i; // Insensible \u00e0 la casse\nconst str = 'AbCdE';\nconsole.log(regex.test(str)); // true\n</code></pre>"},{"location":"regexp/guide/#recherche-globale","title":"Recherche Globale","text":"<pre><code>const regex = /a/g;\nconst str = 'abcAdeAfg';\nconst matches = str.match(regex);\nconsole.log(matches); // ['a', 'A', 'A']\n</code></pre>"},{"location":"regexp/guide/#remplacement-de-texte","title":"Remplacement de Texte","text":"<pre><code>const regex = /a/g;\nconst str = 'abcAdeAfg';\nconst newStr = str.replace(regex, 'x');\nconsole.log(newStr); // xbcXdeXfg\n</code></pre>"},{"location":"regexp/guide/#validation-de-formulaire","title":"Validation de Formulaire","text":"<p>Exemple de validation d'une adresse email :</p> <pre><code>const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\nconst email = \"exemple@domaine.com\";\nconsole.log(emailRegex.test(email)); // true si valide, false sinon\n</code></pre>"},{"location":"regexp/guide/#conseils-pour-ecrire-des-regex","title":"Conseils pour \u00c9crire des Regex","text":"<ol> <li>Commencez Simple : Commencez avec des motifs simples et augmentez progressivement la complexit\u00e9.</li> <li>Utilisez des Outils en Ligne : Des outils comme regex101.com peuvent \u00eatre tr\u00e8s utiles pour tester et d\u00e9boguer vos expressions.</li> <li>Familiarisez-vous avec les Caract\u00e8res Sp\u00e9ciaux : Certains caract\u00e8res ont des significations sp\u00e9ciales dans les regex (par exemple, <code>.</code> , <code>*</code>, <code>?</code>, <code>+</code>, <code>^</code>, <code>$</code>, etc.). Utilisez un antislash (<code>\\</code>) pour les \u00e9chapper si vous voulez rechercher ces caract\u00e8res litt\u00e9ralement.</li> <li>Optez pour la Lisibilit\u00e9 : Les regex peuvent rapidement devenir compliqu\u00e9es. Commentez votre code et envisagez de d\u00e9composer des expressions complexes en sous-parties.</li> </ol> <p>En suivant ces principes et en pratiquant r\u00e9guli\u00e8rement, vous deviendrez de plus en plus \u00e0 l'aise avec les regex en JavaScript. Elles sont un outil puissant qui, une fois ma\u00eetris\u00e9, peuvent grandement simplifier le traitement des cha\u00eenes de caract\u00e8res.</p>"}]}